#Область ИсходныйФункционал

//
Процедура ПолучитьДанныеИзМакета () Экспорт

	ИмяМакета = "СоответствиеОбъектов";

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);


	Возвратить = Объект.Соответствие;
	НомерСтроки = 0;
	НомерКолонки = 1;
	Пока Истина Цикл
		НомерСтроки = НомерСтроки + 1;//В первой строке имена колонок для заполнения макета, по ним создаем колонки
		ТекстКолонки = Макет.Область(НомерСтроки, НомерКолонки).Текст;

		Если ПустаяСтрока(ТекстКолонки) Тогда
			Прервать;
		КонецЕсли;

		//Со второй строки заполняем значения колонок таблицы значений

		ТекстКолонки = Макет.Область(НомерСтроки, 1).Текст;
		Если ПустаяСтрока(ТекстКолонки) Тогда              //Проверяем, а есть после заловока хоть одна строка, если нет - заканчиваем
			Прервать;
		КонецЕсли;


		ТекстКолонки = Макет.Область(НомерСтроки, 1).Текст;
		Если ПустаяСтрока(ТекстКолонки) Тогда
			Прервать;
		КонецЕсли;

		НовСтр = Возвратить.Добавить();
		НовСтр.ИдИсточник = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
		НовСтр.ИдПриемник = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);

	КонецЦикла;


КонецПроцедуры


&НаСервере
Функция _ПолучитьСоответствиеОбъектов(ИдИсточник = "", ИдПриемник = "") Экспорт
	Найдено = неопределено;
	Если Не ИдИсточник = "" Тогда

		Отбор = Новый Структура();
		Отбор.Вставить("ИдИсточник", ИдИсточник);
		Найдено = Объект.Соответствие.НайтиСтроки(Отбор);
		Если Найдено = Неопределено ИЛИ Найдено.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Найдено[0].ИдПриемник;
		КонецЕсли;
	ИначеЕсли Не ИдПриемник = "" Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ИдПриемник", ИдПриемник);
		Найдено = Объект.Соответствие.НайтиСтроки(ОТбор);
		Если Найдено = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Если Найдено.Количество()>0 Тогда
				Возврат Найдено[0].ИдИсточник;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПрочитатьВсеНаСервере_(ДатаНачала,ДатаОкончания)

	Если Объект.ТестоваяБаза Тогда
		ПараметрыПодключения = "Srvr=""rserver"";Ref=""kguuniver"";Usr=""ГарантПлюс"";Pwd=""951753"";";
	Иначе
		//ПараметрыПодключения = "Srvr=""1c-edu"";Ref=""1c-univer-prof"";Usr=""ГарантПлюс"";Pwd=""951753"";";
		ПараметрыПодключения = "Srvr=""ts01"";Ref=""univer-prof-copy01"";Usr=""ГарантПлюс"";Pwd=""951753"";";
	КонецЕсли;




	//V82COMConnector= Новый COMОбъект("V83.COMConnector");
	V82COMConnector= Новый COMОбъект("V83.COMConnector");
	Попытка
		Соединение  = V82COMConnector.Connect(ПараметрыПодключения);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	ВнешняяБаза = Соединение;

	Запрос  = ВнешняяБаза.NewObject("Запрос");
	Запрос.Текст =        "ВЫБРАТЬ
	|	Приказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Приказы КАК Приказы
	|ГДЕ
	|	Приказы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Приказы.Ссылка.Проведен";
	Если ЗначениеЗаполнено(Объект.НомерПриказа) Тогда
		Запрос.Текст = Запрос.Текст + "	И Приказы.Ссылка.НомерПриказа Подобно (&Номерприказа)";
		Запрос.УстановитьПараметр("НомерПриказа",Объект.НомерПриказа);
	КонецЕсли;
	//ДатаНачала,ДатаОкончания
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
    ТабличкаДокументовСом = Запрос.Выполнить().Выгрузить();
	// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТабличкаДокументовСом.Количество());


	Для Каждого ДокументСом Из ТабличкаДокументовСом Цикл  //Документы
		ПП =0;
		ДокументСомСсылка = ДокументСом.ссылка;
		// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДокументСомСсылка.Номер);

		Если  ДокументСомСсылка.ОбщиеДанные.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет студентов");
			ПРодолжить;
		КонецЕсли;

		ТЧСом =  ДокументСомСсылка.ОбщиеДанные;
		Табличка = ТЧСом.Выгрузить();
		Табличка.Свернуть("Факультет");
		МассивФакултетовСом = Табличка.ВыгрузитьКолонку("Факультет");


		Для каждого ФакултетИзМассива Из МассивФакултетовСом Цикл //факультеты
			ПП = ПП +1;
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивФакултетовСом.Количество());
			// ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ФакултетИзМассива.Наименование);
			ОтборСОМ = ВнешняяБаза.NewObject("Структура");
			ОтборСОМ.Вставить("Факультет",ФакултетИзМассива);
			МассивСтрокДокумента =  ТЧСом.НайтиСтроки(ОтборСОМ);

			НомерПриказа =  СокрЛП(ПП) +"/"+СокрЛП(ДокументСомСсылка.НомерПриказа);
			НовОбъект1С = Документы.ПриказОбразование.СоздатьДокумент();

			Если НЕ (ДокументСомСсылка.КанцелярскаяДата = ДАТА('00010101')) ТОгда
				НовОбъект1С.Дата = ДокументСомСсылка.КанцелярскаяДата;
			Иначе
				НовОбъект1С.Дата = ДокументСомСсылка.Дата;
			КонецЕсли;

			НовОбъект1С.Номер =НомерПриказа; // 176-з  Строка
			//НовОбъект1С.Дата = ДокументСомСсылка.Дата;
			НовОбъект1С.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
			НовОбъект1С.Факультет = СоздатьИлиНайтиФакультет(ФакултетИзМассива); // Филологический  Справочник.Подразделения
			//НовОбъект1С.ИспользоватьФакультетДокументаДопУслуги = Ложь; // Нет  Булево
			НовОбъект1С.ДатаНачалаДействия = ДокументСомСсылка.КанцелярскаяДата; // 22.02.2023 0:00:00  Дата

			Для Каждого СтрокаСом Из МассивСтрокДокумента Цикл  //строки по факултетам

				Если  СтрокаСом.Основа.Наименование   = "С полным возмещением затрат"  ИЛИ СтрокаСом.Основа.Наименование   = "За счет средств физических лиц" Тогда
					НовОбъект1С.ВидПриказа = СоздатьИлиНайтиВидПриказа(СтрокаСом.ТипПриказа);


					НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					Студент = НайтиИлиСоздатьСтудента(СтрокаСом.ФизическоеЛицо);
					Договор = НайтиИлиСоздатьДоговор(СтрокаСом,Студент,ДокументСомСсылка.Дата);
					НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
					//Курс;
					НовСтрТЧ.Поле =  ПланыВидовХарактеристик.ПоляПриказовОбразование.Курс;
					Если СтрокаСом.Курс.Наименование ="Первый" Тогда
						НовСтрТЧ.Значение = Справочники.КурсыОбучения.НайтиПоНаименованию("1"); // 1  Справочник.КурсыОбучения
					Иначе
						НовСтрТЧ.Значение = Справочники.КурсыОбучения.НайтиПоНаименованию(СтрокаСом.Курс.Наименование);
					КОнецЕсли;
					НовСтрТЧ.Договор = Договор;

					//
					////График оплаты
					//
					//НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					//НовСтрТЧ.Студент = Студент;// Завизина Екатерина Андреевна  Справочник.Студенты
					//НовСтрТЧ.Поле =  ПланыВидовХарактеристик.ПоляПриказовОбразование.ГрафикОплаты;
					//НовСтрТЧ.Значение = Перечисления.гпСпособыОплатыЗаОбучение.ПоСеместрам; // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
					//НовСтрТЧ.Договор = Договор; // Договор со студентом Завизина Екатерина Андреевна  Справочник.Договоры



					НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					НовСтрТЧ.Студент = Студент; // Мингазова Милена Артемовна  Справочник.Студенты
					НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Способы оплаты за обучение");
					НовСтрТЧ.Значение = Перечисления.гпСпособыОплатыЗаОбучение.ПоСеместрам; // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
					НовСтрТЧ.Договор = Договор; // Договор со студентом Мингазова Милена Артемовна  Справочник.Договоры

					//СтавкиОплатыОбразование
					НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					НовСтрТЧ.Студент = Студент;// Завизина Екатерина Андреевна  Справочник.Студенты
					НовСтрТЧ.Поле =  ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Ставка оплаты");
					НовСтрТЧ.Значение = Справочники.СтавкиОплатыОбразование.НайтиПоКоду("000000017"); // Общая  Справочник.СтавкиОплатыОбразование // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
					НовСтрТЧ.Договор = Договор; // Договор со студентом Завизина Екатерина Андреевна  Справочник.Договоры


					//Специальность
					НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
					НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.Специальность;
					НовСтрТЧ.Значение = СоздатьИлиНайтиСпециальностиОбразование(СтрокаСом.Специальность);
					НовСтрТЧ.Договор = Договор; // Договор со студентом Стебеняева Любовь Сергеевна  Справочник.Договоры

					//Форма
					НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
					НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
					НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Форма обучения");
					Если   СтрокаСом.ФормаОбучения.Наименование = "Очная" ТОгда
						НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.Дневная;
					ИначеЕсли СтрокаСом.ФормаОбучения.Наименование = "Заочная" ТОгда
						НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.Заочная;
					Иначе
						НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.ОчноЗаочная; 	// Заочная  Перечисление.гпФормыОбучения
					КОнецЕсли;
					НовСтрТЧ.Договор = Договор; // Договор со студентом Стебеняева Любовь Сергеевна  Справочник.Договоры



					//		1.	Студент ФИО
					//2.	Договор
					//3.	Состояние
					//4.	Факультет
					//5.	Специальность
					//6.	Направление подготовки
					//7.	Код направления подготовки
					//8.	Форма обучения
					//9.	Курс
					//10.	Стоимость обучения годовая
					//11.	Полная стоимость реализации программы
					//12.	Срок реализации программы (на данный момент только внедряется в программу)
					//13.	Ставка оплаты
					//14.	График оплаты
					//15.	Льгота

				КонецЕсли;
			КонецЦИкла;
			Если НовОбъект1С.Студенты.Количество()> 0 Тогда
				НовОбъект1С.Комментарий =НомерПриказа+"/"+ ДокументСомСсылка.Комментарий;
				НовОбъект1С.Записать();
			КонецЕсли;
		КОнецЦИкла;
	КонецЦикла;


	Соединение ="";
КонецПроцедуры

Функция СоздатьИлиНайтиФакультет(Факультет)
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("//////////ИЩЕМ//////");
	Рез = Справочники.Подразделения.ПустаяСсылка();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Факультет.Наименование);
	Наименование =  _ПолучитьСоответствиеОбъектов(Факультет.Наименование,);
	Если  НЕ(Наименование = Неопределено) Тогда
		СтрокаСообщения ="Нашли "+Наименование+" по "+Факультет.Наименование;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Рез = Справочники.Подразделения.НайтиПоНаименованию(Наименование);
		СтрокаСообщения ="определили факультет "+Рез.Наименование+" по "+Факультет.Наименование;
	Иначе
		СтрокаСообщения ="Не нашли по "+Факультет.Наименование;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	Если Рез = Справочники.Подразделения.ПустаяСсылка() Тогда
		СтрокаСообщения = "Подразделение не найдено "+Факультет.Наименование + " проверьте соответствие наименования между программами";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	Возврат Рез;
КонецФункции

Функция НайтиИлиСоздатьСтудента(Студент)

	СсылкаРодитель = Справочники.Студенты.НайтиПоНаименованию("2023 приемная кампания");

	Если  СсылкаРодитель = Справочники.Студенты.ПустаяСсылка() Тогда
		Родитель = Справочники.Студенты.СоздатьГруппу();
		Родитель.Наименование = "2023 приемная кампания";
		Родитель.Записать();
		СсылкаРодитель = Родитель.Ссылка;
	КонецЕсли;

	Рез = Справочники.Студенты.НайтиПоКоду("RL"+СокрЛП(Студент.Код));

	Если Рез = Справочники.Студенты.ПустаяСсылка() Тогда
		Общегоназначенияклиентсервер.СообщитьПользователю("не нашли, студента, создаем по коду RL"+СокрЛП(Студент.Код)+"_");
		НовыйЭлементСправочника = Справочники.Студенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(Студент,НовыйЭлементСправочника);
		НовыйЭлементСправочника.Код= "RL"+СокрЛП(Студент.Код);
		НовыйЭлементСправочника.Родитель = СсылкаРодитель;
		НовыйЭлементСправочника.Наименование = Студент.Наименование;
		НовыйЭлементСправочника.Организация = Справочники.Организации.НайтиПоКоду("000000015");
		НовыйЭлементСправочника.Комментарий = Студент.Код+"/"+Студент.Снилс;

		// контрагент
		СсылкаРодительКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию("2023 приемная кампания");
		Если  СсылкаРодительКонтрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Родитель = Справочники.Контрагенты.СоздатьГруппу();
			Родитель.Наименование = "2023 приемная кампания";
			Родитель.Записать();
			СсылкаРодительКонтрагент = Родитель.Ссылка;
		КонецЕсли;



		НовОбъект1С = Справочники.Контрагенты.СоздатьЭлемент();
		//НовОбъект1С.Наименование = Студент.Наименование; // Яценко Константин Владимирович  Строка
		НовОбъект1С.ВидКонтрагента 	= Перечисления.ЮрФизЛицо.ФизЛицо; // Физ. лицо  Перечисление.ЮрФизЛицо
		НовОбъект1С.ТипКонтрагента 	= Справочники.ТипыКонтрагентов.НайтиПоКоду("7"); // 7 - Физическое лицо  Справочник.ТипыКонтрагентов
		НовОбъект1С.ЮридическоеФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		НовОбъект1С.Наименование 	= Студент.Наименование;
		НовОбъект1С.Родитель		= СсылкаРодительКонтрагент;
		НовОбъект1С.Записать();

		НовыйЭлементСправочника.Контрагент = НовОбъект1С.Ссылка;
		НовыйЭлементСправочника.Записать();

		Рез = НовыйЭлементСправочника.Ссылка;
	Иначе
		Общегоназначенияклиентсервер.СообщитьПользователю("Нашли, студента по коду RL"+СокрЛП(Студент.Код));
		Если ЗначениеЗаполнено(Рез.Контрагент) и Рез.Контрагент.Наименование ="" Тогда
			ОбъектКонтрагент = Рез.Контрагент.ПолучитьОбъект();
			ОбъектКонтрагент.Наименование = Студент.Наименование;
			ОбъектКонтрагент.Записать();
		КонецЕсли;
	КонецЕсли;

	Возврат Рез;
КонецФункции

//НайтиИлиСоздатьДоговор(СтрокаСом);
Функция НайтиИлиСоздатьДоговор(СтрокаСОМ,Студент,ДокументСомСсылка)

	Рез = Справочники.Договоры.ПустаяСсылка();

	ДоговорКом = СтрокаСОМ.Договор;
	//Договор со студентом Абалымов Евгений Игоревич

	Наименование = "Договор со студентом "+СокрЛП(Студент.Наименование)+".";

	Если Студент.РОдитель.наименование =  "2023 приемная кампания" ТОгда

		//Рез = Справочники.Договоры.НайтиПоНаименованию(Наименование);

		//Если Рез = Справочники.Договоры.ПустаяСсылка() Тогда
		ДоговорКом = СтрокаСОМ.Договор;
		НовОбъект1СДоговор = Справочники.Договоры.СоздатьЭлемент();
		НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015");
		НовОбъект1СДоговор.Наименование = Наименование; // Договор со студентом Абалымов Евгений Игоревич  Строка
		НовОбъект1СДоговор.ДатаДоговора = ДокументСомСсылка; // 01.01.0001 0:00:00  Дата
		НовОбъект1СДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; // С покупателем  Перечисление.ВидыДоговоровКонтрагентов
		//НовОбъект1СДоговор.Контрагент = Студент; // Абалымов Евгений Игоревич  Справочник.Контрагенты
		НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
		НовОбъект1СДоговор.ТипДоговораНДС = Перечисления.ТипыДоговоровДляНДС.Обычный; // Обычный  Перечисление.ТипыДоговоровДляНДС
		//		 НовОбъект1С.ДатаПомещенияВАрхив = Дата("20220216000000"); // 16.02.2022 0:00:00  Дата
		НовОбъект1СДоговор.ВидОбязательства = "Договор"; // Договор  Строка
		НовОбъект1СДоговор.Контрагент = Студент.контрагент; // Аванесов Эдуард Борисович  Справочник.Контрагенты
		НовОбъект1СДоговор.НаправлениеДеятельности = Справочники.НаправленияДеятельности.НайтиПоКоду("000003"); // Платное обучение  Справочник.НаправленияДеятельности
		НовОбъект1СДоговор.Записать();
		Рез = НовОбъект1СДоговор.Ссылка;

		//КонецЕсли;
	Иначе
		ДоговорКом = СтрокаСОМ.Договор;
		НовОбъект1СДоговор = Справочники.Договоры.СоздатьЭлемент();
		НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015");
		НовОбъект1СДоговор.Наименование = Наименование; // Договор со студентом Абалымов Евгений Игоревич  Строка
		НовОбъект1СДоговор.ДатаДоговора = ДокументСомСсылка; // 01.01.0001 0:00:00  Дата
		НовОбъект1СДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; // С покупателем  Перечисление.ВидыДоговоровКонтрагентов
		//НовОбъект1СДоговор.Контрагент = Студент; // Абалымов Евгений Игоревич  Справочник.Контрагенты
		НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
		НовОбъект1СДоговор.ТипДоговораНДС = Перечисления.ТипыДоговоровДляНДС.Обычный; // Обычный  Перечисление.ТипыДоговоровДляНДС
		//		 НовОбъект1С.ДатаПомещенияВАрхив = Дата("20220216000000"); // 16.02.2022 0:00:00  Дата
		НовОбъект1СДоговор.ВидОбязательства = "Договор"; // Договор  Строка
		НовОбъект1СДоговор.Контрагент = Студент.контрагент; // Аванесов Эдуард Борисович  Справочник.Контрагенты
		НовОбъект1СДоговор.НаправлениеДеятельности = Справочники.НаправленияДеятельности.НайтиПоКоду("000003"); // Платное обучение  Справочник.НаправленияДеятельности
		НовОбъект1СДоговор.Записать();
		Рез = НовОбъект1СДоговор.Ссылка;

	КонецЕсли;

	Возврат Рез;

КонецФункции

Функция СоздатьИлиНайтиВидПриказа(ТипПриказа)
	Рез = Справочники.ВидыПриказовОбразование.ПустаяСсылка();
	НаименованиеДляПоиска = "Зачисление студентов";
	Рез = Справочники.ВидыПриказовОбразование.НайтиПоНаименованию(НаименованиеДляПоиска);
	//"Зачисление в вуз"  - "Зачисление студентов"
	Если Рез = Справочники.ВидыПриказовОбразование.ПустаяСсылка() Тогда
		СтрокаСообщения = "Вид приказа не найден, создан новый "+ТипПриказа.Наименование+" проверьте соответствие наименования между программами";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		НовыйЭлементСправочника = Справочники.ВидыПриказовОбразование.СоздатьЭлемент();
		НовыйЭлементСправочника.Наименование = ТипПриказа.Наименование;
		НовыйЭлементСправочника.Записать();
		Рез = НовыйЭлементСправочника.Ссылка;
	КонецЕсли;
	Возврат Рез;
КонецФункции


Функция СоздатьИлиНайтиСпециальностиОбразование(Специальность)
	Рез = Справочники.СпециальностиОбразование.ПустаяСсылка();

	КодСпециальности = Специальность.КодСпециальности;//	"44.03.03"	Строка;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СпециальностиОбразование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпециальностиОбразование КАК СпециальностиОбразование
	|ГДЕ
	|	СпециальностиОбразование.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование","%"+СокрЛП(КодСпециальности)+"%");
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.КОличество()>0 Тогда
		Рез = Выборка[0].ссылка;

	Иначе
		СтрокаСообщения = "Специальность не найдена "+Специальность.Наименование+" проверьте соответствие наименования между программами";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		НовыйЭлементСправочника = Справочники.СпециальностиОбразование.СоздатьЭлемент();
		НовыйЭлементСправочника.Наименование = Специальность.Наименование;
		Попытка
			НовыйЭлементСправочника.Записать();
		Исключение
			СтрокаСообщения = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		КонецПопытки;
		Рез = НовыйЭлементСправочника.Ссылка;
	КонецЕсли;
	Возврат Рез;
КонецФункции


&НаКлиенте
Процедура ПрочитатьВсе(Команда)
	ДатаНачала = ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала;
	ДатаОкончания = ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания;
	ПрочитатьВсеНаСервере_(ДатаНачала, ДатаОкончания);
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолучитьДанныеИзМакета();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьИпроверитьНаименованиеНаСервере()
	Объект.Проверка.Очистить();
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Студенты.Ссылка КАК Ссылка,
	|	Студенты.Наименование КАК НаименованиеБГУ,
	|	Студенты.Код КАК Код
	|ИЗ
	|	Справочник.Студенты КАК Студенты
	|ГДЕ
	|	Студенты.Код ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Наименование","RL%");
	//	Объект.Проверка.Загрузить(Запрос.Выполнить().Выгрузить());
	Тч = Запрос.Выполнить().Выгрузить();
	Если Тч.Количество()> 0 Тогда
		Для каждого СтрТч из ТЧ Цикл
			Ком = СокрЛП(СтрТч.Ссылка.комментарий);
			КодЧистим = СтрЗаменить(СтрТч.Код,"RL","");
			КодЧистим = СтрЗаменить(КодЧистим,"RL_","");
			СтрокаПоиска = КодЧистим+"/";
			СтрТЧОбработки = Объект.Проверка.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЧОбработки,СтрТч);

			Если СтрНайти(Ком,СтрокаПоиска)= 0 Тогда
				СтрТЧОбработки.ИсправитьКод = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИпроверитьНаименование(Команда)
	ЗаполнитьИпроверитьНаименованиеНаСервере();
КонецПроцедуры


&НаСервере
Процедура ИсправитьКодНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Стр Из Объект.Проверка Цикл
		Если Стр.ИсправитьКод Тогда
			ОбъектСтудент = Стр.ссылка.ПолучитьОбъект();
			ОбъектСтудент.код = СтрЗаменить(ОбъектСтудент.Код,"RL","LR");
			ОбъектСтудент.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ИсправитьКод(Команда)
	ИсправитьКодНаСервере();
КонецПроцедуры

#КонецОбласти // ИсходныйФункционал

// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеУниверситета(Команда)
    ПолучитьСырыеДанныеУниверситетНаСервере();
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСырыеДанныеУниверситетНаСервере()
    РезультатФункции = Новый Структура("Успех", Истина);
    
    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);
    
    КодПолучателяУниверситет =  ПолучитьКодПолучателяУниверситет(РаботаВТестовомРежиме);
    КодОтправителяБГУ =  ПолучитьКодПолучателяУниверситет(РаботаВТестовомРежиме);
    
    КаналыОбмена = Новый Структура("ВУниверситет, ИзУниверситета", "ОбменУниверситет_ИзБухгалтерии", "ОбменУниверситет_ВБухгалтерию");
    
    СервисОбмена = ПолучитьСервисОбменаУниверситетНаСервере();
    РезультатПроверкиСервиса = ГП_СервисыИнтеграции.ПроверитьДоступностьСервиса(СервисОбмена);
    Если НЕ РезультатПроверкиСервиса.Успех Тогда
        РезультатФункции.Успех = Ложь;
        ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
            "Сервис обмена не активен.
            |Информация: %1", РезультатПроверкиСервиса.ТекстСообщения));
        Возврат РезультатФункции;
    КонецЕсли;

    ДатаТранзакции = ТекущаяДатаСеанса();
    Сообщение = СервисОбмена.СоздатьСообщение(ГП_ОбменУниверситетБГУКлиентСервер.ПолучитВремяАктуальности(ДатаТранзакции));
    Сообщение.КодПолучателя = КодПолучателяУниверситет;
    Сообщение.КодОтправителя = КодОтправителяБГУ;
    УникальныйИдентификаторСообщенияЗапроса = Новый УникальныйИдентификатор(Строка(Сообщение.Идентификатор));

    Сообщение.Параметры.Вставить("ТипСообщения", "ЗапросДанныхПриказа");
    СервисОбмена[КаналыОбмена.ВУниверситет].ОтправитьСообщение(Сообщение);
    
    // Отправка данных
    ВыполнениеОбработкиСервисовИнтеграцииНаСервере();
    
    ПодождатьСинхронноНаСервере(500); // Ожидание ответа
    ВыполнениеОбработкиСервисовИнтеграцииНаСервере();
    ПодождатьСинхронноНаСервере(500); // Ожидание ответа
    
    ОтборСообщений = Новый Структура;
    ОтборСообщений.Вставить("КодПолучателя", КодОтправителяБГУ);
    ОтборСообщений.Вставить("КодОтправителя", КодПолучателяУниверситет);
    ОтборСообщений.Вставить("ИдентификаторСообщенияЗапроса", УникальныйИдентификаторСообщенияЗапроса);
    СообщенияСервиса = СервисОбмена[КаналыОбмена.ИзУниверситета].ВыбратьСообщения(ОтборСообщений);
    
    Возврат РезультатФункции; //СервисыИнтеграции.ГП_СервисИнтеграцииБГУУниверситет.ОбменУниверситет_ИзБухгалтерии.ПолучитьСостояние();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодПолучателяУниверситет(Знач Тестовый = Ложь)
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыУниверситет(Тестовый);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодОтправителяБГУ(Знач Тестовый = Ложь)
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыБГУ(Тестовый);
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнениеОбработкиСервисовИнтеграцииНаСервере()
    ГП_СервисыИнтеграции.ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РаботаВТестовомРежиме(Знач Форма)
    Возврат Форма.Объект.ТестовыйРежим;
КонецФункции

// Возвращаемое значение:
//  - Строка
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНаименованиеСервисаОбменаУниверситет()
    Возврат СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(ПолучитьСервисОбменаУниверситетНаСервере()));
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСервисОбменаУниверситетНаСервере()
    Возврат СервисыИнтеграции.ГП_СервисИнтеграцииБГУУниверситет;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьДоступностьСервисаНаСервере()
    СервисОбмена = ПолучитьСервисОбменаУниверситетНаСервере();
    РезультатПроверкиСервиса = ГП_СервисыИнтеграции.ПроверитьДоступностьСервиса(СервисОбмена);
КонецФункции

&НаСервереБезКонтекста
Функция ПодождатьСинхронноНаСервере(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут
    
    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;
    // ДатаОкончания = ДатаНачала + ИнтервалВСекундах;
    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Возврат ВремяПрошло;
КонецФункции


#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }
