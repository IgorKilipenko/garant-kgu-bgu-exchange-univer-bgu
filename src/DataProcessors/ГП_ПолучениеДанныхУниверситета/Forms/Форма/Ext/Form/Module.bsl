#Область Удалить_ИсходныйФункционал

// Устарела.
//
Процедура Удалить_ПолучитьДанныеИзМакета() Экспорт

    ИмяМакета = "СоответствиеОбъектов";

    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);


    Возвратить = Объект.Соответствие;
    НомерСтроки = 0;
    НомерКолонки = 1;
    Пока Истина Цикл
        НомерСтроки = НомерСтроки + 1; //В первой строке имена колонок для заполнения макета, по ним создаем колонки
        ТекстКолонки = Макет.Область(НомерСтроки, НомерКолонки).Текст;

        Если ПустаяСтрока(ТекстКолонки) Тогда
            Прервать;
        КонецЕсли;

        //Со второй строки заполняем значения колонок таблицы значений

        ТекстКолонки = Макет.Область(НомерСтроки, 1).Текст;
        Если ПустаяСтрока(ТекстКолонки) Тогда //Проверяем, а есть после заловока хоть одна строка, если нет - заканчиваем
            Прервать;
        КонецЕсли;


        ТекстКолонки = Макет.Область(НомерСтроки, 1).Текст;
        Если ПустаяСтрока(ТекстКолонки) Тогда
            Прервать;
        КонецЕсли;

        НовСтр = Возвратить.Добавить();
        НовСтр.ИдИсточник = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
        НовСтр.ИдПриемник = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);

    КонецЦикла;


КонецПроцедуры

// Устарела.
//
&НаСервере
Функция Удалить__ПолучитьСоответствиеОбъектов(ИдИсточник = "", ИдПриемник = "") Экспорт
    Найдено = неопределено;
    Если НЕ ИдИсточник = "" Тогда

        Отбор = Новый Структура();
        Отбор.Вставить("ИдИсточник", ИдИсточник);
        Найдено = Объект.Соответствие.НайтиСтроки(Отбор);
        Если Найдено = Неопределено ИЛИ Найдено.Количество() = 0 Тогда
            Возврат Неопределено;
        Иначе
            Возврат Найдено[0].ИдПриемник;
        КонецЕсли;
    ИначеЕсли НЕ ИдПриемник = "" Тогда
        Отбор = Новый Структура();
        Отбор.Вставить("ИдПриемник", ИдПриемник);
        Найдено = Объект.Соответствие.НайтиСтроки(ОТбор);
        Если Найдено = Неопределено Тогда
            Возврат Неопределено;
        Иначе
            Если Найдено.Количество() > 0 Тогда
                Возврат Найдено[0].ИдИсточник;
            Иначе
                Возврат Неопределено;
            КонецЕсли;
        КонецЕсли;
    Иначе
        Возврат Неопределено;
    КонецЕсли;
КонецФункции

// Устарела.
//
&НаСервере
Процедура Удалить_ПрочитатьВсеНаСервере_(ДатаНачала, ДатаОкончания)

    Если Объект.ТестоваяБаза Тогда
        ПараметрыПодключения = "Srvr=""rserver"";Ref=""kguuniver"";Usr=""ГарантПлюс"";Pwd=""951753"";";
    Иначе
        //ПараметрыПодключения = "Srvr=""1c-edu"";Ref=""1c-univer-prof"";Usr=""ГарантПлюс"";Pwd=""951753"";";
        ПараметрыПодключения = "Srvr=""ts01"";Ref=""univer-prof-copy01"";Usr=""ГарантПлюс"";Pwd=""951753"";";
    КонецЕсли;




    //V82COMConnector= Новый COMОбъект("V83.COMConnector");
    V82COMConnector = Новый COMОбъект("V83.COMConnector");
    Попытка
        Соединение = V82COMConnector.Connect(ПараметрыПодключения);
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
    КонецПопытки;
    ВнешняяБаза = Соединение;

    Запрос = ВнешняяБаза.NewObject("Запрос");
    Запрос.Текст = "ВЫБРАТЬ
        |	Приказы.Ссылка КАК Ссылка
        |ИЗ
        |	Документ.Приказы КАК Приказы
        |ГДЕ
        |	Приказы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |	И Приказы.Ссылка.Проведен";
    Если ЗначениеЗаполнено(Объект.НомерПриказа) Тогда
        Запрос.Текст = Запрос.Текст + "	И Приказы.Ссылка.НомерПриказа Подобно (&Номерприказа)";
        Запрос.УстановитьПараметр("НомерПриказа", Объект.НомерПриказа);
    КонецЕсли;
    //ДатаНачала,ДатаОкончания
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    ТабличкаДокументовСом = Запрос.Выполнить().Выгрузить();
    // ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТабличкаДокументовСом.Количество());


    Для Каждого ДокументСом Из ТабличкаДокументовСом Цикл //Документы
        ПП = 0;
        ДокументСомСсылка = ДокументСом.ссылка;
        // ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДокументСомСсылка.Номер);

        Если ДокументСомСсылка.ОбщиеДанные.Количество() = 0 Тогда
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет студентов");
            Продолжить;
        КонецЕсли;

        ТЧСом = ДокументСомСсылка.ОбщиеДанные;
        Табличка = ТЧСом.Выгрузить();
        Табличка.Свернуть("Факультет");
        МассивФакултетовСом = Табличка.ВыгрузитьКолонку("Факультет");


        Для Каждого ФакултетИзМассива Из МассивФакултетовСом Цикл //факультеты
            ПП = ПП + 1;
            //ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивФакултетовСом.Количество());
            // ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ФакултетИзМассива.Наименование);
            ОтборСОМ = ВнешняяБаза.NewObject("Структура");
            ОтборСОМ.Вставить("Факультет", ФакултетИзМассива);
            МассивСтрокДокумента = ТЧСом.НайтиСтроки(ОтборСОМ);

            НомерПриказа = СокрЛП(ПП) + "/" + СокрЛП(ДокументСомСсылка.НомерПриказа);
            НовОбъект1С = Документы.ПриказОбразование.СоздатьДокумент();

            Если НЕ (ДокументСомСсылка.КанцелярскаяДата = ДАТА('00010101')) Тогда
                НовОбъект1С.Дата = ДокументСомСсылка.КанцелярскаяДата;
            Иначе
                НовОбъект1С.Дата = ДокументСомСсылка.Дата;
            КонецЕсли;

            НовОбъект1С.Номер = НомерПриказа; // 176-з  Строка
            //НовОбъект1С.Дата = ДокументСомСсылка.Дата;
            НовОбъект1С.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
            НовОбъект1С.Факультет = Удалить_СоздатьИлиНайтиФакультет(ФакултетИзМассива); // Филологический  Справочник.Подразделения
            //НовОбъект1С.ИспользоватьФакультетДокументаДопУслуги = Ложь; // Нет  Булево
            НовОбъект1С.ДатаНачалаДействия = ДокументСомСсылка.КанцелярскаяДата; // 22.02.2023 0:00:00  Дата

            Для Каждого СтрокаСом Из МассивСтрокДокумента Цикл //строки по факултетам

                Если СтрокаСом.Основа.Наименование = "С полным возмещением затрат" ИЛИ СтрокаСом.Основа.Наименование = "За счет средств физических лиц" Тогда
                    НовОбъект1С.ВидПриказа = Удалить_СоздатьИлиНайтиВидПриказа(СтрокаСом.ТипПриказа);


                    НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    Студент = Удалить_НайтиИлиСоздатьСтудента(СтрокаСом.ФизическоеЛицо);
                    Договор = Удалить_НайтиИлиСоздатьДоговор(СтрокаСом, Студент, ДокументСомСсылка.Дата);
                    НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
                    //Курс;
                    НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.Курс;
                    Если СтрокаСом.Курс.Наименование = "Первый" Тогда
                        НовСтрТЧ.Значение = Справочники.КурсыОбучения.НайтиПоНаименованию("1"); // 1  Справочник.КурсыОбучения
                    Иначе
                        НовСтрТЧ.Значение = Справочники.КурсыОбучения.НайтиПоНаименованию(СтрокаСом.Курс.Наименование);
                    КонецЕсли;
                    НовСтрТЧ.Договор = Договор;

                    //
                    ////График оплаты
                    //
                    //НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    //НовСтрТЧ.Студент = Студент;// Завизина Екатерина Андреевна  Справочник.Студенты
                    //НовСтрТЧ.Поле =  ПланыВидовХарактеристик.ПоляПриказовОбразование.ГрафикОплаты;
                    //НовСтрТЧ.Значение = Перечисления.гпСпособыОплатыЗаОбучение.ПоСеместрам; // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
                    //НовСтрТЧ.Договор = Договор; // Договор со студентом Завизина Екатерина Андреевна  Справочник.Договоры



                    НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    НовСтрТЧ.Студент = Студент; // Мингазова Милена Артемовна  Справочник.Студенты
                    НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Способы оплаты за обучение");
                    НовСтрТЧ.Значение = Перечисления.гпСпособыОплатыЗаОбучение.ПоСеместрам; // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
                    НовСтрТЧ.Договор = Договор; // Договор со студентом Мингазова Милена Артемовна  Справочник.Договоры

                    //СтавкиОплатыОбразование
                    НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    НовСтрТЧ.Студент = Студент; // Завизина Екатерина Андреевна  Справочник.Студенты
                    НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Ставка оплаты");
                    НовСтрТЧ.Значение = Справочники.СтавкиОплатыОбразование.НайтиПоКоду("000000017"); // Общая  Справочник.СтавкиОплатыОбразование // По семестрам  Перечисление.гпСпособыОплатыЗаОбучение
                    НовСтрТЧ.Договор = Договор; // Договор со студентом Завизина Екатерина Андреевна  Справочник.Договоры


                    //Специальность
                    НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
                    НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.Специальность;
                    НовСтрТЧ.Значение = Удалить_СоздатьИлиНайтиСпециальностиОбразование(СтрокаСом.Специальность);
                    НовСтрТЧ.Договор = Договор; // Договор со студентом Стебеняева Любовь Сергеевна  Справочник.Договоры

                    //Форма
                    НовСтрТЧ = НовОбъект1С.Студенты.Добавить();
                    НовСтрТЧ.Студент = Студент; // Стебеняева Любовь Сергеевна  Справочник.Студенты
                    НовСтрТЧ.Поле = ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Форма обучения");
                    Если СтрокаСом.ФормаОбучения.Наименование = "Очная" Тогда
                        НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.Дневная;
                    ИначеЕсли СтрокаСом.ФормаОбучения.Наименование = "Заочная" Тогда
                        НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.Заочная;
                    Иначе
                        НовСтрТЧ.Значение = Перечисления.гпФормыОбучения.ОчноЗаочная; // Заочная  Перечисление.гпФормыОбучения
                    КонецЕсли;
                    НовСтрТЧ.Договор = Договор; // Договор со студентом Стебеняева Любовь Сергеевна  Справочник.Договоры



                    //		1.	Студент ФИО
                    //2.	Договор
                    //3.	Состояние
                    //4.	Факультет
                    //5.	Специальность
                    //6.	Направление подготовки
                    //7.	Код направления подготовки
                    //8.	Форма обучения
                    //9.	Курс
                    //10.	Стоимость обучения годовая
                    //11.	Полная стоимость реализации программы
                    //12.	Срок реализации программы (на данный момент только внедряется в программу)
                    //13.	Ставка оплаты
                    //14.	График оплаты
                    //15.	Льгота

                КонецЕсли;
            КонецЦикла;
            Если НовОбъект1С.Студенты.Количество() > 0 Тогда
                НовОбъект1С.Комментарий = НомерПриказа + "/" + ДокументСомСсылка.Комментарий;
                НовОбъект1С.Записать();
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;


    Соединение = "";
КонецПроцедуры

// Устарела.
//
Функция Удалить_СоздатьИлиНайтиФакультет(Факультет)
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("//////////ИЩЕМ//////");
    Рез = Справочники.Подразделения.ПустаяСсылка();
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Факультет.Наименование);
    Наименование = Удалить__ПолучитьСоответствиеОбъектов(Факультет.Наименование, );
    Если НЕ (Наименование = Неопределено) Тогда
        СтрокаСообщения = "Нашли " + Наименование + " по " + Факультет.Наименование;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
        Рез = Справочники.Подразделения.НайтиПоНаименованию(Наименование);
        СтрокаСообщения = "определили факультет " + Рез.Наименование + " по " + Факультет.Наименование;
    Иначе
        СтрокаСообщения = "Не нашли по " + Факультет.Наименование;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
    КонецЕсли;
    Если Рез = Справочники.Подразделения.ПустаяСсылка() Тогда
        СтрокаСообщения = "Подразделение не найдено " + Факультет.Наименование + " проверьте соответствие наименования между программами";
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
    КонецЕсли;
    Возврат Рез;
КонецФункции

// Устарела.
//
Функция Удалить_НайтиИлиСоздатьСтудента(Студент)

    СсылкаРодитель = Справочники.Студенты.НайтиПоНаименованию("2023 приемная кампания");

    Если СсылкаРодитель = Справочники.Студенты.ПустаяСсылка() Тогда
        Родитель = Справочники.Студенты.СоздатьГруппу();
        Родитель.Наименование = "2023 приемная кампания";
        Родитель.Записать();
        СсылкаРодитель = Родитель.Ссылка;
    КонецЕсли;

    Рез = Справочники.Студенты.НайтиПоКоду("RL" + СокрЛП(Студент.Код));

    Если Рез = Справочники.Студенты.ПустаяСсылка() Тогда
        Общегоназначенияклиентсервер.СообщитьПользователю("не нашли, студента, создаем по коду RL" + СокрЛП(Студент.Код) + "_");
        НовыйЭлементСправочника = Справочники.Студенты.СоздатьЭлемент();
        ЗаполнитьЗначенияСвойств(Студент, НовыйЭлементСправочника);
        НовыйЭлементСправочника.Код = "RL" + СокрЛП(Студент.Код);
        НовыйЭлементСправочника.Родитель = СсылкаРодитель;
        НовыйЭлементСправочника.Наименование = Студент.Наименование;
        НовыйЭлементСправочника.Организация = Справочники.Организации.НайтиПоКоду("000000015");
        НовыйЭлементСправочника.Комментарий = Студент.Код + "/" + Студент.Снилс;

        // контрагент
        СсылкаРодительКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию("2023 приемная кампания");
        Если СсылкаРодительКонтрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
            Родитель = Справочники.Контрагенты.СоздатьГруппу();
            Родитель.Наименование = "2023 приемная кампания";
            Родитель.Записать();
            СсылкаРодительКонтрагент = Родитель.Ссылка;
        КонецЕсли;



        НовОбъект1С = Справочники.Контрагенты.СоздатьЭлемент();
        //НовОбъект1С.Наименование = Студент.Наименование; // Яценко Константин Владимирович  Строка
        НовОбъект1С.ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо; // Физ. лицо  Перечисление.ЮрФизЛицо
        НовОбъект1С.ТипКонтрагента = Справочники.ТипыКонтрагентов.НайтиПоКоду("7"); // 7 - Физическое лицо  Справочник.ТипыКонтрагентов
        НовОбъект1С.ЮридическоеФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
        НовОбъект1С.Наименование = Студент.Наименование;
        НовОбъект1С.Родитель = СсылкаРодительКонтрагент;
        НовОбъект1С.Записать();

        НовыйЭлементСправочника.Контрагент = НовОбъект1С.Ссылка;
        НовыйЭлементСправочника.Записать();

        Рез = НовыйЭлементСправочника.Ссылка;
    Иначе
        Общегоназначенияклиентсервер.СообщитьПользователю("Нашли, студента по коду RL" + СокрЛП(Студент.Код));
        Если ЗначениеЗаполнено(Рез.Контрагент) И Рез.Контрагент.Наименование = "" Тогда
            ОбъектКонтрагент = Рез.Контрагент.ПолучитьОбъект();
            ОбъектКонтрагент.Наименование = Студент.Наименование;
            ОбъектКонтрагент.Записать();
        КонецЕсли;
    КонецЕсли;

    Возврат Рез;
КонецФункции

// Устарела.
//
//НайтиИлиСоздатьДоговор(СтрокаСом);
Функция Удалить_НайтиИлиСоздатьДоговор(СтрокаСОМ, Студент, ДокументСомСсылка)

    Рез = Справочники.Договоры.ПустаяСсылка();

    ДоговорКом = СтрокаСОМ.Договор;
    //Договор со студентом Абалымов Евгений Игоревич

    Наименование = "Договор со студентом " + СокрЛП(Студент.Наименование) + ".";

    Если Студент.РОдитель.наименование = "2023 приемная кампания" Тогда

        //Рез = Справочники.Договоры.НайтиПоНаименованию(Наименование);

        //Если Рез = Справочники.Договоры.ПустаяСсылка() Тогда
        ДоговорКом = СтрокаСОМ.Договор;
        НовОбъект1СДоговор = Справочники.Договоры.СоздатьЭлемент();
        НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015");
        НовОбъект1СДоговор.Наименование = Наименование; // Договор со студентом Абалымов Евгений Игоревич  Строка
        НовОбъект1СДоговор.ДатаДоговора = ДокументСомСсылка; // 01.01.0001 0:00:00  Дата
        НовОбъект1СДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; // С покупателем  Перечисление.ВидыДоговоровКонтрагентов
        //НовОбъект1СДоговор.Контрагент = Студент; // Абалымов Евгений Игоревич  Справочник.Контрагенты
        НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
        НовОбъект1СДоговор.ТипДоговораНДС = Перечисления.ТипыДоговоровДляНДС.Обычный; // Обычный  Перечисление.ТипыДоговоровДляНДС
        //		 НовОбъект1С.ДатаПомещенияВАрхив = Дата("20220216000000"); // 16.02.2022 0:00:00  Дата
        НовОбъект1СДоговор.ВидОбязательства = "Договор"; // Договор  Строка
        НовОбъект1СДоговор.Контрагент = Студент.контрагент; // Аванесов Эдуард Борисович  Справочник.Контрагенты
        НовОбъект1СДоговор.НаправлениеДеятельности = Справочники.НаправленияДеятельности.НайтиПоКоду("000003"); // Платное обучение  Справочник.НаправленияДеятельности
        НовОбъект1СДоговор.Записать();
        Рез = НовОбъект1СДоговор.Ссылка;

        //КонецЕсли;
    Иначе
        ДоговорКом = СтрокаСОМ.Договор;
        НовОбъект1СДоговор = Справочники.Договоры.СоздатьЭлемент();
        НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015");
        НовОбъект1СДоговор.Наименование = Наименование; // Договор со студентом Абалымов Евгений Игоревич  Строка
        НовОбъект1СДоговор.ДатаДоговора = ДокументСомСсылка; // 01.01.0001 0:00:00  Дата
        НовОбъект1СДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем; // С покупателем  Перечисление.ВидыДоговоровКонтрагентов
        //НовОбъект1СДоговор.Контрагент = Студент; // Абалымов Евгений Игоревич  Справочник.Контрагенты
        НовОбъект1СДоговор.Организация = Справочники.Организации.НайтиПоКоду("000000015"); // КГУ  Справочник.Организации
        НовОбъект1СДоговор.ТипДоговораНДС = Перечисления.ТипыДоговоровДляНДС.Обычный; // Обычный  Перечисление.ТипыДоговоровДляНДС
        //		 НовОбъект1С.ДатаПомещенияВАрхив = Дата("20220216000000"); // 16.02.2022 0:00:00  Дата
        НовОбъект1СДоговор.ВидОбязательства = "Договор"; // Договор  Строка
        НовОбъект1СДоговор.Контрагент = Студент.контрагент; // Аванесов Эдуард Борисович  Справочник.Контрагенты
        НовОбъект1СДоговор.НаправлениеДеятельности = Справочники.НаправленияДеятельности.НайтиПоКоду("000003"); // Платное обучение  Справочник.НаправленияДеятельности
        НовОбъект1СДоговор.Записать();
        Рез = НовОбъект1СДоговор.Ссылка;

    КонецЕсли;

    Возврат Рез;

КонецФункции

// Устарела.
//
Функция Удалить_СоздатьИлиНайтиВидПриказа(ТипПриказа)
    Рез = Справочники.ВидыПриказовОбразование.ПустаяСсылка();
    НаименованиеДляПоиска = "Зачисление студентов";
    Рез = Справочники.ВидыПриказовОбразование.НайтиПоНаименованию(НаименованиеДляПоиска);
    //"Зачисление в вуз"  - "Зачисление студентов"
    Если Рез = Справочники.ВидыПриказовОбразование.ПустаяСсылка() Тогда
        СтрокаСообщения = "Вид приказа не найден, создан новый " + ТипПриказа.Наименование + " проверьте соответствие наименования между программами";
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
        НовыйЭлементСправочника = Справочники.ВидыПриказовОбразование.СоздатьЭлемент();
        НовыйЭлементСправочника.Наименование = ТипПриказа.Наименование;
        НовыйЭлементСправочника.Записать();
        Рез = НовыйЭлементСправочника.Ссылка;
    КонецЕсли;
    Возврат Рез;
КонецФункции

// Устарела.
//
Функция Удалить_СоздатьИлиНайтиСпециальностиОбразование(Специальность)
    Рез = Справочники.СпециальностиОбразование.ПустаяСсылка();

    КодСпециальности = Специальность.КодСпециальности; //	"44.03.03"	Строка;
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |	СпециальностиОбразование.Ссылка КАК Ссылка
        |ИЗ
        |	Справочник.СпециальностиОбразование КАК СпециальностиОбразование
        |ГДЕ
        |	СпециальностиОбразование.Наименование ПОДОБНО &Наименование";
    Запрос.УстановитьПараметр("Наименование", "%" + СокрЛП(КодСпециальности) + "%");
    Выборка = Запрос.Выполнить().Выгрузить();
    Если Выборка.КОличество() > 0 Тогда
        Рез = Выборка[0].ссылка;

    Иначе
        СтрокаСообщения = "Специальность не найдена " + Специальность.Наименование + " проверьте соответствие наименования между программами";
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
        НовыйЭлементСправочника = Справочники.СпециальностиОбразование.СоздатьЭлемент();
        НовыйЭлементСправочника.Наименование = Специальность.Наименование;
        Попытка
            НовыйЭлементСправочника.Записать();
        Исключение
            СтрокаСообщения = ОписаниеОшибки();
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
        КонецПопытки;
        Рез = НовыйЭлементСправочника.Ссылка;
    КонецЕсли;
    Возврат Рез;
КонецФункции

// Устарела.
//
&НаКлиенте
Процедура Удалить_ПрочитатьВсе(Команда)
    ДатаНачала = ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала;
    ДатаОкончания = ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания;
    Удалить_ПрочитатьВсеНаСервере_(ДатаНачала, ДатаОкончания);
КонецПроцедуры

// Устарела.
//
&НаСервере
Процедура Удалить_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Удалить_ПолучитьДанныеИзМакета();
КонецПроцедуры

// Устарела.
//
&НаСервере
Процедура Удалить_ЗаполнитьИпроверитьНаименованиеНаСервере()
    Объект.Проверка.Очистить();
    // Вставить содержимое обработчика.
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
        |	Студенты.Ссылка КАК Ссылка,
        |	Студенты.Наименование КАК НаименованиеБГУ,
        |	Студенты.Код КАК Код
        |ИЗ
        |	Справочник.Студенты КАК Студенты
        |ГДЕ
        |	Студенты.Код ПОДОБНО &Наименование";
    Запрос.УстановитьПараметр("Наименование", "RL%");
    //	Объект.Проверка.Загрузить(Запрос.Выполнить().Выгрузить());
    Тч = Запрос.Выполнить().Выгрузить();
    Если Тч.Количество() > 0 Тогда
        Для Каждого СтрТч Из ТЧ Цикл
            Ком = СокрЛП(СтрТч.Ссылка.комментарий);
            КодЧистим = СтрЗаменить(СтрТч.Код, "RL", "");
            КодЧистим = СтрЗаменить(КодЧистим, "RL_", "");
            СтрокаПоиска = КодЧистим + "/";
            СтрТЧОбработки = Объект.Проверка.Добавить();
            ЗаполнитьЗначенияСвойств(СтрТЧОбработки, СтрТч);

            Если СтрНайти(Ком, СтрокаПоиска) = 0 Тогда
                СтрТЧОбработки.ИсправитьКод = Истина;
            КонецЕсли;
        КонецЦикла;

    КонецЕсли;

КонецПроцедуры

// Устарела.
//
&НаКлиенте
Процедура Удалить_ЗаполнитьИпроверитьНаименование(Команда)
    Удалить_ЗаполнитьИпроверитьНаименованиеНаСервере();
КонецПроцедуры

// Устарела.
//
&НаСервере
Процедура Удалить_ИсправитьКодНаСервере()
    // Вставить содержимое обработчика.
    Для Каждого Стр Из Объект.Проверка Цикл
        Если Стр.ИсправитьКод Тогда
            ОбъектСтудент = Стр.ссылка.ПолучитьОбъект();
            ОбъектСтудент.код = СтрЗаменить(ОбъектСтудент.Код, "RL", "LR");
            ОбъектСтудент.Записать();
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Устарела.
//
&НаКлиенте
Процедура Удалить_ИсправитьКод(Команда)
    Удалить_ИсправитьКодНаСервере();
КонецПроцедуры

#КонецОбласти // Удалить_ИсходныйФункционал

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ИнициализацияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ОбновитьСтатусПодключения(Неопределено);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПапкаСтудентовПриИзменении(Элемент)
    ЭтотОбъект.Объект.ПапкаКонтрагентов = ПолучитьГруппуКонтрагентовПоГруппеСтудентовНаСервере(
            ЭтотОбъект.Объект.ПапкаСтудентов);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеУниверситета(Команда)
    РезультатПроверки = ПроверитьЗаполнениеДляЗапросаДанныхУниверситетНаСервере();
    Если РезультатПроверки.Успех = Ложь Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатПроверки.Ошибки);
        Возврат;
    КонецЕсли;

    ВыполнитьОперациюПолученияДанныхУниверситета();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодключения(Команда)
    ВыполнитьОперациюПроверкиСоединения();
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхУниверситета

// Устарела. Использовать `ВыполнитьОперациюПолученияДанныхУниверситета`
//
// Возвращаемое значение:
//  - Структура
&НаСервере
Функция Удалить_ПолучитьДанныеПриказовУниверситетаНаСервере()
    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    ОчиститьДанныеЗагрузкиНаСервере();

    // Параметры отбора приказов
    ПараметрыОтбораПриказов = Новый Структура;
    ПараметрыОтбораПриказов.Вставить("ДатаНачала", ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала);
    ПараметрыОтбораПриказов.Вставить("ДатаОкончания", ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания);
    ПараметрыОтбораПриказов.Вставить("НомерПриказа", ЭтотОбъект.Объект.НомерПриказа);
    ПараметрыОтбораПриказов.Вставить("ТолькоПлатнаяОснова", Истина);

    Возврат ГП_ОбменУниверситетБГУ.ПолучитьДанныеПриказовУниверситета(
        ПараметрыОтбораПриказов, РаботаВТестовомРежиме, Новый Структура("ЗадержкаОпросаКаналаМсек", 5000));
КонецФункции

// Выполняет длительную процедуру получения данных из базы университет (в фоне)
// Параметры:
//  Параметры - Структура, Неопределено
//      * ЗадержкаОпросаКаналаМсек - Число - Опционально, по умолчанию 5000 мс
//      * ОчищатьТаблицы - Число - Опционально, по умолчанию Истина
&НаКлиенте
Процедура ВыполнитьОперациюПолученияДанныхУниверситета(Знач Параметры = Неопределено)
    // Разбор параметров выполнения
    Параметры = ?(Параметры = Неопределено, Новый Структура, Параметры);
    ЗадержкаОпросаКаналаМсек = ?(Параметры.Свойство("ЗадержкаОпросаКаналаМсек"),
            Параметры.ЗадержкаОпросаКаналаМсек, 5000);
    ОчищатьТаблицы = ?(Параметры.Свойство("ОчищатьТаблицы"),
            Параметры.ОчищатьТаблицы, Истина);

    Состояние("Запрос данных университета");

    // Очистка таблиц
    Если ОчищатьТаблицы Тогда
        ОчиститьДанныеЗагрузкиНаСервере();
    КонецЕсли;

    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    // Параметры отбора приказов
    ПараметрыОтбораПриказов = Новый Структура;
    ПараметрыОтбораПриказов.Вставить("ДатаНачала", ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала);
    ПараметрыОтбораПриказов.Вставить("ДатаОкончания", ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания);
    ПараметрыОтбораПриказов.Вставить("НомерПриказа", ЭтотОбъект.Объект.НомерПриказа);
    ПараметрыОтбораПриказов.Вставить("ТолькоПлатнаяОснова", Истина);

    АргументыОперацииДанных = Новый Массив;
    АргументыОперацииДанных.Добавить(ПараметрыОтбораПриказов);
    АргументыОперацииДанных.Добавить(РаботаВТестовомРежиме);
    АргументыОперацииДанных.Добавить(Новый Структура("ЗадержкаОпросаКаналаМсек", 5000));

    ОперацияПолученияДанных = НачатьВыполнениеДлительнойОперацииНаСервере(
            "ГП_ОбменУниверситетБГУ.ПолучитьДанныеПриказовУниверситета",
            АргументыОперацииДанных);

    ДополнительныеПараметрыОперации = Новый Структура;

    ОповещениеОЗавершении = Новый ОписаниеОповещения(
            "ПолучениеДанныхУниверситетаЗавершение", ЭтотОбъект, ДополнительныеПараметрыОперации);
    ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПолученияДанных, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхУниверситетаЗавершение(Знач РезультатВыполнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
    Если РезультатВыполнения = Неопределено Тогда
        // Операция отменена
        Возврат;
    КонецЕсли;

    Если РезультатВыполнения.Статус = "Ошибка"
        ИЛИ НЕ ЭтоАдресВременногоХранилища(РезультатВыполнения.АдресРезультата) Тогда

        Если РезультатВыполнения.Статус = "Ошибка" Тогда
            СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(РезультатВыполнения.ИнформацияОбОшибке);
        КонецЕсли;

        Возврат;
    КонецЕсли;

    ДанныеРезультатаОбработки = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
    Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "Успех")
        ИЛИ ДанныеРезультатаОбработки.Успех = Ложь Тогда

        Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "ТекстСообщения")
            И НЕ ПустаяСтрока(ДанныеРезультатаОбработки.ТекстСообщения) Тогда

            ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеРезультатаОбработки.ТекстСообщения);
        КонецЕсли;

        Возврат;
    КонецЕсли;

    Если ДанныеРезультатаОбработки.МассивСообщений.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Нет данных по установленному отбору");
        Возврат;
    КонецЕсли;

    Если ДанныеРезультатаОбработки.МассивСообщений.Количество() > 1 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ! Неоднозначный отвеет от базы << %1 >>", ПолучитьПредставлениеНаименованияБазыУниверситет()));
    КонецЕсли;

    ОтветУниверситета = ДанныеРезультатаОбработки.МассивСообщений[0];
    СтруктураТелаОтвета = ПолучитьЗначениеТелаОтветаУниверситетНаСервере(ОтветУниверситета.ПредставлениеТелаСообщения);
    Если СтруктураТелаОтвета.Успех = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураТелаОтвета.СообщениеОбОшибке);
        Возврат; // Ошибка расшифровки тела сообщения
    КонецЕсли;

    Состояние("Данные получены для обработки");

    РезультатЗаполнения = ЗаполнитьДанныеДляЗагрузкиНаСервере(СтруктураТелаОтвета.Данные);

    Если РезультатЗаполнения.Успех Тогда
        Состояние("Выполнено. Данные получены и обработаны успешно");
        УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().Подключен);
    Иначе
        Состояние("Ошибка. Не удалось обработать данные");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхУниверситета

&НаСервере
Функция ЗаполнитьДанныеДляЗагрузкиНаСервере(Знач ДанныеЗагрузки)
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    ОчиститьДанныеЗагрузкиНаСервере();

    Попытка
        РезультатФункции.Успех = Обработки.ГП_ПолучениеДанныхУниверситета.ЗаполнитьДанныеИзУниверситет(
                ЭтотОбъект.Объект, ДанныеЗагрузки, ЭтотОбъект.УникальныйИдентификатор);
    Исключение
        РезультатФункции.Успех = Ложь;
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

        ОчиститьДанныеЗагрузкиНаСервере();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ОчиститьДанныеЗагрузкиНаСервере()
    Обработки.ГП_ПолучениеДанныхУниверситета.ОчиститьТаблицыДанныеЗагрузки(ЭтотОбъект.Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодБазыУниверситет()
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыУниверситет();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодБазыБГУ()
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыБГУ();
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнениеОбработкиСервисовИнтеграцииНаСервере()
    ГП_СервисыИнтеграции.ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

// Устарела. Требует рефакторинг
//
&НаКлиентеНаСервереБезКонтекста
Функция РаботаВТестовомРежиме(Знач Форма)
    Возврат Форма.ТестовыйРежим;
КонецФункции

// Возвращаемое значение:
//  - Строка
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНаименованиеСервисаОбменаУниверситет()
    Возврат СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(ПолучитьСервисОбменаУниверситетНаСервере()));
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСервисОбменаУниверситетНаСервере()
    Возврат ГП_ОбменУниверситетБГУ.ПолучитьСервисОбмена();
КонецФункции

// Устарела. Не используется
//
&НаСервереБезКонтекста
Функция Удалить_ПодождатьСинхронноНаСервере(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут

    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;

    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат ВремяПрошло;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеНаименованияБазыУниверситет()
    Возврат "Университет";
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеТелаОтветаУниверситетНаСервере(Знач ПредставлениеТелаСообщенияJSON)
    Возврат ГП_ОбменУниверситетБГУ.ПолучитьЗначениеТелаСообщенияУниверситетНаСервере(ПредставлениеТелаСообщенияJSON);
КонецФункции

#Область ПроверкаСоединения

// Устарела. Не используется
// Параметры:
//  АдресРезультата - Строка, Неопределено
// Возвращаемое значение:
//  - Структура, Неопределено - Неопределено если заполнен аргумент `АдресРезультата`
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
&НаСервере
Функция Удалить_ПроверитьСоединениеНаСервере(Знач АдресРезультата = Неопределено)
    Возврат ГП_ОбменУниверситетБГУ.ПроверитьСоединениеСБазойУниверситет(АдресРезультата);
КонецФункции

&НаКлиенте
Процедура ВыполнитьОперациюПроверкиСоединения()
    Состояние("Обновление статуса подключения");

    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().НеПодключен);

    ОперацияПроверкиСоединения = НачатьВыполнениеДлительнойОперацииНаСервере(
            "ГП_ОбменУниверситетБГУ.ПроверитьСоединениеСБазойУниверситет",
            ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаВТестовомРежиме));
    ДополнительныеПараметрыОперации = Новый Структура;
    ОповещениеОЗавершении = Новый ОписаниеОповещения(
            "ПроверкаСтатусаПодключенияЗавершение", ЭтотОбъект, ДополнительныеПараметрыОперации);
    ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверкиСоединения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусаПодключенияЗавершение(Знач РезультатВыполнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
    СтатусыПодключения = НовыйСтатусыПодключения();
    РезультатДляОтображения = Новый Структура("СтатусПодключения", СтатусыПодключения.НеПодключен);

    Если РезультатВыполнения = Неопределено Тогда
        // Операция отменена
        Возврат;
    КонецЕсли;

    Если РезультатВыполнения.Статус = "Ошибка"
        ИЛИ НЕ ЭтоАдресВременногоХранилища(РезультатВыполнения.АдресРезультата) Тогда

        Если РезультатВыполнения.Статус = "Ошибка" Тогда
            СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(РезультатВыполнения.ИнформацияОбОшибке);
        КонецЕсли;

        РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.НеПодключен;

    Иначе
        ДанныеРезультатаОбработки = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
        Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "Успех")
            ИЛИ ДанныеРезультатаОбработки.Успех = Ложь Тогда

            Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "ТекстСообщения")
                И НЕ ПустаяСтрока(ДанныеРезультатаОбработки.ТекстСообщения) Тогда

                ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеРезультатаОбработки.ТекстСообщения);
            КонецЕсли;

            РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.НеПодключен;
        Иначе
            РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.Подключен;
        КонецЕсли;
    КонецЕсли;

    Состояние("Выполнено обновление статуса подключения");
    УстановитьСтатусПодключения(ЭтотОбъект, РезультатДляОтображения.СтатусПодключения);
КонецПроцедуры

#КонецОбласти // ПроверкаСоединения

#Область ДлительныеОперации

&НаСервере
Функция НачатьВыполнениеДлительнойОперацииНаСервере(Знач ПолноеИмяФункции, Знач МассивПараметров = Неопределено)
    МассивПараметров = ?(МассивПараметров = Неопределено, Новый Массив, МассивПараметров);

    КоличествоПараметров = МассивПараметров.Количество();
    СтруктураПараметровФункции = Новый Структура;
    МаксКоличествоПараметров = 7;
    Для Сч = 0 По МаксКоличествоПараметров - 1 Цикл
        СтруктураПараметровФункции.Вставить(
            СтрШаблон("Параметр%1", Строка(Сч)), ?(Сч < КоличествоПараметров, МассивПараметров[Сч], Неопределено));
    КонецЦикла;

    ПараметрыВыполненияДлительнойОперации = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтотОбъект.УникальныйИдентификатор);

    Возврат ДлительныеОперации.ВыполнитьФункцию(
        ПараметрыВыполненияДлительнойОперации,
        ПолноеИмяФункции,
        СтруктураПараметровФункции.Параметр0,
        СтруктураПараметровФункции.Параметр1,
        СтруктураПараметровФункции.Параметр2,
        СтруктураПараметровФункции.Параметр3,
        СтруктураПараметровФункции.Параметр4,
        СтруктураПараметровФункции.Параметр5,
        СтруктураПараметровФункции.Параметр6);
КонецФункции

#КонецОбласти // ДлительныеОперации

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСтатусыПодключения()
    РезультатФункции = Новый Структура;

    СоответствиеСтатусов = ПолучитьСоответствиеПредставленийСтатусовПодключений();

    Для Каждого ЭлементКЗ Из СоответствиеСтатусов Цикл
        РезультатФункции.Вставить(ЭлементКЗ.Ключ, ЭлементКЗ.Ключ);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеПредставленийСтатусовПодключений()
    РезультатФункции = Новый Соответствие;
    РезультатФункции.Вставить("Подключен", "Соединение установлено");
    РезультатФункции.Вставить("НеПодключен", "Нет соединения");

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // Константы

#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияНаСервере()
    ЭтотОбъект.ТестовыйРежим = Константы.ГП_РежимОбменаУниверситетБГУ.ИспользуетсяТестовыйРежим();
    ЭтотОбъект.Объект.КоллекцияТаблицИдентификаторовСвязей =
        Обработки.ГП_ПолучениеДанныхУниверситета.НовыйКоллекцияТаблицИдентификаторовСвязей();
    УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().НеПодключен);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтатусПодключения(Форма, Знач Статус)
    Форма.ЗначениеСтатусаПодключения = Статус;
    Форма.Элементы.ДекорацияСтатусПодключения.Заголовок = Строка(ПолучитьСоответствиеПредставленийСтатусовПодключений().Получить(Статус));
КонецПроцедуры

#КонецОбласти // УправлениеФормой

&НаСервере
Функция ПроверитьЗаполнениеДляЗапросаДанныхУниверситетНаСервере()
    Возврат Обработки.ГП_ПолучениеДанныхУниверситета.ПроверитьЗаполнениеДляЗапросаДанныхУниверситет(ЭтотОбъект.Объект);
КонецФункции

// Параметры:
//  ГруппаСтудентов - СправочникСсылка.Студенты
// Возвращаемое значение:
//  - СправочникСсылка.Контрагенты, Неопределено
&НаСервереБезКонтекста
Функция ПолучитьГруппуКонтрагентовПоГруппеСтудентовНаСервере(Знач ГруппаСтудентов)
    РезультатФункции = Неопределено;

    Если ГруппаСтудентов.Пустая() Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    НаименованиеГруппыСтудентов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаСтудентов, "Наименование");

    НайденныеГруппы = Обработки.ГП_ПолучениеДанныхУниверситета.НайтиГруппыКонтрагентовПоНаименованию(
            НаименованиеГруппыСтудентов);
    Если НайденныеГруппы.Количество() = 1 Тогда
        РезультатФункции = НайденныеГруппы[0];
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
