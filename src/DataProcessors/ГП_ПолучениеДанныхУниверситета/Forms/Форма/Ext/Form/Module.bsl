// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ИнициализацияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ОбновитьСтатусПодключения(Неопределено);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПапкаСтудентовПриИзменении(Элемент)
    ЭтотОбъект.Объект.ПапкаКонтрагентов = ПолучитьГруппуКонтрагентовПоГруппеСтудентовНаСервере(
            ЭтотОбъект.Объект.ПапкаСтудентов);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненииДанныхОбмена(Знач РезультатЗаполнения)
    Если РезультатЗаполнения.Успех Тогда
        Состояние("Выполнено. Данные получены и обработаны успешно");
        УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().Подключен);
        ЭтотОбъект.Элементы.СоздатьОбъектыБГУ.Доступность = Истина;
    Иначе
        Состояние("Ошибка. Не удалось обработать данные");
        ЭтотОбъект.Элементы.СоздатьОбъектыБГУ.Доступность = Ложь;
        ОчиститьДанныеЗагрузкиНаСервере();
        ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗаполнения.ТекстСообщения);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеУниверситета(Команда)
    РезультатПроверки = ПроверитьЗаполнениеДляЗапросаДанныхУниверситетНаСервере();
    Если РезультатПроверки.Успех = Ложь Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатПроверки.Ошибки);
        Возврат;
    КонецЕсли;

    ВыполнитьОперациюПолученияДанныхУниверситета();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПодключения(Команда)
    ВыполнитьОперациюПроверкиСоединения();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектыБГУ(Команда)
    Состояние("Создание объектов ИБ...");

    РезультатСоздания = СоздатьОбъектыОбменаПолученныеИзУниверситетНаСервере();

    // Вывод сообщений
    Для Каждого ТекстСообщения Из РезультатСоздания.СообщенияОбОшибках Цикл
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
    КонецЦикла;
    Для Каждого ТекстСообщения Из РезультатСоздания.ИнформационныеСообщения Цикл
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
    КонецЦикла;

    Если РезультатСоздания.Успех = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "Ошибка при создании объектов.
                |Информация: %1", РезультатСоздания.ТекстСообщения));
    Иначе
        Состояние("Создание объектов успешно завершено");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхУниверситета

// Устарела. Использовать `ВыполнитьОперациюПолученияДанныхУниверситета`
//
// Возвращаемое значение:
//  - Структура
&НаСервере
Функция Удалить_ПолучитьДанныеПриказовУниверситетаНаСервере()
    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    ОчиститьДанныеЗагрузкиНаСервере();

    // Параметры отбора приказов
    ПараметрыОтбораПриказов = Новый Структура;
    ПараметрыОтбораПриказов.Вставить("ДатаНачала", ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала);
    ПараметрыОтбораПриказов.Вставить("ДатаОкончания", ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания);
    ПараметрыОтбораПриказов.Вставить("НомерПриказа", ЭтотОбъект.Объект.НомерПриказа);
    ПараметрыОтбораПриказов.Вставить("ТолькоПлатнаяОснова", Истина);

    Возврат ГП_ОбменУниверситетБГУ.ПолучитьДанныеПриказовУниверситета(
        ПараметрыОтбораПриказов, РаботаВТестовомРежиме, Новый Структура("ЗадержкаОпросаКаналаМсек", 5000));
КонецФункции

// Выполняет длительную процедуру получения данных из базы университет (в фоне)
// Параметры:
//  Параметры - Структура, Неопределено
//      * ЗадержкаОпросаКаналаМсек - Число - Опционально, по умолчанию 5000 мс
//      * ОчищатьТаблицы - Число - Опционально, по умолчанию Истина
&НаКлиенте
Процедура ВыполнитьОперациюПолученияДанныхУниверситета(Знач Параметры = Неопределено)
    // Разбор параметров выполнения
    Параметры = ?(Параметры = Неопределено, Новый Структура, Параметры);
    ЗадержкаОпросаКаналаМсек = ?(Параметры.Свойство("ЗадержкаОпросаКаналаМсек"),
            Параметры.ЗадержкаОпросаКаналаМсек, 5000);
    ОчищатьТаблицы = ?(Параметры.Свойство("ОчищатьТаблицы"),
            Параметры.ОчищатьТаблицы, Истина);

    Состояние("Запрос данных университета");

    // Очистка таблиц
    Если ОчищатьТаблицы Тогда
        ОчиститьДанныеЗагрузкиНаСервере();
    КонецЕсли;

    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    // Параметры отбора приказов
    ПараметрыОтбораПриказов = Новый Структура;
    ПараметрыОтбораПриказов.Вставить("ДатаНачала", ЭтотОбъект.Объект.ПериодОбработки.ДатаНачала);
    ПараметрыОтбораПриказов.Вставить("ДатаОкончания", ЭтотОбъект.Объект.ПериодОбработки.ДатаОкончания);
    ПараметрыОтбораПриказов.Вставить("НомерПриказа", ЭтотОбъект.Объект.НомерПриказа);
    ПараметрыОтбораПриказов.Вставить("ТолькоПлатнаяОснова", Истина);

    АргументыОперацииДанных = Новый Массив;
    АргументыОперацииДанных.Добавить(ПараметрыОтбораПриказов);
    АргументыОперацииДанных.Добавить(РаботаВТестовомРежиме);
    АргументыОперацииДанных.Добавить(Новый Структура("ЗадержкаОпросаКаналаМсек", 5000));

    ОперацияПолученияДанных = НачатьВыполнениеДлительнойОперацииНаСервере(
            "ГП_ОбменУниверситетБГУ.ПолучитьДанныеПриказовУниверситета",
            АргументыОперацииДанных);

    ДополнительныеПараметрыОперации = Новый Структура;

    ОповещениеОЗавершении = Новый ОписаниеОповещения(
            "ПолучениеДанныхУниверситетаЗавершение", ЭтотОбъект, ДополнительныеПараметрыОперации);
    ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПолученияДанных, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхУниверситетаЗавершение(Знач РезультатВыполнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
    Если РезультатВыполнения = Неопределено Тогда
        // Операция отменена
        Возврат;
    КонецЕсли;

    Если РезультатВыполнения.Статус = "Ошибка"
        ИЛИ НЕ ЭтоАдресВременногоХранилища(РезультатВыполнения.АдресРезультата) Тогда

        Если РезультатВыполнения.Статус = "Ошибка" Тогда
            СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(РезультатВыполнения.ИнформацияОбОшибке);
        КонецЕсли;

        Возврат;
    КонецЕсли;

    ДанныеРезультатаОбработки = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
    Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "Успех")
        ИЛИ ДанныеРезультатаОбработки.Успех = Ложь Тогда

        Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "ТекстСообщения")
            И НЕ ПустаяСтрока(ДанныеРезультатаОбработки.ТекстСообщения) Тогда

            ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеРезультатаОбработки.ТекстСообщения);
        КонецЕсли;

        Возврат;
    КонецЕсли;

    Если ДанныеРезультатаОбработки.МассивСообщений.Количество() = 0 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю("Нет данных по установленному отбору");
        Возврат;
    КонецЕсли;

    Если ДанныеРезультатаОбработки.МассивСообщений.Количество() > 1 Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
                "ВНИМАНИЕ! Неоднозначный отвеет от базы << %1 >>", ПолучитьПредставлениеНаименованияБазыУниверситет()));
    КонецЕсли;

    ОтветУниверситета = ДанныеРезультатаОбработки.МассивСообщений[0];
    СтруктураТелаОтвета = ПолучитьЗначениеТелаОтветаУниверситетНаСервере(ОтветУниверситета.ПредставлениеТелаСообщения);
    Если СтруктураТелаОтвета.Успех = Ложь Тогда
        ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураТелаОтвета.СообщениеОбОшибке);
        Возврат; // Ошибка расшифровки тела сообщения
    КонецЕсли;

    Состояние("Данные получены для обработки");

    РезультатЗаполнения = ЗаполнитьДанныеДляЗагрузкиНаСервере(СтруктураТелаОтвета.Данные);

    ПослеЗаполненииДанныхОбмена(РезультатЗаполнения);
КонецПроцедуры

#КонецОбласти // ПолучениеДанныхУниверситета

&НаСервере
Функция ЗаполнитьДанныеДляЗагрузкиНаСервере(Знач ДанныеЗагрузки)
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    ОчиститьДанныеЗагрузкиНаСервере();

    Попытка
        РезультатФункции.Успех = Обработки.ГП_ПолучениеДанныхУниверситета.ЗаполнитьДанныеИзУниверситет(
                ЭтотОбъект.Объект, ДанныеЗагрузки, ЭтотОбъект.УникальныйИдентификатор);
    Исключение
        РезультатФункции.Успех = Ложь;
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

        ОчиститьДанныеЗагрузкиНаСервере();
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ОчиститьДанныеЗагрузкиНаСервере()
    Обработки.ГП_ПолучениеДанныхУниверситета.ОчиститьТаблицыДанныеЗагрузки(ЭтотОбъект.Объект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодБазыУниверситет()
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыУниверситет();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодБазыБГУ()
    Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьКодБазыБГУ();
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнениеОбработкиСервисовИнтеграцииНаСервере()
    ГП_СервисыИнтеграции.ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

// Устарела. Требует рефакторинг
//
&НаКлиентеНаСервереБезКонтекста
Функция РаботаВТестовомРежиме(Знач Форма)
    Возврат Форма.ТестовыйРежим;
КонецФункции

// Возвращаемое значение:
//  - Строка
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНаименованиеСервисаОбменаУниверситет()
    Возврат СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(ПолучитьСервисОбменаУниверситетНаСервере()));
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСервисОбменаУниверситетНаСервере()
    Возврат ГП_ОбменУниверситетБГУ.ПолучитьСервисОбмена();
КонецФункции

// Устарела. Не используется
//
&НаСервереБезКонтекста
Функция Удалить_ПодождатьСинхронноНаСервере(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут

    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;

    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат ВремяПрошло;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеНаименованияБазыУниверситет()
    Возврат "Университет";
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеТелаОтветаУниверситетНаСервере(Знач ПредставлениеТелаСообщенияJSON)
    Возврат ГП_ОбменУниверситетБГУ.ПолучитьЗначениеТелаСообщенияУниверситетНаСервере(ПредставлениеТелаСообщенияJSON);
КонецФункции

#Область ПроверкаСоединения

// Устарела. Не используется
// Параметры:
//  АдресРезультата - Строка, Неопределено
// Возвращаемое значение:
//  - Структура, Неопределено - Неопределено если заполнен аргумент `АдресРезультата`
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
&НаСервере
Функция Удалить_ПроверитьСоединениеНаСервере(Знач АдресРезультата = Неопределено)
    Возврат ГП_ОбменУниверситетБГУ.ПроверитьСоединениеСБазойУниверситет(АдресРезультата);
КонецФункции

&НаКлиенте
Процедура ВыполнитьОперациюПроверкиСоединения()
    Состояние("Обновление статуса подключения");

    РаботаВТестовомРежиме = РаботаВТестовомРежиме(ЭтотОбъект);

    УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().НеПодключен);

    ОперацияПроверкиСоединения = НачатьВыполнениеДлительнойОперацииНаСервере(
            "ГП_ОбменУниверситетБГУ.ПроверитьСоединениеСБазойУниверситет",
            ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РаботаВТестовомРежиме));
    ДополнительныеПараметрыОперации = Новый Структура;
    ОповещениеОЗавершении = Новый ОписаниеОповещения(
            "ПроверкаСтатусаПодключенияЗавершение", ЭтотОбъект, ДополнительныеПараметрыОперации);
    ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверкиСоединения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусаПодключенияЗавершение(Знач РезультатВыполнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
    СтатусыПодключения = НовыйСтатусыПодключения();
    РезультатДляОтображения = Новый Структура("СтатусПодключения", СтатусыПодключения.НеПодключен);

    Если РезультатВыполнения = Неопределено Тогда
        // Операция отменена
        Возврат;
    КонецЕсли;

    Если РезультатВыполнения.Статус = "Ошибка"
        ИЛИ НЕ ЭтоАдресВременногоХранилища(РезультатВыполнения.АдресРезультата) Тогда

        Если РезультатВыполнения.Статус = "Ошибка" Тогда
            СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(РезультатВыполнения.ИнформацияОбОшибке);
        КонецЕсли;

        РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.НеПодключен;

    Иначе
        ДанныеРезультатаОбработки = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
        Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "Успех")
            ИЛИ ДанныеРезультатаОбработки.Успех = Ложь Тогда

            Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеРезультатаОбработки, "ТекстСообщения")
                И НЕ ПустаяСтрока(ДанныеРезультатаОбработки.ТекстСообщения) Тогда

                ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеРезультатаОбработки.ТекстСообщения);
            КонецЕсли;

            РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.НеПодключен;
        Иначе
            РезультатДляОтображения.СтатусПодключения = СтатусыПодключения.Подключен;
        КонецЕсли;
    КонецЕсли;

    Состояние("Выполнено обновление статуса подключения");
    УстановитьСтатусПодключения(ЭтотОбъект, РезультатДляОтображения.СтатусПодключения);
КонецПроцедуры

#КонецОбласти // ПроверкаСоединения

#Область ДлительныеОперации

&НаСервере
Функция НачатьВыполнениеДлительнойОперацииНаСервере(Знач ПолноеИмяФункции, Знач МассивПараметров = Неопределено)
    МассивПараметров = ?(МассивПараметров = Неопределено, Новый Массив, МассивПараметров);

    КоличествоПараметров = МассивПараметров.Количество();
    СтруктураПараметровФункции = Новый Структура;
    МаксКоличествоПараметров = 7;
    Для Сч = 0 По МаксКоличествоПараметров - 1 Цикл
        СтруктураПараметровФункции.Вставить(
            СтрШаблон("Параметр%1", Строка(Сч)), ?(Сч < КоличествоПараметров, МассивПараметров[Сч], Неопределено));
    КонецЦикла;

    ПараметрыВыполненияДлительнойОперации = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтотОбъект.УникальныйИдентификатор);

    Возврат ДлительныеОперации.ВыполнитьФункцию(
        ПараметрыВыполненияДлительнойОперации,
        ПолноеИмяФункции,
        СтруктураПараметровФункции.Параметр0,
        СтруктураПараметровФункции.Параметр1,
        СтруктураПараметровФункции.Параметр2,
        СтруктураПараметровФункции.Параметр3,
        СтруктураПараметровФункции.Параметр4,
        СтруктураПараметровФункции.Параметр5,
        СтруктураПараметровФункции.Параметр6);
КонецФункции

#КонецОбласти // ДлительныеОперации

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСтатусыПодключения()
    РезультатФункции = Новый Структура;

    СоответствиеСтатусов = ПолучитьСоответствиеПредставленийСтатусовПодключений();

    Для Каждого ЭлементКЗ Из СоответствиеСтатусов Цикл
        РезультатФункции.Вставить(ЭлементКЗ.Ключ, ЭлементКЗ.Ключ);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеПредставленийСтатусовПодключений()
    РезультатФункции = Новый Соответствие;
    РезультатФункции.Вставить("Подключен", "Соединение установлено");
    РезультатФункции.Вставить("НеПодключен", "Нет соединения");

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // Константы

#Область УправлениеФормой

&НаСервере
Процедура ИнициализацияНаСервере()
    ЭтотОбъект.ТестовыйРежим = Константы.ГП_РежимОбменаУниверситетБГУ.ИспользуетсяТестовыйРежим();
    ЭтотОбъект.Объект.КоллекцияТаблицИдентификаторовСвязей =
        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйКоллекцияТаблицИдентификаторовСвязей();
    УстановитьСтатусПодключения(ЭтотОбъект, НовыйСтатусыПодключения().НеПодключен);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтатусПодключения(Форма, Знач Статус)
    Форма.ЗначениеСтатусаПодключения = Статус;
    Форма.Элементы.ДекорацияСтатусПодключения.Заголовок = Строка(ПолучитьСоответствиеПредставленийСтатусовПодключений().Получить(Статус));
КонецПроцедуры

#КонецОбласти // УправлениеФормой

&НаСервере
Функция ПроверитьЗаполнениеДляЗапросаДанныхУниверситетНаСервере()
    Возврат Обработки.ГП_ПолучениеДанныхУниверситета.ПроверитьЗаполнениеДляЗапросаДанныхУниверситет(ЭтотОбъект.Объект);
КонецФункции

// Параметры:
//  ГруппаСтудентов - СправочникСсылка.Студенты
// Возвращаемое значение:
//  - СправочникСсылка.Контрагенты, Неопределено
&НаСервереБезКонтекста
Функция ПолучитьГруппуКонтрагентовПоГруппеСтудентовНаСервере(Знач ГруппаСтудентов)
    РезультатФункции = Неопределено;

    Если ГруппаСтудентов.Пустая() Тогда
        Возврат РезультатФункции;
    КонецЕсли;

    НаименованиеГруппыСтудентов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаСтудентов, "Наименование");

    НайденныеГруппы = Обработки.ГП_ПолучениеДанныхУниверситета.НайтиГруппыКонтрагентовПоНаименованию(
            НаименованиеГруппыСтудентов);
    Если НайденныеГруппы.Количество() = 1 Тогда
        РезультатФункции = НайденныеГруппы[0];
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
//      * ИнформационныеСообщения - Массив из Строка
&НаСервере
Функция СоздатьОбъектыОбменаПолученныеИзУниверситетНаСервере()
    РезультатСоздания = Обработки.ГП_ПолучениеДанныхУниверситета.СоздатьОбъектыОбменаПолученныеИзУниверситет(ЭтотОбъект.Объект);
    Возврат РезультатСоздания;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
