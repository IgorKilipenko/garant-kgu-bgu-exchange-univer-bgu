// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
//  ДанныеЗагрузки - Структура
//  ИдентификаторХранилища - УникальныйИдентификатор, Неопределено
Функция ЗаполнитьДанныеИзУниверситет(Объект, Знач ДанныеЗагрузки, Знач ИдентификаторХранилища = Неопределено) Экспорт
    ИдентификаторХранилища = ?(ИдентификаторХранилища = Неопределено, Новый УникальныйИдентификатор, ИдентификаторХранилища);

    ОрганизацияПоУмолчанию = ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию();

    ОчиститьТаблицыДанныеЗагрузки(Объект);

    // Заполнение связанных таблиц:
    КэшЗагруженныхТаблицСвязанныхОбъектов = Новый Соответствие;
    БуферКоллекцияДополнительныхТаблиц = Новый Структура;
    БуферКоллекцияДополнительныхТаблиц.Вставить("ТаблицаИдентификаторовОбщихДанныхПриказа",
        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаИдентификаторовОбщихДанныхПриказа());

    Для Каждого СтрокаДанных Из ДанныеЗагрузки.СвязанныеОбъекты.Факультеты Цикл
        НоваяСтрока = Объект.Факультеты.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);

        НоваяСтрока.Идентификатор = СтрокаДанных.УникальныйИдентификатор;

        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("Факультеты", Истина);
    КонецЦикла;

    Для Каждого СтрокаДанных Из ДанныеЗагрузки.СвязанныеОбъекты.ФизическиеЛицаСтуденты Цикл
        НоваяСтрока = Объект.Студенты.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);

        НоваяСтрока.Идентификатор = СтрокаДанных.УникальныйИдентификатор;

        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("ФизическиеЛицаСтуденты", Истина);
    КонецЦикла;

    // Заполнение приказов:
    КэшНаименованийФакультетов = Новый Соответствие;
    ТаблицаПриказов = Объект.Приказы;
    Для Каждого СтрокаДанныхПриказов Из ДанныеЗагрузки.Приказы Цикл
        Для Каждого ИдентификаторФакультета Из СтрокаДанныхПриказов.Факультеты Цикл
            НоваяСтрокаПриказа = ТаблицаПриказов.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрокаПриказа, СтрокаДанныхПриказов);

            НоваяСтрокаПриказа.Организация = ОрганизацияПоУмолчанию;
            НоваяСтрокаПриказа.НомерПриказа = СтрокаДанныхПриказов.НомерПриказа;
            НоваяСтрокаПриказа.Идентификатор = СтрокаДанныхПриказов.УникальныйИдентификатор;
            НоваяСтрокаПриказа.Представление = СтрокаДанныхПриказов.ПредставлениеСсылки;

            // Колонки идентификации Типа приказа
            НоваяСтрокаПриказа.ИдентификаторТипаПриказа = СтрокаДанныхПриказов.ИдентификаторТипаПриказа;

            // Колонки идентификации факультета
            НоваяСтрокаПриказа.ИдентификаторФакультета = ИдентификаторФакультета;
            НаименованиеФакультета = КэшНаименованийФакультетов.Получить(ИдентификаторФакультета);
            Если НаименованиеФакультета = Неопределено Тогда
                НайденныеСтроки = Объект.Факультеты.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторФакультета));
                Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
                    НаименованиеФакультета = ТекущаяСтрока.Наименование;
                    КэшНаименованийФакультетов.Вставить(ИдентификаторФакультета, НаименованиеФакультета);
                КонецЦикла;
            КонецЕсли;
            НоваяСтрокаПриказа.НаименованиеФакультета = НаименованиеФакультета;
        КонецЦикла;

        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.ЗаполнитьТаблицыИдентификаторовСвязейПриказа(
            Объект.КоллекцияТаблицИдентификаторовСвязей, СтрокаДанныхПриказов);

        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.ДополнитьТаблицуИдентификаторовОбщихДанныхПриказа(
            БуферКоллекцияДополнительныхТаблиц.ТаблицаИдентификаторовОбщихДанныхПриказа,
            СтрокаДанныхПриказов.УникальныйИдентификатор,
            СтрокаДанныхПриказов.ДанныеСтудентов);

        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("Приказы", Истина);
        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("ТаблицаИдентификаторовОбщихДанныхПриказа", Истина);
    КонецЦикла;

    // Заполнение связанных дополнительных таблиц:
    ИнформациюОПредопределенныхТаблиц =
        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.ПолучитьИнформациюОПредопределенныхТаблицСвязанныхОбъектов();
    Для Каждого ТаблицаДанныхКЗ Из ДанныеЗагрузки.СвязанныеОбъекты Цикл
        Если ТипЗнч(ТаблицаДанныхКЗ.Значение) <> Тип("Массив") ИЛИ ТаблицаДанныхКЗ.Значение.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;
        Если КэшЗагруженныхТаблицСвязанныхОбъектов.Получить(ТаблицаДанныхКЗ.Ключ) <> Неопределено Тогда
            Продолжить;
        КонецЕсли;

        ЭтоСправочник = ТаблицаДанныхКЗ.Значение[0].Свойство("Код");
        ЭтоДокумент = НЕ ЭтоСправочник И ТаблицаДанныхКЗ.Значение[0].Свойство("Номер") И ТаблицаДанныхКЗ.Значение[0].Свойство("Дата");

        ЭтоПредопределеннаяТаблица = Ложь;
        Если ЭтоСправочник ИЛИ ЭтоДокумент Тогда
            Если ИнформациюОПредопределенныхТаблиц.Свойство(ТаблицаДанныхКЗ.Ключ) Тогда
                ЭтоПредопределеннаяТаблица = Истина;
            КонецЕсли;
        КонецЕсли;

        НоваяТаблицаДанных = Неопределено;
        Если ЭтоПредопределеннаяТаблица Тогда
            Если ТаблицаДанныхКЗ.Ключ = ИнформациюОПредопределенныхТаблиц.ТипыПриказов.Наименование Тогда
                НоваяТаблицаДанных = ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаТипыПриказов();
            ИначеЕсли ТаблицаДанныхКЗ.Ключ = ИнформациюОПредопределенныхТаблиц.КурсыОбучения.Наименование Тогда
                НоваяТаблицаДанных = ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаКурсыОбучения();
            КонецЕсли;
        ИначеЕсли ЭтоСправочник Тогда
            НоваяТаблицаДанных = ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаСправочникаУниверситет(Новый ОписаниеТипов);
        ИначеЕсли ЭтоДокумент Тогда
            НоваяТаблицаДанных = ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаДокументаУниверситет(Новый ОписаниеТипов);
        КонецЕсли;

        Если НоваяТаблицаДанных = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        Для Каждого СтрокаТаблицы Из ТаблицаДанныхКЗ.Значение Цикл
            НоваяСтрока = НоваяТаблицаДанных.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
            НоваяСтрока.Идентификатор = СтрокаТаблицы.УникальныйИдентификатор;
        КонецЦикла;

        БуферКоллекцияДополнительныхТаблиц.Вставить(ТаблицаДанныхКЗ.Ключ, НоваяТаблицаДанных);
    КонецЦикла;

    АдресХранилищаДополнительныхТаблицЗагрузки = ПоместитьВоВременноеХранилище(БуферКоллекцияДополнительныхТаблиц, ИдентификаторХранилища);
    Объект.АдресХранилищаДополнительныхТаблицЗагрузки = АдресХранилищаДополнительныхТаблицЗагрузки;

    Возврат Истина;
КонецФункции

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
Функция СоздатьОбъектыОбменаПолученныеИзУниверситет(Объект) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения, СообщенияОбОшибках", Истина, Неопределено, Новый Массив);

    ТаблицаПриказов = Объект.Приказы;
    Если ТаблицаПриказов.Количество() = 0 Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = "Нет данных приказов";
        Возврат РезультатФункции;
    КонецЕсли;

    ТаблицаФакультетов = Объект.Факультеты;
    ТаблицаСтудентов = Объект.Студенты;
    ТаблицаДоговоров = Объект.Договоры;
    // В текущей реализации таблица заполняется при формировании связей, т.к. данные не приходят из Университет
    //  а формируются динамически
    ТаблицаДоговоров.Очистить();

    // Загрузка дополнительных таблиц
    КоллекцияТаблицСвязанныхОбъектов = Неопределено;
    Попытка
        КоллекцияТаблицСвязанныхОбъектов = ПолучитьИзВременногоХранилища(Объект.АдресХранилищаДополнительныхТаблицЗагрузки);
    Исключение
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстСообщения = СтрШаблон(
                "Ошибка при получении таблиц дополнительных данных.
                |Информация: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
        Возврат РезультатФункции;
    КонецПопытки;
    ТаблицаТиповПриказов = КоллекцияТаблицСвязанныхОбъектов.ТипыПриказов;
    ТаблицаКурсовОбучения = КоллекцияТаблицСвязанныхОбъектов.КурсыОбучения;

    ОтменитьТранзакциюПринудительно = Истина; // !!! Только для тестирования
    ДанныеТранзакции = Новый Структура("Идентификатор, Дата", Новый УникальныйИдентификатор, ТекущаяДатаСеанса());
    НачатьТранзакцию();
    Попытка
        // Сопоставление факультетов
        РезультатСопоставленияФакультетов =
            ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.СопоставитьФакультетыПолученныеИзУниверситет(ТаблицаФакультетов);
        Если РезультатСопоставленияФакультетов.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияФакультетов.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;
        ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
            РезультатФункции.СообщенияОбОшибках, РезультатСопоставленияФакультетов.СообщенияОбОшибках);

        // Сопоставление (и создание) видов приказов
        РезультатСопоставленияВидовПриказов =
            ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.СопоставитьВидыПриказовПолученныеИзУниверситет(
                ТаблицаТиповПриказов, Истина, ДанныеТранзакции);
        Если РезультатСопоставленияВидовПриказов.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияВидовПриказов.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;
        ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
            РезультатФункции.СообщенияОбОшибках, РезультатСопоставленияВидовПриказов.СообщенияОбОшибках);

        // Сопоставление курсов обучения (без создания новый)
        РезультатСопоставленияКурсов =
            ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.СопоставитьКурсыОбученияПолученныеИзУниверситет(
                ТаблицаКурсовОбучения);
        Если РезультатСопоставленияКурсов.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияКурсов.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;
        ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
            РезультатФункции.СообщенияОбОшибках, РезультатСопоставленияКурсов.СообщенияОбОшибках);

        // Сопоставление (и создание) студентов, контрагентов
        ПараметрыСопоставленияСтудентов = Новый Структура(
                "РодительСтудентов, РодительКонтрагентов", Объект.ПапкаСтудентов, Объект.ПапкаКонтрагентов);
        РезультатСопоставленияСтудентов =
            ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.СопоставитьСтудентовПолученныеИзУниверситет(
                ТаблицаСтудентов,
                ПараметрыСопоставленияСтудентов,
                Истина,
                ДанныеТранзакции,
                Неопределено);
        Если РезультатСопоставленияСтудентов.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияСтудентов.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;
        ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
            РезультатФункции.СообщенияОбОшибках, РезультатСопоставленияСтудентов.СообщенияОбОшибках);

        // Сопоставление (и создание) договоров
        КэшДанныхПриказовСтудентов = ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.ПолучитьСтрокиТаблицыПриказовДляСтудентовУниверситет(
                ТаблицаСтудентов, ТаблицаПриказов, КоллекцияТаблицСвязанныхОбъектов.ТаблицаИдентификаторовОбщихДанныхПриказа);
        РезультатСопоставленияДоговоров =
            ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.СопоставитьДоговорыСтудентовПолученныеИзУниверситет(
                ТаблицаСтудентов,
                ТаблицаДоговоров,
                КэшДанныхПриказовСтудентов,
                Истина,
                ДанныеТранзакции);
        Если РезультатСопоставленияДоговоров.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияДоговоров.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;
        ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
            РезультатФункции.СообщенияОбОшибках, РезультатСопоставленияДоговоров.СообщенияОбОшибках);

        // !!! Только для тестирования
        Если ОтменитьТранзакциюПринудительно Тогда
            ВызватьИсключение("Транзакция отменена принудительно");
        КонецЕсли;

        ЗафиксироватьТранзакцию();

    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
        ЗаписьЖурналаРегистрации(ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяСобытияДляЖурнала(),
            УровеньЖурналаРегистрации.Ошибка, , ,
            РезультатФункции.ТекстСообщения);
    КонецПопытки;

    Возврат РезультатФункции;
КонецФункции

#Область СозданиеТаблиц

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаПриказы() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Приказы.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаФакультеты() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Факультеты.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаСтуденты() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Студенты.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаТипыПриказов() Экспорт
    Возврат ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйТаблицаТипыПриказов();
КонецФункции

#КонецОбласти // СозданиеТаблиц

// Устарела. Использовать: ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НайтиГруппыКонтрагентовПоНаименованию
//
// Параметры:
//  Наименование - Строка
// Возвращаемое значение:
//  - Массив из СправочникСсылка.Контрагент
Функция НайтиГруппыКонтрагентовПоНаименованию(Знач Наименование) Экспорт
    Возврат ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НайтиГруппыКонтрагентовПоНаименованию(Наименование);
КонецФункции

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
Процедура ОчиститьТаблицыДанныеЗагрузки(Объект) Экспорт
    Объект.Приказы.Очистить();
    Объект.Факультеты.Очистить();
    Объект.Студенты.Очистить();
    Объект.Договоры.Очистить();

    Объект.КоллекцияТаблицИдентификаторовСвязей =
        ГП_ОбменУниверситетБГУОбработкаДанныхУниверситет.НовыйКоллекцияТаблицИдентификаторовСвязей();
    Объект.АдресХранилищаДополнительныхТаблицЗагрузки = "";
КонецПроцедуры

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Ошибки - Структура, Неопределено
Функция ПроверитьЗаполнениеДляЗапросаДанныхУниверситет(Знач Объект) Экспорт
    РезультатФункции = Новый Структура("Успех, Ошибки", Истина);

    Если НЕ ЗначениеЗаполнено(Объект.ПапкаСтудентов) Тогда
        РезультатФункции.Успех = Ложь;
        ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
                , , "Папка студентов", , , "Не выбрана группа студентов");
        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатФункции.Ошибки, "Объект.ПапкаСтудентов", ТекстСообщения, "");
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(Объект.ПапкаКонтрагентов) Тогда
        РезультатФункции.Успех = Ложь;
        ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
                , , "Папка контрагентов", , , "Не выбрана группа контрагентов");
        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатФункции.Ошибки, "Объект.ПапкаКонтрагентов", ТекстСообщения, "");
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
