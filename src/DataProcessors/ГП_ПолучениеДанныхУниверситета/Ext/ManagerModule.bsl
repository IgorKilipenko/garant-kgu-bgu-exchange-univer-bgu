// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
//  ДанныеЗагрузки - Структура
//  ИдентификаторХранилища - УникальныйИдентификатор, Неопределено
Функция ЗаполнитьДанныеИзУниверситет(Объект, Знач ДанныеЗагрузки, Знач ИдентификаторХранилища = Неопределено) Экспорт
    ИдентификаторХранилища = ?(ИдентификаторХранилища = Неопределено, Новый УникальныйИдентификатор, ИдентификаторХранилища);

    ОрганизацияПоУмолчанию = ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию();

    ОчиститьТаблицыДанныеЗагрузки(Объект);

    Для Каждого СтрокаДанныхПриказов Из ДанныеЗагрузки.Приказы Цикл
        НоваяСтрокаПриказа = Объект.Приказы.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрокаПриказа, СтрокаДанныхПриказов);

        НоваяСтрокаПриказа.Организация = ОрганизацияПоУмолчанию;
        НоваяСтрокаПриказа.НомерПриказа = СтрокаДанныхПриказов.НомерПриказа;
        НоваяСтрокаПриказа.Идентификатор = СтрокаДанныхПриказов.УникальныйИдентификатор;
        НоваяСтрокаПриказа.Представление = СтрокаДанныхПриказов.ПредставлениеСсылки;

        ЗаполнитьТаблицыИндексовСвязейПриказа(Объект.КоллекцияТаблицИдентификаторовСвязей, СтрокаДанныхПриказов);
    КонецЦикла;

    КэшЗагруженныхТаблицСвязанныхОбъектов = Новый Соответствие;
    КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("Приказы", Истина);

    Для Каждого СтрокаДанных Из ДанныеЗагрузки.СвязанныеОбъекты.Факультеты Цикл
        НоваяСтрока = Объект.Факультеты.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);

        НоваяСтрока.Идентификатор = СтрокаДанных.УникальныйИдентификатор;

        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("Факультеты", Истина);
    КонецЦикла;

    Для Каждого СтрокаДанных Из ДанныеЗагрузки.СвязанныеОбъекты.ФизическиеЛицаСтуденты Цикл
        НоваяСтрока = Объект.Студенты.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);

        НоваяСтрока.Идентификатор = СтрокаДанных.УникальныйИдентификатор;

        КэшЗагруженныхТаблицСвязанныхОбъектов.Вставить("ФизическиеЛицаСтуденты", Истина);
    КонецЦикла;

    БуферКоллекцияДополнительныхТаблиц = Новый Структура;
    Для Каждого ТаблицаДанныхКЗ Из ДанныеЗагрузки.СвязанныеОбъекты Цикл
        Если ТипЗнч(ТаблицаДанныхКЗ.Значение) <> Тип("Массив") ИЛИ ТаблицаДанныхКЗ.Значение.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;
        Если КэшЗагруженныхТаблицСвязанныхОбъектов.Получить(ТаблицаДанныхКЗ.Ключ) <> Неопределено Тогда
            Продолжить;
        КонецЕсли;

        ЭтоСправочник = ТаблицаДанныхКЗ.Значение[0].Свойство("Код");
        ЭтоДокумент = НЕ ЭтоСправочник И ТаблицаДанныхКЗ.Значение[0].Свойство("Номер") И ТаблицаДанныхКЗ.Значение[0].Свойство("Дата");

        НоваяТаблицаДанных = Неопределено;
        Если ЭтоСправочник Тогда
            НоваяТаблицаДанных = НовыйТаблицаСправочникаУниверситет(Новый ОписаниеТипов);
        ИначеЕсли ЭтоДокумент Тогда
            НоваяТаблицаДанных = НовыйТаблицаДокументаУниверситет(Новый ОписаниеТипов);
        КонецЕсли;

        Если НоваяТаблицаДанных = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        Для Каждого СтрокаТаблицы Из ТаблицаДанныхКЗ.Значение Цикл
            НоваяСтрока = НоваяТаблицаДанных.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
            НоваяСтрока.Идентификатор = СтрокаТаблицы.УникальныйИдентификатор;
        КонецЦикла;

        БуферКоллекцияДополнительныхТаблиц.Вставить(ТаблицаДанныхКЗ.Ключ, НоваяТаблицаДанных);
    КонецЦикла;

    АдресХранилищаДополнительныхТаблицЗагрузки = ПоместитьВоВременноеХранилище(БуферКоллекцияДополнительныхТаблиц, ИдентификаторХранилища);
    Объект.АдресХранилищаДополнительныхТаблицЗагрузки = АдресХранилищаДополнительныхТаблицЗагрузки;

    Возврат Истина;
КонецФункции

Функция СоздатьОбъектыОбменаПолученныеИзУниверситет(Объект) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения, СообщенияОбОшибках", Истина, Неопределено, Новый Массив);

    ТаблицаПриказов = Объект.Приказы;
    Если ТаблицаПриказов.Количество() = 0 Тогда
        РезультатФункции.Успех = Ложь;
        Возврат РезультатФункции.ТекстСообщения = "Нет данных приказов";
    КонецЕсли;

    ТаблицаФакультетов = Объект.Факультеты;

    ОтменитьТранзакциюПринудительно = Истина; // !!! Только для тестирования
    НачатьТранзакцию();
    Попытка
        РезультатСопоставленияФакультетов = СопоставитьФакультетыПолученныеИзУниверситет(ТаблицаФакультетов);
        Если РезультатСопоставленияФакультетов.Успех = Ложь Тогда
            ВызватьИсключение(РезультатСопоставленияФакультетов.ТекстСообщения); // Отмена транзакции по ошибке сопоставления
        КонецЕсли;

        // !!! Только для тестирования
        Если ОтменитьТранзакциюПринудительно Тогда
            ВызватьИсключение("Транзакция отменена принудительно");
        КонецЕсли;

        ЗафиксироватьТранзакцию();

    Исключение
        ОтменитьТранзакцию();

        РезультатФункции.Успех = Ложь;
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        РезультатФункции.ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
        ЗаписьЖурналаРегистрации(ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяСобытияДляЖурнала(),
            УровеньЖурналаРегистрации.Ошибка, , ,
            РезультатФункции.ТекстСообщения);
    КонецПопытки;

КонецФункции

// Параметры:
//  ТаблицаФакультетов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка Факультет)
//  СоздаватьНовыеЕслиОтсутствует - Булево - Устарела. Не используется при сопоставлении факультетов
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Факультеты - СправочникСсылка.Подразделения
Функция СопоставитьФакультетыПолученныеИзУниверситет(ТаблицаФакультетов, Знач СоздаватьНовыеЕслиОтсутствует = Ложь) Экспорт
    РезультатФункции = Новый Структура("Успех, Факультеты, СообщенияОбОшибках",
            Истина, Новый Массив, Новый Массив);

    КэшСоответствийНаименованийФакультетовБГУ = ПолучитьКэшСоответствийНаименованийФакультетовБГУ();

    Для Каждого СтрокаТаблицы Из ТаблицаФакультетов Цикл
        СтруктураДанныхУниверситет = Новый Структура("Наименование, Идентификатор");
        ЗаполнитьЗначенияСвойств(СтруктураДанныхУниверситет, СтрокаТаблицы);
        СтруктураДанныхУниверситет.Наименование =
            КэшСоответствийНаименованийФакультетовБГУ.Получить(СтруктураДанныхУниверситет.Наименование);
        Если СтруктураДанныхУниверситет.Наименование = Неопределено Тогда
            // Нет данных соответствия
            СтруктураДанныхУниверситет.Наименование = СтрокаТаблицы.Наименование;
        КонецЕсли;

        ТекущийФакультетИБ = Неопределено;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Факультет) = Ложь Тогда
            СтруктураНайденногоФакультета = НайтиФакультетПоДаннымУниверситет(СтруктураДанныхУниверситет);
            Если СтруктураНайденногоФакультета <> Неопределено Тогда
                ТекущийФакультетИБ = СтруктураНайденногоФакультета.Факультет;
            КонецЕсли;
        Иначе
            ТекущийФакультетИБ = СтрокаТаблицы.Факультет;
        КонецЕсли;

        Если ТекущийФакультетИБ <> Неопределено Тогда
            СтрокаТаблицы.Факультет = ТекущийФакультетИБ;
        Иначе
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найден факультет << %1 (Подразделение: %2), Код: %3, Ид: %4 >>",
                    СтрокаТаблицы.Наименование,
                    СтруктураДанныхУниверситет.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Факультет - СправочникСсылка.Подразделения
//      * Код - Строка
//      * Наименование - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиФакультетПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет;
    ТаблицаИдентификаторов = ПолучитьДанныеИдентификаторовДляВидаОбъектаОбмена(ВидОбъектаОбмена,
            Новый Структура("ИдентификаторВнешний", СтруктураДанныхУниверситет.Идентификатор));

    ФильтрСсылокФакультетов = Новый Массив;
    Для Каждого СтрокаИдентификаторов Из ТаблицаИдентификаторов Цикл
        Если СтроковыеФункцииКлиентСервер.СвязьУстарела
            ИЛИ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        УникальныйИдентификаторПоиска = Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор);
        НайденнаяСсылка = Неопределено;
        Если ЗначениеЗаполнено(УникальныйИдентификаторПоиска) Тогда
            НайденнаяСсылка = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор));
        КонецЕсли;

        Если НайденнаяСсылка <> Неопределено И НайденнаяСсылка.Пустая() = Ложь Тогда
            ФильтрСсылокФакультетов.Добавить(НайденнаяСсылка);
        КонецЕсли;
    КонецЦикла;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Факультеты.Ссылка КАК Факультет,
        |   Факультеты.Код КАК Код,
        |   Факультеты.Наименование КАК Наименование,
        |   УникальныйИдентификатор(Факультеты.Ссылка) КАК УникальныйИдентификатор
        |ИЗ
        |   Справочник.Подразделения КАК Факультеты
        |ГДЕ
        |   ИСТИНА
        |   И &УсловияФильтраСсылок
        |   И СокрЛП(НРег(Факультеты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Факультеты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", СокрЛП(НРег(СтруктураДанныхУниверситет.Наименование)));

    УсловияФильтраСсылок = "ИСТИНА";
    Если ФильтрСсылокФакультетов.Количество() > 0 Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Факультеты.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылокФакультетов);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Факультет, Код, Наименование, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьДанныеИдентификаторовДляВидаОбъектаОбмена(Знач ВидОбъектаОбмена, Знач ПараметрыОтбора = Неопределено) Экспорт
    ПараметрыОтбора = ?(ПараметрыОтбора = Неопределено, Новый Структура, ПараметрыОтбора);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_ИдентификаторыОбменаУниверситетБГУ КАК ИдентификаторыОбменаУниверситетБГУ
        |ГДЕ
        |   ИдентификаторыОбменаУниверситетБГУ.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И ИдентификаторыОбменаУниверситетБГУ.СвязьУстарела = ЛОЖЬ
        |   И &ДополнительныеПараметрыОтбора
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ВидОбъектаОбмена);

    ДополнительныеПараметрыОтбора = "ИСТИНА";
    НаименованиеТалицы = "ИдентификаторыОбменаУниверситетБГУ";
    Если ПараметрыОтбора.Свойство("ИдентификаторВнешний") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ИдентификаторВнешний = &ИдентификаторВнешний",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("ИдентификаторВнешний", ПараметрыОтбора.ИдентификаторВнешний);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.Идентификатор = &Идентификатор",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("Идентификатор", ПараметрыОтбора.Идентификатор);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("МинДатаСоздания") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ДатаСоздания => &МинДатаСоздания",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("МинДатаСоздания", ПараметрыОтбора.МинДатаСоздания);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПараметрыОтбора", ДополнительныеПараметрыОтбора);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#Область СозданиеТаблиц

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаПриказы() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Приказы.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаФакультеты() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Факультеты.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаСтуденты() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.Студенты.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаТипыПриказов() Экспорт
    Объект = Обработки.ГП_ПолучениеДанныхУниверситета.Создать();
    Возврат Объект.ТипыПриказов.ВыгрузитьКолонки();
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция НовыйКоллекцияТаблицИдентификаторовСвязей() Экспорт
    РезультатФункции = Новый Структура;

    МассивНаименованийТаблиц = Новый Массив;
    МассивНаименованийТаблиц.Добавить("Факультеты");
    МассивНаименованийТаблиц.Добавить("Студенты");
    МассивНаименованийТаблиц.Добавить("ТипыПриказов");
    МассивНаименованийТаблиц.Добавить("КурсыОбучения");
    МассивНаименованийТаблиц.Добавить("Специальности");
    МассивНаименованийТаблиц.Добавить("ОснованияПоступления");

    Для Каждого ИмяТаблицыКолонки Из МассивНаименованийТаблиц Цикл
        РезультатФункции.Вставить(ИмяТаблицыКолонки, НовыйТаблицаИдентификаторовСвязей());
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ИдентификаторИсточникаСвязи - Строка
//      * ИдентификаторОбъектаСвязи - Строка
Функция НовыйТаблицаИдентификаторовСвязей() Экспорт
    // РезультатФункции = Новый ТаблицаЗначений;
    // РезультатФункции.Колонки.Добавить("ИдентификаторИсточникаСвязи", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    // РезультатФункции.Колонки.Добавить("ИдентификаторОбъектаСвязи", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    // РезультатФункции.Индексы.Добавить("ИдентификаторИсточникаСвязи");
    // Возврат РезультатФункции;

    РезультатФункции = Новый Соответствие;
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СозданиеТаблиц

// Параметры:
//  Наименование - Строка
// Возвращаемое значение:
//  - Массив из СправочникСсылка.Контрагент
Функция НайтиГруппыКонтрагентовПоНаименованию(Знач Наименование) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Контрагенты.Ссылка КАК Контрагент,
        |   Контрагенты.Наименование КАК Наименование,
        |   Контрагенты.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.ЭтоГруппа
        |   И НРег(СокрЛП(Контрагенты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Контрагенты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(Наименование)));
    РезультатЗапроса = Запрос.Выполнить();

    ТаблицаДанных = РезультатЗапроса.Выгрузить();
    Если ТаблицаДанных.Количество() > 1 Тогда
        НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина));
        Если НайденныеСтроки.Количество() < ТаблицаДанных.Количество() Тогда
            Для Каждого СтрокаУдаления Из НайденныеСтроки Цикл
                ТаблицаДанных.Удалить(СтрокаУдаления);
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

    Возврат ТаблицаДанных.ВыгрузитьКолонку("Контрагент");
КонецФункции

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
Процедура ОчиститьТаблицыДанныеЗагрузки(Объект) Экспорт
    Объект.Приказы.Очистить();
    Объект.Факультеты.Очистить();
    Объект.Студенты.Очистить();

    Объект.КоллекцияТаблицИдентификаторовСвязей = НовыйКоллекцияТаблицИдентификаторовСвязей();
    Объект.АдресХранилищаДополнительныхТаблицЗагрузки = "";
КонецПроцедуры

// Параметры:
//  Объект - ОбработкаОбъект.ГП_ПолучениеДанныхУниверситета
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Ошибки - Структура, Неопределено
Функция ПроверитьЗаполнениеДляЗапросаДанныхУниверситет(Знач Объект) Экспорт
    РезультатФункции = Новый Структура("Успех, Ошибки", Истина);

    Если НЕ ЗначениеЗаполнено(Объект.ПапкаСтудентов) Тогда
        РезультатФункции.Успех = Ложь;
        ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
                , , "Папка студентов", , , "Не выбрана группа студентов");
        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатФункции.Ошибки, "Объект.ПапкаСтудентов", ТекстСообщения, "");
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(Объект.ПапкаКонтрагентов) Тогда
        РезультатФункции.Успех = Ложь;
        ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
                , , "Папка контрагентов", , , "Не выбрана группа контрагентов");
        ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(РезультатФункции.Ошибки, "Объект.ПапкаКонтрагентов", ТекстСообщения, "");
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийФакультетовБГУ()
    // РезультатФункции = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийФакультетовПоУмолчанию();
    //
    // Запрос = Новый Запрос;
    // Запрос.Текст =
    //     "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    //     |   СоответствиеНаименований.Наименование КАК НаименованиеБГУ,
    //     |   СоответствиеНаименований.НаименованиеВнешнее КАК НаименованиеУниверситет
    //     |ИЗ
    //     |   РегистрСведений.ГП_СоответствиеНаименованийОбъектовОбменаУниверситетБГУ КАК СоответствиеНаименований
    //     |ГДЕ
    //     |   ИСТИНА
    //     |   И СоответствиеНаименований.ВидОбъектаОбмена = &ВидОбъектаОбмена
    //     |   И СоответствиеНаименований.ВидОбъектаОбменаДополнительный = &ВидОбъектаОбменаДополнительный
    //     |";
    //
    // Запрос.УстановитьПараметр("ВидОбъектаОбмена", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет);
    // Запрос.УстановитьПараметр("ВидОбъектаОбменаДополнительный", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка());
    //
    // РезультатЗапроса = Запрос.Выполнить();
    // ТаблицаДанныхСоответствий = РезультатЗапроса.Выгрузить();
    //
    // СтрокиДляУдаления = Новый Массив;
    // СтрокиДляДобавления = Новый Массив;
    // Для Каждого ТекущаяСтрока Из ТаблицаДанныхСоответствий Цикл
    //     НайденныеСтроки = РезультатФункции.НайтиСтроки(
    //             Новый Структура("НаименованиеУниверситет", ТекущаяСтрока.НаименованиеУниверситет));
    //
    //     Если НайденныеСтроки.Количество() = 0 Тогда
    //         СтрокиДляДобавления.Добавить(ТекущаяСтрока);
    //     Иначе
    //         // Исключение дублей строк идентификаторов
    //         Для Сч = 1 По НайденныеСтроки.Количество() - 1 Цикл
    //             СтрокиДляУдаления.Добавить(НайденныеСтроки[Сч]);
    //         КонецЦикла;
    //
    //         НайденнаяСтрока = НайденныеСтроки[0]; // Дублей быть не должно
    //
    //         Если ПустаяСтрока(ТекущаяСтрока.НаименованиеБГУ) Тогда
    //             // Условие при котором соответствие ао умолчанию должно прекратить действие
    //             СтрокиДляУдаления.Добавить(НайденнаяСтрока);
    //         Иначе
    //             // Переопределение соответствия по умолчанию
    //             НайденнаяСтрока.НаименованиеБГУ = ТекущаяСтрока.НаименованиеБГУ;
    //         КонецЕсли;
    //     КонецЕсли;
    // КонецЦикла;
    //
    // // Удаление неиспользуемых соответствий
    // Для Каждого СтрокаУдаления Из СтрокиДляУдаления Цикл
    //     РезультатФункции.Удалить(СтрокаУдаления);
    // КонецЦикла;
    //
    // // Добавление соответствий установленных в регистре
    // Для Каждого СтрокаДобавления Из СтрокиДляДобавления Цикл
    //     НоваяСтрока = РезультатФункции.Добавить();
    //     ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДобавления);
    // КонецЦикла;
    //
    // РезультатФункции.Свернуть("НаименованиеБГУ, НаименованиеУниверситет");
    //
    // Возврат РезультатФункции;

    ТаблицаСоответствийПоУмолчанию = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийФакультетовПоУмолчанию();

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СоответствиеНаименований.Наименование КАК НаименованиеБГУ,
        |   СоответствиеНаименований.НаименованиеВнешнее КАК НаименованиеУниверситет
        |ИЗ
        |   РегистрСведений.ГП_СоответствиеНаименованийОбъектовОбменаУниверситетБГУ КАК СоответствиеНаименований
        |ГДЕ
        |   ИСТИНА
        |   И СоответствиеНаименований.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И СоответствиеНаименований.ВидОбъектаОбменаДополнительный = &ВидОбъектаОбменаДополнительный
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет);
    Запрос.УстановитьПараметр("ВидОбъектаОбменаДополнительный", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаСоответствийРегистра = РезультатЗапроса.Выгрузить();

    РезультатФункции = Новый Соответствие;
    Для Каждого ТекущаяСтрока Из ТаблицаСоответствийПоУмолчанию Цикл
        РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
    КонецЦикла;
    Для Каждого ТекущаяСтрока Из ТаблицаСоответствийРегистра Цикл
        РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьТаблицыИндексовСвязейПриказа(КоллекцияТаблицИдентификаторовСвязей, Знач СтруктураПриказа) Экспорт
    Для Каждого ЭлементКЗ Из КоллекцияТаблицИдентификаторовСвязей Цикл
        КэшПсевдонимовНаименованийТаблиц = ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет();
        НаименованияТаблицыУниверситет = КэшПсевдонимовНаименованийТаблиц.Получить(ЭлементКЗ.Ключ);
        НаименованияТаблицыУниверситет = ?(НаименованияТаблицыУниверситет = Неопределено,
                ЭлементКЗ.Ключ, НаименованияТаблицыУниверситет);

        Если НЕ СтруктураПриказа.Свойство(НаименованияТаблицыУниверситет) Тогда
            Продолжить;
        КонецЕсли;

        МассивИдентификаторовПриказа = СтруктураПриказа[НаименованияТаблицыУниверситет];
        ТаблицаИдентификации = КоллекцияТаблицИдентификаторовСвязей[ЭлементКЗ.Ключ];
        ЗаполняемыйМассивСвязей = ТаблицаИдентификации.Получить(СтруктураПриказа.УникальныйИдентификатор);
        Если ЗаполняемыйМассивСвязей = Неопределено Тогда
            ЗаполняемыйМассивСвязей = Новый Массив;
            ТаблицаИдентификации.Вставить(СтруктураПриказа.УникальныйИдентификатор, ЗаполняемыйМассивСвязей);
        КонецЕсли;
        Для Каждого ТекущийИдентификатор Из МассивИдентификаторовПриказа Цикл
            ЗаполняемыйМассивСвязей.Добавить(ТекущийИдентификатор);
        КонецЦикла;
    КонецЦикла;

    Возврат Истина;
КонецФункции

Функция НовыйТаблицаСправочникаУниверситет(Знач ТипСсылки)
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипСсылки);
    РезультатФункции.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

Функция НовыйТаблицаДокументаУниверситет(Знач ТипСсылки)
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипСсылки);
    РезультатФункции.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет()
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить("Студенты", "ФизическиеЛицаСтуденты");

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
