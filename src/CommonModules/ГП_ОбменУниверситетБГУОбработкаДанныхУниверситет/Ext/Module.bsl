// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

#Область СопоставлениеДанных

// Параметры:
//  ТаблицаФакультетов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка Факультет)
//  СоздаватьНовыеЕслиОтсутствует - Булево - Устарела. Не используется при сопоставлении факультетов
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Факультеты - СправочникСсылка.Подразделения
Функция СопоставитьФакультетыПолученныеИзУниверситет(ТаблицаФакультетов, Знач СоздаватьНовыеЕслиОтсутствует = Ложь) Экспорт
    РезультатФункции = Новый Структура("Успех, Факультеты, СообщенияОбОшибках",
            Истина, Новый Массив, Новый Массив);

    КэшСоответствийНаименованийФакультетовБГУ = ПолучитьКэшСоответствийНаименованийФакультетовБГУ();

    Для Каждого СтрокаТаблицы Из ТаблицаФакультетов Цикл
        СтруктураДанныхУниверситет = Новый Структура("Наименование, Идентификатор");
        ЗаполнитьЗначенияСвойств(СтруктураДанныхУниверситет, СтрокаТаблицы);
        СтруктураДанныхУниверситет.Наименование =
            КэшСоответствийНаименованийФакультетовБГУ.Получить(СтруктураДанныхУниверситет.Наименование);
        Если СтруктураДанныхУниверситет.Наименование = Неопределено Тогда
            // Нет данных соответствия
            СтруктураДанныхУниверситет.Наименование = СтрокаТаблицы.Наименование;
        КонецЕсли;

        ТекущийФакультетИБ = Неопределено;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Факультет) = Ложь Тогда
            СтруктураНайденногоФакультета = НайтиФакультетПоДаннымУниверситет(СтруктураДанныхУниверситет);
            Если СтруктураНайденногоФакультета <> Неопределено Тогда
                ТекущийФакультетИБ = СтруктураНайденногоФакультета.Факультет;
            КонецЕсли;
        Иначе
            ТекущийФакультетИБ = СтрокаТаблицы.Факультет;
        КонецЕсли;

        Если ТекущийФакультетИБ <> Неопределено Тогда
            СтрокаТаблицы.Факультет = ТекущийФакультетИБ;
        Иначе
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найден факультет << %1 (Подразделение: %2), Код: %3, Ид: %4 >>",
                    СтрокаТаблицы.Наименование,
                    СтруктураДанныхУниверситет.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаСтудентов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонки Студент, Контрагент, ФизическоеЛицо)
//  ДополнительныеДанные - Структура
//  СоздаватьНовыеЕслиОтсутствует - Булево
//  Организация - СправочникСсылка.Организации, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Студенты - СправочникСсылка.Студенты
Функция СопоставитьСтудентовПолученныеИзУниверситет(
        ТаблицаСтудентов, Знач ДополнительныеДанные, Знач СоздаватьНовыеЕслиОтсутствует = Ложь, Организация = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, Студенты, СообщенияОбОшибках",
            Истина, Новый Массив, Новый Массив);

    Организация = ?(Организация = Неопределено, ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию(), Организация);
    РодительСтудентов = ?(ДополнительныеДанные.Свойство("РодительСтудентов"), ДополнительныеДанные.РодительСтудентов, Неопределено);
    РодительКонтрагентов = ?(ДополнительныеДанные.Свойство("РодительКонтрагентов"), ДополнительныеДанные.РодительКонтрагентов, Неопределено);
    ПрефиксКодаСтудентов = ПолучитьПрефиксДляСозданияОбъектовИзУниверситет();
    ТипКонтрагентаФизЛицо = ПолучитьТипКонтрагентаФизЛицо();

    Для Каждого СтрокаТаблицы Из ТаблицаСтудентов Цикл
        ЭтоНовыйСтудент = Ложь;
        СтудентОбъект = Неопределено;
        КонтрагентОбъект = Неопределено;
        ТребуетсяЗаписатьКонтрагента = Ложь;
        ТребуетсяЗаписатьСтудента = Ложь;

        СтруктураСтудента = НайтиСтудентаПоДаннымУниверситет(СтрокаТаблицы, Неопределено, Ложь);

        Если СтруктураСтудента = Неопределено Тогда
            Если СоздаватьНовыеЕслиОтсутствует = Истина Тогда
                СтруктураСтудента = Новый Структура("Студент, Контрагент, ФизическоеЛицо");
                ЭтоНовыйСтудент = Истина;

                СтудентОбъект = Справочники.Студенты.СоздатьЭлемент();
                СтруктураСтудента.Студент = Справочники.Студенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
                СтудентОбъект.УстановитьСсылкуНового(СтруктураСтудента.Студент);
                СтудентОбъект.Наименование = СтрокаТаблицы.Наименование;
                СтудентОбъект.Организация = Организация;
                СтудентОбъект.Код = СтрШаблон("%1%2", ПрефиксКодаСтудентов, СтрокаТаблицы.Код);
                СтудентОбъект.Комментарий = СтрокаТаблицы.Код + "/" + СтрокаТаблицы.СНИЛС;
                Если РодительСтудентов <> Неопределено Тогда
                    СтудентОбъект.Родитель = РодительСтудентов;
                КонецЕсли;
                
                ТребуетсяЗаписатьСтудента = Истина;
            КонецЕсли;
        КонецЕсли;

        Если СтруктураСтудента <> Неопределено Тогда
            ТребуетСозданияКонтрагента = Ложь;
            Если ЭтоНовыйСтудент = Истина ИЛИ (СоздаватьНовыеЕслиОтсутствует И СтруктураСтудента.Контрагент.Пустая()) Тогда
                ТребуетСозданияКонтрагента = Истина;
            КонецЕсли;

            Если ТребуетСозданияКонтрагента = Истина Тогда
                КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
                СтруктураСтудента.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
                КонтрагентОбъект.УстановитьСсылкуНового(СтруктураСтудента.Контрагент);
                КонтрагентОбъект.Наименование = СтрокаТаблицы.Наименование;
                КонтрагентОбъект.ТипКонтрагента = ТипКонтрагентаФизЛицо;
                КонтрагентОбъект.ЮридическоеФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
                Если РодительКонтрагентов <> Неопределено Тогда
                    КонтрагентОбъект.Родитель = РодительКонтрагентов;
                КонецЕсли;

                СтудентОбъект.Контрагент = СтруктураСтудента.Контрагент;

                ТребуетсяЗаписатьСтудента = Истина;
                ТребуетсяЗаписатьКонтрагента = Истина;

            ИначеЕсли НРег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
                    СтруктураСтудента.Контрагент, "Наименование")) <> НРег(СтрокаТаблицы.Наименование) Тогда

                КонтрагентОбъект = СтруктураСтудента.Контрагент.ПолучитьОбъект();
                КонтрагентОбъект.Наименование = СтрокаТаблицы.Наименование;

                ТребуетсяЗаписатьКонтрагента = Истина;
            КонецЕсли;

            Если ТребуетсяЗаписатьКонтрагента Тогда
                КонтрагентОбъект.Записать();
            КонецЕсли;
            Если ТребуетсяЗаписатьСтудента Тогда
                СтудентОбъект.Записать();
            КонецЕсли;

            СтрокаТаблицы.Студент = СтруктураСтудента.Студент;
            СтрокаТаблицы.Контрагент = СтруктураСтудента.Контрагент;
            СтрокаТаблицы.ФизическоеЛицо = СтруктураСтудента.ФизическоеЛицо;

            РезультатФункции.Студенты.Добавить(СтрокаТаблицы.Студент);

        Иначе
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не удалось найти студента: << Наименование: %1, Код: %2, СНИЛС: %3 >>",
                    СтрокаТаблицы.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.СНИЛС));
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СопоставлениеДанных

#Область ПоискОбъектов

// Параметры:
//  Наименование - Строка
// Возвращаемое значение:
//  - Массив из СправочникСсылка.Контрагент
Функция НайтиГруппыКонтрагентовПоНаименованию(Знач Наименование) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Контрагенты.Ссылка КАК Контрагент,
        |   Контрагенты.Наименование КАК Наименование,
        |   Контрагенты.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.ЭтоГруппа
        |   И НРег(СокрЛП(Контрагенты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Контрагенты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(Наименование)));
    РезультатЗапроса = Запрос.Выполнить();

    ТаблицаДанных = РезультатЗапроса.Выгрузить();
    Если ТаблицаДанных.Количество() > 1 Тогда
        НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина));
        Если НайденныеСтроки.Количество() < ТаблицаДанных.Количество() Тогда
            Для Каждого СтрокаУдаления Из НайденныеСтроки Цикл
                ТаблицаДанных.Удалить(СтрокаУдаления);
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

    Возврат ТаблицаДанных.ВыгрузитьКолонку("Контрагент");
КонецФункции

// Параметры:
//  ИдентификаторУниверситет - Строка
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  МенеджерОбъекта - Произвольный
// Возвращаемое значение:
//  - Массив - Ссылка
Функция ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(Знач ИдентификаторУниверситет, ВидОбъектаОбмена, МенеджерОбъекта) Экспорт
    РезультатФункции = Новый Массив;

    ТаблицаИдентификаторов = ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(ВидОбъектаОбмена,
            Новый Структура("ИдентификаторВнешний", ИдентификаторУниверситет));

    Для Каждого СтрокаИдентификаторов Из ТаблицаИдентификаторов Цикл
        Если СтроковыеФункцииКлиентСервер.СвязьУстарела
            ИЛИ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        УникальныйИдентификаторПоиска = Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор);
        НайденнаяСсылка = Неопределено;
        Если ЗначениеЗаполнено(УникальныйИдентификаторПоиска) Тогда
            НайденнаяСсылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор));
        КонецЕсли;

        Если НайденнаяСсылка <> Неопределено И НайденнаяСсылка.Пустая() = Ложь Тогда
            РезультатФункции.Добавить(НайденнаяСсылка);
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Факультет - СправочникСсылка.Подразделения
//      * Код - Строка
//      * Наименование - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиФакультетПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет;
    ТаблицаИдентификаторов = ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(ВидОбъектаОбмена,
            Новый Структура("ИдентификаторВнешний", СтруктураДанныхУниверситет.Идентификатор));

    ФильтрСсылокФакультетов = Новый Массив;
    Для Каждого СтрокаИдентификаторов Из ТаблицаИдентификаторов Цикл
        Если СтроковыеФункцииКлиентСервер.СвязьУстарела
            ИЛИ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        УникальныйИдентификаторПоиска = Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор);
        НайденнаяСсылка = Неопределено;
        Если ЗначениеЗаполнено(УникальныйИдентификаторПоиска) Тогда
            НайденнаяСсылка = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор));
        КонецЕсли;

        Если НайденнаяСсылка <> Неопределено И НайденнаяСсылка.Пустая() = Ложь Тогда
            ФильтрСсылокФакультетов.Добавить(НайденнаяСсылка);
        КонецЕсли;
    КонецЦикла;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Факультеты.Ссылка КАК Факультет,
        |   Факультеты.Код КАК Код,
        |   Факультеты.Наименование КАК Наименование,
        |   УникальныйИдентификатор(Факультеты.Ссылка) КАК УникальныйИдентификатор
        |ИЗ
        |   Справочник.Подразделения КАК Факультеты
        |ГДЕ
        |   ИСТИНА
        |   И &УсловияФильтраСсылок
        |   И СокрЛП(НРег(Факультеты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Факультеты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", СокрЛП(НРег(СтруктураДанныхУниверситет.Наименование)));

    УсловияФильтраСсылок = "ИСТИНА";
    Если ФильтрСсылокФакультетов.Количество() > 0 Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Факультеты.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылокФакультетов);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Факультет, Код, Наименование, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура
//      * Код - Строка - Без префикса обмена Университет-БГУ (RL)
//      * Наименование - Строка
//      * СНИЛС - Строка
//      * Идентификатор - Строка - Внешний идентификатор (Идентификатор базы Университет)
//  ГруппаСтудентов - СправочникСсылка.Студенты, Неопределено
//  СтрогийОтборПоСНИЛС - Булево - По умолчанию Ложь
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Студент - СправочникСсылка.Подразделения
//      * Код - Строка
//      * Наименование - Строка
//      * СНИЛС - Строка.Контрагенты
//      * Контрагент - СправочникСсылка.Контрагенты
//      * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица, Неопределено
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиСтудентаПоДаннымУниверситет(
        Знач СтруктураДанныхУниверситет, Знач ГруппаСтудентов = Неопределено, СтрогийОтборПоСНИЛС = Ложь) Экспорт

    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.КонтрагентСтудента;

    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.Студенты);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Ссылка КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   ЕСТЬNULL(ФизическиеЛица.Ссылка, НЕОПРЕДЕЛЕНО) КАК ФизическоеЛицо,
        |   ЕСТЬNULL(ФизическиеЛица.СтраховойНомерПФР, НЕОПРЕДЕЛЕНО) КАК СНИЛС,
        |   ВЫРАЗИТЬ(Студенты.Комментарий КАК СТРОКА(100)) КАК Комментарий,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА НРег(СокрЛП(Студенты.Наименование)) = &Наименование ТОГДА 1
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию
        |ПОМЕСТИТЬ ВТ_Студенты_Подготовка
        |ИЗ
        |   Справочник.Студенты КАК Студенты
        |   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
        |       ПО Студенты.Контрагент = Контрагенты.Ссылка
        |   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
        |       ПО НЕ Контрагенты.Ссылка ЕСТЬ NULL
        |       И Контрагенты.ЮридическоеФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
        |       И Контрагенты.ЮридическоеФизическоеЛицо = ФизическиеЛица.Ссылка
        |ГДЕ
        |   ИСТИНА
        |   И Студенты.ЭтоГруппа = ЛОЖЬ
        |   И &ДополнительноеУсловиеГруппы
        |   И &УсловияФильтраСсылок
        |   И &ДополнительноеУсловиеПоСНИЛС
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Студент КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   Студенты.ФизическоеЛицо КАК ФизическоеЛицо,
        |   Студенты.СНИЛС КАК СНИЛС,
        |   Студенты.Комментарий КАК Комментарий,
        |   Студенты.ПриоритетПоНаименованию КАК ПриоритетПоНаименованию,
        |   Студенты.ПриоритетПоФильтруСсылок КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА &СНИЛС <> """" И Студенты.СНИЛС = &СНИЛС ТОГДА 10
        |       КОГДА &СНИЛС <> """" И Студенты.Комментарий ПОДОБНО (""%/"" + &СНИЛС) ТОГДА (&МинимальныйПриоритетОтбора + 2)
        |       КОГДА Студенты.СНИЛС = &СНИЛС ТОГДА 0
        |       ИНАЧЕ -1
        |   КОНЕЦ КАК ПриоритетПоСНИЛС,
        |   ВЫБОР
        |       КОГДА &КодВнешний <> """" И Студенты.Комментарий ПОДОБНО (&КодВнешний + ""/%"") ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       КОГДА СокрЛП(Студенты.Код) = &Код ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ -1
        |   КОНЕЦ КАК ПриоритетПоКоду
        |ПОМЕСТИТЬ ВТ_Результат_СПриоритетами
        |ИЗ
        |   ВТ_Студенты_Подготовка КАК Студенты
        |ГДЕ
        |   ИСТИНА
        |   // И СокрЛП(Студенты.Код) = &Код
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Студент КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   Студенты.ФизическоеЛицо КАК ФизическоеЛицо,
        |   Студенты.СНИЛС КАК СНИЛС,
        |   Студенты.Комментарий КАК Комментарий,
        |   УникальныйИдентификатор(Студенты.Студент) КАК УникальныйИдентификатор,
        |   Студенты.ПриоритетПоНаименованию КАК ПриоритетПоНаименованию,
        |   Студенты.ПриоритетПоФильтруСсылок КАК ПриоритетПоФильтруСсылок,
        |   Студенты.ПриоритетПоСНИЛС КАК ПриоритетПоСНИЛС,
        |   Студенты.ПриоритетПоКоду КАК ПриоритетПоКоду,
        |   Студенты.ПриоритетПоНаименованию
        |       + Студенты.ПриоритетПоФильтруСсылок
        |       + Студенты.ПриоритетПоСНИЛС
        |       + Студенты.ПриоритетПоКоду КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |   ВТ_Результат_СПриоритетами КАК Студенты
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   ВТ_Результат КАК Студенты
        |ГДЕ
        |   Студенты.Приоритет > &МинимальныйПриоритетОтбора
        |
        |УПОРЯДОЧИТЬ ПО
        |   Студенты.Приоритет УБЫВ,
        |   Студенты.Студент УБЫВ
        |";

    Запрос.УстановитьПараметр("Код", СтрШаблон("%1%2",
            ПолучитьПрефиксДляСозданияОбъектовИзУниверситет(),
            СокрЛП(СтруктураДанныхУниверситет.Код)));
    Запрос.УстановитьПараметр("КодВнешний", СокрЛП(СтруктураДанныхУниверситет.Код));
    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(СтруктураДанныхУниверситет.Наименование)));
    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);

    ДополнительноеУсловиеПоСНИЛС = "ИСТИНА";
    Если СтрогийОтборПоСНИЛС = Истина Тогда
        ДополнительноеУсловиеПоСНИЛС = СтрШаблон(
                "%1 И
                |   ВЫБОР
                |       КОГДА ФизическиеЛица.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА
                |       КОГДА ФизическиеЛица.СтраховойНомерПФР <> """" ТОГДА  ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
                |   КОНЕЦ", ДополнительноеУсловиеПоСНИЛС);
    КонецЕсли;
    Запрос.УстановитьПараметр("СНИЛС", СтруктураДанныхУниверситет.СНИЛС);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеПоСНИЛС", ДополнительноеУсловиеПоСНИЛС);

    ДополнительноеУсловиеГруппы = "ИСТИНА";
    Если ГруппаСтудентов <> Неопределено Тогда
        ДополнительноеУсловиеГруппы = СтрШаблон(
                "%1 И Студенты.Родитель = &ГруппаСтудентов", ДополнительноеУсловиеГруппы);
        Запрос.УстановитьПараметр("ГруппаСтудентов", ГруппаСтудентов);
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеГруппы", ДополнительноеУсловиеГруппы);

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Студенты.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Студент, Код, Наименование, Контрагент, ФизическоеЛицо, СНИЛС, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПоискОбъектов

#Область СоответствияОбъектов

Функция ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить("Студенты", "ФизическиеЛицаСтуденты");

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийФакультетовБГУ() Экспорт
    ТаблицаСоответствийПоУмолчанию = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийФакультетовПоУмолчанию();

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СоответствиеНаименований.Наименование КАК НаименованиеБГУ,
        |   СоответствиеНаименований.НаименованиеВнешнее КАК НаименованиеУниверситет
        |ИЗ
        |   РегистрСведений.ГП_СоответствиеНаименованийОбъектовОбменаУниверситетБГУ КАК СоответствиеНаименований
        |ГДЕ
        |   ИСТИНА
        |   И СоответствиеНаименований.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И СоответствиеНаименований.ВидОбъектаОбменаДополнительный = &ВидОбъектаОбменаДополнительный
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет);
    Запрос.УстановитьПараметр("ВидОбъектаОбменаДополнительный", ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка());

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаСоответствийРегистра = РезультатЗапроса.Выгрузить();

    РезультатФункции = Новый Соответствие;
    Для Каждого ТекущаяСтрока Из ТаблицаСоответствийПоУмолчанию Цикл
        РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
    КонецЦикла;
    Для Каждого ТекущаяСтрока Из ТаблицаСоответствийРегистра Цикл
        РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  ПараметрыОтбора - Структура
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Идентификатор - Строка
//      * ИдентификаторВнешний - Строка
Функция ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(Знач ВидОбъектаОбмена, Знач ПараметрыОтбора = Неопределено) Экспорт
    ПараметрыОтбора = ?(ПараметрыОтбора = Неопределено, Новый Структура, ПараметрыОтбора);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_ИдентификаторыОбменаУниверситетБГУ КАК ИдентификаторыОбменаУниверситетБГУ
        |ГДЕ
        |   ИдентификаторыОбменаУниверситетБГУ.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И ИдентификаторыОбменаУниверситетБГУ.СвязьУстарела = ЛОЖЬ
        |   И &ДополнительныеПараметрыОтбора
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ВидОбъектаОбмена);

    ДополнительныеПараметрыОтбора = "ИСТИНА";
    НаименованиеТалицы = "ИдентификаторыОбменаУниверситетБГУ";
    Если ПараметрыОтбора.Свойство("ИдентификаторВнешний") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ИдентификаторВнешний = &ИдентификаторВнешний",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("ИдентификаторВнешний", ПараметрыОтбора.ИдентификаторВнешний);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.Идентификатор = &Идентификатор",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("Идентификатор", ПараметрыОтбора.Идентификатор);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("МинДатаСоздания") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ДатаСоздания => &МинДатаСоздания",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("МинДатаСоздания", ПараметрыОтбора.МинДатаСоздания);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПараметрыОтбора", ДополнительныеПараметрыОтбора);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СоответствияОбъектов

#Область КонструкторыОбъектов

Функция НовыйТаблицаСправочникаУниверситет(Знач ТипСсылки) Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипСсылки);
    РезультатФункции.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

Функция НовыйТаблицаДокументаУниверситет(Знач ТипСсылки) Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипСсылки);
    РезультатФункции.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ИдентификаторИсточникаСвязи - Строка
//      * ИдентификаторОбъектаСвязи - Строка
Функция НовыйТаблицаИдентификаторовСвязей() Экспорт
    РезультатФункции = Новый Соответствие;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция НовыйКоллекцияТаблицИдентификаторовСвязей() Экспорт
    РезультатФункции = Новый Структура;

    МассивНаименованийТаблиц = Новый Массив;
    МассивНаименованийТаблиц.Добавить("Факультеты");
    МассивНаименованийТаблиц.Добавить("Студенты");
    МассивНаименованийТаблиц.Добавить("ТипыПриказов");
    МассивНаименованийТаблиц.Добавить("КурсыОбучения");
    МассивНаименованийТаблиц.Добавить("Специальности");
    МассивНаименованийТаблиц.Добавить("ОснованияПоступления");

    Для Каждого ИмяТаблицыКолонки Из МассивНаименованийТаблиц Цикл
        РезультатФункции.Вставить(ИмяТаблицыКолонки, НовыйТаблицаИдентификаторовСвязей());
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ИдентификаторПриказа - Строка
//      * ИдентификаторФакультета - Строка
//      * ИдентификаторОснованияПоступления - Строка
//      * ИдентификаторТипаПриказа - Строка
//      * ИдентификаторСпециальности - Строка
Функция НовыйТаблицаИдентификаторовОбщихДанныхПриказа() Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    ТипКолонкиИдентификатора = ОбщегоНазначения.ОписаниеТипаСтрока(100);
    РезультатФункции.Колонки.Добавить("ИдентификаторПриказа", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторФакультета", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторОснованияПоступления", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторТипаПриказа", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторКурсаОбучения", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторСпециальности", ТипКолонкиИдентификатора);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // КонструкторыОбъектов

#Область ЗаполнениеТаблицИзСырыхДанныхУниверситет

Функция ЗаполнитьТаблицыИдентификаторовСвязейПриказа(КоллекцияТаблицИдентификаторовСвязей, Знач СтруктураПриказа) Экспорт
    Для Каждого ЭлементКЗ Из КоллекцияТаблицИдентификаторовСвязей Цикл
        КэшПсевдонимовНаименованийТаблиц = ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет();
        НаименованияТаблицыУниверситет = КэшПсевдонимовНаименованийТаблиц.Получить(ЭлементКЗ.Ключ);
        НаименованияТаблицыУниверситет = ?(НаименованияТаблицыУниверситет = Неопределено,
                ЭлементКЗ.Ключ, НаименованияТаблицыУниверситет);

        Если НЕ СтруктураПриказа.Свойство(НаименованияТаблицыУниверситет) Тогда
            Продолжить;
        КонецЕсли;

        МассивИдентификаторовПриказа = СтруктураПриказа[НаименованияТаблицыУниверситет];
        ТаблицаИдентификации = КоллекцияТаблицИдентификаторовСвязей[ЭлементКЗ.Ключ];
        ЗаполняемыйМассивСвязей = ТаблицаИдентификации.Получить(СтруктураПриказа.УникальныйИдентификатор);
        Если ЗаполняемыйМассивСвязей = Неопределено Тогда
            ЗаполняемыйМассивСвязей = Новый Массив;
            ТаблицаИдентификации.Вставить(СтруктураПриказа.УникальныйИдентификатор, ЗаполняемыйМассивСвязей);
        КонецЕсли;
        Для Каждого ТекущийИдентификатор Из МассивИдентификаторовПриказа Цикл
            ЗаполняемыйМассивСвязей.Добавить(ТекущийИдентификатор);
        КонецЦикла;
    КонецЦикла;

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ЗаполнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, Знач ИдентификаторПриказа, Знач ДанныеИдентификаторов, Знач Очищать = Истина) Экспорт

    Если Очищать = Истина Тогда
        ТаблицаИдентификаторов.Очистить();
    КонецЕсли;

    КоличествоДобавленных = 0;
    Для Каждого СтрокаДанных Из ДанныеИдентификаторов Цикл
        НоваяСтрока = ТаблицаИдентификаторов.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
        НоваяСтрока.ИдентификаторПриказа = ИдентификаторПриказа;
        КоличествоДобавленных = КоличествоДобавленных + 1;
    КонецЦикла;

    Возврат КоличествоДобавленных;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ДополнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, Знач ИдентификаторПриказа, Знач ДанныеИдентификаторов) Экспорт

    Возврат ЗаполнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, ИдентификаторПриказа, ДанныеИдентификаторов, Ложь);
КонецФункции

#КонецОбласти // ЗаполнениеТаблицИзСырыхДанныхУниверситет

#Область Константы

// Возвращаемое значение:
//  - Строка
Функция ПолучитьПрефиксДляСозданияОбъектовИзУниверситет() Экспорт
    Возврат "RL";
КонецФункции

// Возвращаемое значение:
//  СправочникСсылка.ТипыКонтрагентов
Функция ПолучитьТипКонтрагентаФизЛицо() Экспорт
    Возврат Справочники.ТипыКонтрагентов.НайтиПоКоду("7");
КонецФункции

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
