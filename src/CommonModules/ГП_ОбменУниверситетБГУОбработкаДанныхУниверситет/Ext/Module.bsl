// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

#Область СопоставлениеДанных

// Параметры:
//  ТаблицаФакультетов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка Факультет)
//  СоздаватьНовыеЕслиОтсутствует - Булево - Устарела. Не используется при сопоставлении факультетов
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Факультеты - СправочникСсылка.Подразделения
Функция СопоставитьФакультетыПолученныеИзУниверситет(ТаблицаФакультетов, Знач СоздаватьНовыеЕслиОтсутствует = Ложь) Экспорт
    РезультатФункции = Новый Структура("Успех, Факультеты, СообщенияОбОшибках",
            Истина, Новый Массив, Новый Массив);

    КэшСоответствийНаименованийФакультетовБГУ = ПолучитьКэшСоответствийНаименованийФакультетовБГУ();

    Для Каждого СтрокаТаблицы Из ТаблицаФакультетов Цикл
        СтруктураДанныхУниверситет = Новый Структура("Наименование, Идентификатор");
        ЗаполнитьЗначенияСвойств(СтруктураДанныхУниверситет, СтрокаТаблицы);
        СтруктураДанныхУниверситет.Наименование =
            КэшСоответствийНаименованийФакультетовБГУ.Получить(СтруктураДанныхУниверситет.Наименование);
        Если СтруктураДанныхУниверситет.Наименование = Неопределено Тогда
            // Нет данных соответствия
            СтруктураДанныхУниверситет.Наименование = СтрокаТаблицы.Наименование;
        КонецЕсли;

        ТекущийФакультетИБ = Неопределено;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Факультет) = Ложь ИЛИ НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Факультет) Тогда
            СтруктураНайденногоФакультета = НайтиФакультетПоДаннымУниверситет(СтруктураДанныхУниверситет);
            Если СтруктураНайденногоФакультета <> Неопределено Тогда
                ТекущийФакультетИБ = СтруктураНайденногоФакультета.Факультет;
            КонецЕсли;
        Иначе
            ТекущийФакультетИБ = СтрокаТаблицы.Факультет;
        КонецЕсли;

        Если ТекущийФакультетИБ <> Неопределено Тогда
            СтрокаТаблицы.Факультет = ТекущийФакультетИБ;
        Иначе
            СтрокаТаблицы.Факультет = Справочники.Подразделения.ПустаяСсылка();
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найден факультет << %1 (Подразделение: %2), Код: %3, Ид: %4 >>",
                    СтрокаТаблицы.Наименование,
                    СтруктураДанныхУниверситет.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));

            // Продолжаем выполнение цикла только для сбора всех ошибок
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка при сопоставлении факультетов.
                    |Не все факультеты удалось идентифицировать");

            Продолжить;
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаТиповПриказов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка ВидПриказа)
//      * ВидПриказа - СправочникСсылка.ВидыПриказовОбразование
//      * Код - Строка
//      * Наименование - Строка
//      * Идентификатор - Строка
//  СоздаватьНовыеЕслиОтсутствует - Булево
//  ДанныеТранзакции - Структура, Неопределено
//      * Идентификатор - Строка
//      * Дата - Дата
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
//      * СоответствиеСозданныхОбъектов - Соответствие
Функция СопоставитьВидыПриказовПолученныеИзУниверситет(
        ТаблицаТиповПриказов, Знач СоздаватьНовыеЕслиОтсутствует = Ложь, Знач ДанныеТранзакции = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("СоответствиеСозданныхОбъектов", Новый Соответствие);
    РезультатФункции.Вставить("СообщенияОбОшибках", Новый Массив);

    Если ДанныеТранзакции = Неопределено Тогда
        ДанныеТранзакции = Новый Структура("Идентификатор, Дата", Новый УникальныйИдентификатор, ТекущаяДатаСеанса());
    КонецЕсли;

    КэшСоответствийНаименованийВидовПриказовБГУ = ПолучитьКэшСоответствийНаименованийВидовПриказовБГУ();

    Для Каждого СтрокаТаблицы Из ТаблицаТиповПриказов Цикл
        // Заполнение данных псевдонима наименования
        СтруктураДанныхУниверситет = Новый Структура("Наименование, Идентификатор");
        ЗаполнитьЗначенияСвойств(СтруктураДанныхУниверситет, СтрокаТаблицы);
        СтруктураДанныхУниверситет.Наименование =
            КэшСоответствийНаименованийВидовПриказовБГУ.Получить(СтруктураДанныхУниверситет.Наименование);
        Если СтруктураДанныхУниверситет.Наименование = Неопределено Тогда
            // Нет данных соответствия
            СтруктураДанныхУниверситет.Наименование = СтрокаТаблицы.Наименование;
        КонецЕсли;

        ТекущийВидПриказаИБ = Неопределено;
        СозданНовыйОбъект = Ложь;
        Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПриказа) И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.ВидПриказа) Тогда
            // Соответствие объекта установлено ранее
            ТекущийВидПриказаИБ = СтрокаТаблицы.ВидПриказа;

        Иначе
            // Поиск соответствия в ИБ
            СтруктураНайденногоВидаПриказа = НайтиВидПриказаПоДаннымУниверситет(СтруктураДанныхУниверситет);
            Если СтруктураНайденногоВидаПриказа <> Неопределено Тогда
                ТекущийВидПриказаИБ = СтруктураНайденногоВидаПриказа.ВидПриказа;
            ИначеЕсли СоздаватьНовыеЕслиОтсутствует Тогда
                // Создание нового вида приказа
                НовыйВидПриказаОбъект = Справочники.ВидыПриказовОбразование.СоздатьЭлемент();
                НовыйВидПриказаОбъект.Наименование = СтруктураДанныхУниверситет.Наименование;

                НовыйВидПриказаОбъект.Записать();

                // Запись соответствий идентификаторов обмена в регистр
                ЗаписатьСоответствияИдентификаторовОбмена(
                    Строка(НовыйВидПриказаОбъект.Ссылка.УникальныйИдентификатор()),
                    СтрокаТаблицы.Идентификатор,
                    ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ВидПриказа,
                    ДанныеТранзакции.Идентификатор,
                    ДанныеТранзакции.Дата);

                СозданНовыйОбъект = Истина;
                ТекущийВидПриказаИБ = НовыйВидПриказаОбъект.Ссылка;
            КонецЕсли;
        КонецЕсли;

        Если ТекущийВидПриказаИБ <> Неопределено Тогда
            СтрокаТаблицы.ВидПриказа = ТекущийВидПриказаИБ;
            Если СозданНовыйОбъект = Истина Тогда
                РезультатФункции.СоответствиеСозданныхОбъектов.Вставить(ТекущийВидПриказаИБ, СтрокаТаблицы);
            КонецЕсли;
        Иначе
            СтрокаТаблицы.ВидПриказа = Справочники.ВидыПриказовОбразование.ПустаяСсылка();
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найден Вид приказа << ""%1"" (Псевдоним: ""%2""), Код: %3, Ид: %4 >>",
                    СтрокаТаблицы.Наименование,
                    СтруктураДанныхУниверситет.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));
            Продолжить;
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаКурсов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка Курс)
//      * Курс - СправочникСсылка.КурсыОбучения
//      * Код - Строка
//      * Наименование - Строка
//      * Идентификатор - Строка - Внешний идентификатор (из базы Университет)
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
Функция СопоставитьКурсыОбученияПолученныеИзУниверситет(ТаблицаКурсов) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("СообщенияОбОшибках", Новый Массив);

    КэшСоответствийНаименованийКурсовБГУ = ПолучитьКэшСоответствийНаименованийКурсовБГУ();

    Для Каждого СтрокаТаблицы Из ТаблицаКурсов Цикл
        // Заполнение данных псевдонима наименования
        СтруктураДанныхУниверситет = Новый Структура("Наименование, Идентификатор");
        ЗаполнитьЗначенияСвойств(СтруктураДанныхУниверситет, СтрокаТаблицы);
        СтруктураДанныхУниверситет.Наименование =
            КэшСоответствийНаименованийКурсовБГУ.Получить(СтруктураДанныхУниверситет.Наименование);
        Если СтруктураДанныхУниверситет.Наименование = Неопределено Тогда
            // Нет данных соответствия
            СтруктураДанныхУниверситет.Наименование = СтрокаТаблицы.Наименование;
        КонецЕсли;

        ТекущийКурсИБ = Неопределено;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Курс) И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Курс) Тогда
            // Соответствие объекта установлено ранее
            ТекущийКурсИБ = СтрокаТаблицы.Курс;

        Иначе
            // Поиск соответствия в ИБ
            СтруктураНайденногоВидаПриказа = НайтиКурсОбученияПоДаннымУниверситет(СтруктураДанныхУниверситет);
            Если СтруктураНайденногоВидаПриказа <> Неопределено Тогда
                ТекущийКурсИБ = СтруктураНайденногоВидаПриказа.Курс;
            КонецЕсли;
        КонецЕсли;

        Если ТекущийКурсИБ <> Неопределено Тогда
            СтрокаТаблицы.Курс = ТекущийКурсИБ;
        Иначе
            СтрокаТаблицы.Курс = Справочники.КурсыОбучения.ПустаяСсылка();
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найден Курс обучения << ""%1"", Код: %2, Ид: %3 >>",
                    СтрокаТаблицы.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));

            // Продолжаем выполнение цикла только для сбора всех ошибок
            РезультатФункции.Успех = Ложь;
            РезультатФункции.ТекстСообщения = СтрШаблон(
                    "Ошибка при сопоставлении курсов обучения.
                    |Не все курсы обучения удалось идентифицировать");

            Продолжить;
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаСпециальностей - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонка Специальность)
//      * Специальность - СправочникСсылка.СпециальностиОбразование
//      * Наименование - Строка
//      * КодСпециальности - Строка
//      * Идентификатор - Строка - Внешний идентификатор (из базы Университет)
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
//      * СоответствиеСозданныхОбъектов - Соответствие
Функция СопоставитьСпециальностиПолученныеИзУниверситет(
        ТаблицаСпециальностей, Знач СоздаватьНовыеЕслиОтсутствует = Ложь, Знач ДанныеТранзакции = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("СоответствиеСозданныхОбъектов", Новый Соответствие);
    РезультатФункции.Вставить("СообщенияОбОшибках", Новый Массив);

    Если ДанныеТранзакции = Неопределено Тогда
        ДанныеТранзакции = Новый Структура("Идентификатор, Дата", Новый УникальныйИдентификатор, ТекущаяДатаСеанса());
    КонецЕсли;

    Для Каждого СтрокаТаблицы Из ТаблицаСпециальностей Цикл
        ТекущаяСпециальностьИБ = Неопределено;
        СозданНовыйОбъект = Ложь;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Специальность) И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Специальность) Тогда
            // Соответствие объекта установлено ранее
            ТекущаяСпециальностьИБ = СтрокаТаблицы.Специальность;

        Иначе
            // Поиск соответствия в ИБ
            СтруктураНайденнойСпециальности = НайтиСпециальностьОбразованияПоДаннымУниверситет(СтрокаТаблицы);
            Если СтруктураНайденнойСпециальности <> Неопределено Тогда
                ТекущаяСпециальностьИБ = СтруктураНайденнойСпециальности.Специальность;
            ИначеЕсли СоздаватьНовыеЕслиОтсутствует Тогда
                // Создание нового вида приказа
                НовыйСпециальностьОбъект = Справочники.СпециальностиОбразование.СоздатьЭлемент();
                НовыйСпециальностьОбъект.Наименование = СтрокаТаблицы.Наименование;
                НовыйСпециальностьОбъект.КодСпециальности = СтрокаТаблицы.КодСпециальности;

                НовыйСпециальностьОбъект.Записать();

                // Запись соответствий идентификаторов обмена в регистр
                ЗаписатьСоответствияИдентификаторовОбмена(
                    Строка(НовыйСпециальностьОбъект.Ссылка.УникальныйИдентификатор()),
                    СтрокаТаблицы.Идентификатор,
                    ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Специальность,
                    ДанныеТранзакции.Идентификатор,
                    ДанныеТранзакции.Дата);

                СозданНовыйОбъект = Истина;
                ТекущаяСпециальностьИБ = НовыйСпециальностьОбъект.Ссылка;
            КонецЕсли;
        КонецЕсли;

        Если ТекущаяСпециальностьИБ <> Неопределено Тогда
            СтрокаТаблицы.Специальность = ТекущаяСпециальностьИБ;
            Если СозданНовыйОбъект = Истина Тогда
                РезультатФункции.СоответствиеСозданныхОбъектов.Вставить(ТекущаяСпециальностьИБ, СтрокаТаблицы);
            КонецЕсли;
        Иначе
            СтрокаТаблицы.Специальность = Справочники.СпециальностиОбразование.ПустаяСсылка();
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не найдена Специальность << ""%1"", Код специальности: %2, Ид: %3 >>",
                    СтрокаТаблицы.Наименование,
                    СтрокаТаблицы.КодСпециальности,
                    СтрокаТаблицы.Идентификатор));
            Продолжить;
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
//      * СообщенияОбОшибках - Массив из Строка
//      * СоответствиеСозданныхОбъектов - Соответствие
Функция СопоставитьДоговорыСтудентовПолученныеИзУниверситет(
        ТаблицаСтудентов, Знач ТаблицаДоговоров, Знач КэшДанныхПриказовСтудентов, Знач СоздаватьНовыеЕслиОтсутствует = Ложь,
        Знач ДанныеТранзакции = Неопределено, Знач Организация = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("СоответствиеСозданныхОбъектов", Новый Соответствие);
    РезультатФункции.Вставить("СообщенияОбОшибках", Новый Массив);

    Организация = ?(Организация = Неопределено, ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию(), Организация);

    КонстантыДляСозданияДоговоров = Новый Структура;
    КонстантыДляСозданияДоговоров.Вставить("ВидОбязательства", "Договор");
    КонстантыДляСозданияДоговоров.Вставить("ТипДоговораНДС", Перечисления.ТипыДоговоровДляНДС.Обычный);
    КонстантыДляСозданияДоговоров.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
    КонстантыДляСозданияДоговоров.Вставить("НаправлениеДеятельности", ПолучитьНаправлениеДеятельностиПлатноеОбучение());
    КонстантыДляСозданияДоговоров.Вставить("Организация", Организация);

    Для Каждого СтрокаТаблицы Из ТаблицаСтудентов Цикл
        ПриведенноеНаименованиеДоговора = СформироватьНаименованиеДоговораОбразованияСоСтудентом(СтрокаТаблицы);
        СтрокиПриказовСтудента = КэшДанныхПриказовСтудентов.Получить(СтрокаТаблицы.Идентификатор);
        Если СтрокиПриказовСтудента = Неопределено ИЛИ СтрокиПриказовСтудента.Количество() = 0 Тогда
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Нет данных для создания договора студента << ""%1"", Код: %2, Ид: %3 >>",
                    ПриведенноеНаименованиеДоговора,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.Идентификатор));
            Продолжить;
        КонецЕсли;

        // Для каждого приказа (Бухгалтерии) отдельный договор студента
        //  (в теории их может быть несколько, например при большом периоде отбора)
        Для Каждого СтрокаПриказа Из СтрокиПриказовСтудента Цикл
            ТекущийДоговорИБ = Неопределено;
            СозданНовыйОбъект = Ложь;
            ДатаДоговора = ?(ЗначениеЗаполнено(СтрокаПриказа.КанцелярскаяДата),
                    СтрокаПриказа.КанцелярскаяДата, НачалоДня(СтрокаПриказа.Дата));
            Если ЗначениеЗаполнено(СтрокаТаблицы.Студент) И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Студент) Тогда
                // Поиск соответствия в ИБ
                МассивДатОтбора = Новый Массив;
                МассивДатОтбора.Добавить(ДатаДоговора);
                МассивДатОтбора.Добавить(НачалоДня(СтрокаПриказа.Дата));
                СтруктураДанныхДоговораДляОтбора = Новый Структура("Идентификатор, ДатаДоговора",
                        СтрокаТаблицы.Идентификатор,
                        МассивДатОтбора);
                СтруктураНайденногоДоговора = НайтиДоговорОказанияОбразовательныхУслугПоДаннымСтудентаУниверситет(
                        СтрокаТаблицы, СтруктураДанныхДоговораДляОтбора);
                Если СтруктураНайденногоДоговора <> Неопределено Тогда
                    ТекущийДоговорИБ = СтруктураНайденногоДоговора.Договор;
                ИначеЕсли СоздаватьНовыеЕслиОтсутствует Тогда
                    // Создание нового вида приказа
                    НовыйДоговорОбъект = Справочники.Договоры.СоздатьЭлемент();
                    ЗаполнитьЗначенияСвойств(НовыйДоговорОбъект, КонстантыДляСозданияДоговоров);
                    НовыйДоговорОбъект.Наименование = ПриведенноеНаименованиеДоговора;
                    НовыйДоговорОбъект.ДатаДоговора = ДатаДоговора;
                    НовыйДоговорОбъект.Контрагент = СтрокаТаблицы.Контрагент;

                    НовыйДоговорОбъект.Записать();

                    // Запись соответствий идентификаторов обмена в регистр
                    ЗаписатьСоответствияИдентификаторовОбмена(
                        Строка(НовыйДоговорОбъект.Ссылка.УникальныйИдентификатор()),
                        // !!! Временное решений т.к. нет внешнего идентификатора
                        Строка(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()),
                        ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Договор,
                        ДанныеТранзакции.Идентификатор,
                        ДанныеТранзакции.Дата);

                    СозданНовыйОбъект = Истина;
                    ТекущийДоговорИБ = НовыйДоговорОбъект.Ссылка;
                КонецЕсли;
            КонецЕсли;

            Если ТекущийДоговорИБ <> Неопределено Тогда
                НоваяСтрокаТаблицыДоговоров = ТаблицаДоговоров.Добавить();
                НоваяСтрокаТаблицыДоговоров.Договор = ТекущийДоговорИБ;
                НоваяСтрокаТаблицыДоговоров.Студент = СтрокаТаблицы.Студент;
                НоваяСтрокаТаблицыДоговоров.ИдентификаторПриказа = СтрокаПриказа.Идентификатор;
                НоваяСтрокаТаблицыДоговоров.ИдентификаторФакультета = СтрокаПриказа.ИдентификаторФакультета;
                Если СозданНовыйОбъект = Истина Тогда
                    РезультатФункции.СоответствиеСозданныхОбъектов.Вставить(ТекущийДоговорИБ, НоваяСтрокаТаблицыДоговоров);
                КонецЕсли;
            Иначе
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                        "Не найден Договор студента << ""%1"" от %2 >>",
                        ПриведенноеНаименованиеДоговора,
                        ДатаДоговора));
                Продолжить;
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

Функция СопоставитьПриказыОбученияПолученныеИзУниверситет(
        ТаблицаПриказов, ОбщаяТаблицаДанных, Знач СоздаватьНовыеЕслиОтсутствует,
        Знач ДанныеТранзакции = Неопределено, Знач Организация = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);
    РезультатФункции.Вставить("СоответствиеСозданныхОбъектов", Новый Соответствие);
    РезультатФункции.Вставить("СообщенияОбОшибках", Новый Массив);

    Организация = ?(Организация = Неопределено, ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию(), Организация);

    ПоляДополнительныхСведенийСтрокиПриказаОбразования = ПолучитьПоляДополнительныхСведенийСтрокиПриказаОбразования();
    КонстантыЗаполненияСтрокТЧ = Новый Структура;
    КонстантыЗаполненияСтрокТЧ.Вставить("СтавкиОплатыОбразованиеПоСеместрам", ПолучитьСтавкиОплатыОбразованиеПоСеместрам());

    КлючПоляИдентификатор = "Идентификатор";

    КэшПрефиксовПриказов = Новый Соответствие;
    Для Каждого СтрокаПриказа Из ТаблицаПриказов Цикл // Заполнение приказов (по факультетам)
        НайденныеСтрокиИдентификаторовФакультетовПриказа = ОбщаяТаблицаДанных.ТаблицаИдентификаторовОбщихДанныхПриказа.НайтиСтроки(
                Новый Структура("ИдентификаторПриказа, ИдентификаторФакультета, ИдентификаторТипаПриказа",
                    СтрокаПриказа.Идентификатор, СтрокаПриказа.ИдентификаторФакультета, СтрокаПриказа.ИдентификаторТипаПриказа));

        ДанныеФакультетаПриказа = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаФакультетов.НайтиСтроки(
                Новый Структура(КлючПоляИдентификатор, СтрокаПриказа.ИдентификаторФакультета));
        ДанныеВидаПриказа = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаТиповПриказов.НайтиСтроки(
                Новый Структура(КлючПоляИдентификатор, СтрокаПриказа.ИдентификаторТипаПриказа));

        ПрефиксПриказа = КэшПрефиксовПриказов.Получить(СтрокаПриказа.Идентификатор);
        Если ПрефиксПриказа = Неопределено Тогда
            ПрефиксПриказа = 1;
        Иначе
            ПрефиксПриказа = ПрефиксПриказа + 1;
        КонецЕсли;
        КэшПрефиксовПриказов.Вставить(СтрокаПриказа.Идентификатор, ПрефиксПриказа);

        Если НайденныеСтрокиИдентификаторовФакультетовПриказа.Количество() = 0
            ИЛИ ДанныеФакультетаПриказа.Количество() = 0
            ИЛИ ДанныеВидаПриказа.Количество() = 0 Тогда

            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не удалось создать Приказ << Номер: %1, Ид: %2 >>. Нет данных для создания",
                    СтрокаПриказа.НомерПриказа, СтрокаПриказа.Идентификатор));

            Продолжить;

        Иначе
            ДанныеФакультетаПриказа = ДанныеФакультетаПриказа[0];
            ДанныеВидаПриказа = ДанныеВидаПриказа[0];
        КонецЕсли;

        ДатаПриказа = ?(ЗначениеЗаполнено(СтрокаПриказа.КанцелярскаяДата), СтрокаПриказа.КанцелярскаяДата, СтрокаПриказа.Дата);

        // Заполнение ранее созданного или найденного Факультета (обязательно для заполнения)
        Если ЗначениеЗаполнено(ДанныеФакультетаПриказа.Факультет) = Ложь
            ИЛИ ОбщегоНазначения.СсылкаСуществует(ДанныеФакультетаПриказа.Факультет) = Ложь Тогда

            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не удалось создать Приказ << Номер: %1, Ид: %2 >>. Не идентифицирован Факультет << %3 >>",
                    СтрокаПриказа.НомерПриказа, СтрокаПриказа.Идентификатор, СтрокаПриказа.НаименованиеФакультета));

            РезультатФункции.Успех = Ложь; // Ошибка - Факультет заполняется обязательно
            РезультатФункции.ТекстСообщения = "Ошибка заполнения данных приказов";
            Продолжить;
        КонецЕсли;

        // Заполнение ранее созданного или найденного Вида приказа
        Если ЗначениеЗаполнено(ДанныеВидаПриказа.ВидПриказа) = Ложь
            ИЛИ ОбщегоНазначения.СсылкаСуществует(ДанныеВидаПриказа.ВидПриказа) = Ложь Тогда

            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не удалось создать Приказ << Номер: %1, Ид: %2 >>. Не идентифицирован Вид приказа << %3 >>",
                    СтрокаПриказа.НомерПриказа, СтрокаПриказа.Идентификатор, ДанныеВидаПриказа.Наименование));

            Продолжить;
        КонецЕсли;

        // Создание документа
        НовыйПриказОбразованияОбъект = Документы.ПриказОбразование.СоздатьДокумент();
        НовыйПриказОбразованияОбъект.Номер = СтрШаблон("%1/%2", Строка(ПрефиксПриказа), СтрокаПриказа.НомерПриказа);
        НовыйПриказОбразованияОбъект.Дата = ДатаПриказа;
        НовыйПриказОбразованияОбъект.ДатаНачалаДействия = СтрокаПриказа.КанцелярскаяДата;
        НовыйПриказОбразованияОбъект.Организация = Организация;
        НовыйПриказОбразованияОбъект.Факультет = ДанныеФакультетаПриказа.Факультет;
        НовыйПриказОбразованияОбъект.ВидПриказа = ДанныеВидаПриказа.ВидПриказа;

        // Заполнение ТЧ приказа
        Для Каждого СтрокаИдентификаторовСвязей Из НайденныеСтрокиИдентификаторовФакультетовПриказа Цикл
            // Заполнение данных студента приказа
            ДанныеСтудентаПриказа = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаСтудентов.НайтиСтроки(
                    Новый Структура(КлючПоляИдентификатор, СтрокаИдентификаторовСвязей.ИдентификаторСтудента));
            // Проверка соответствия данных студента
            Если ДанныеСтудентаПриказа.Количество() = 0 Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                        "Не удалось получить данные студента << Ид: %1, Номер приказа: %2 >>",
                        ДанныеСтудентаПриказа.Наименование, СтрокаПриказа.НомерПриказа));
                Продолжить;
            КонецЕсли;

            ДанныеСтудентаПриказа = ДанныеСтудентаПриказа[0];

            // Проверка заполнения данных студента
            Если ЗначениеЗаполнено(ДанныеСтудентаПриказа.Студент) = Ложь // Проверка студента
                ИЛИ ОбщегоНазначения.СсылкаСуществует(ДанныеСтудентаПриказа.Студент) = Ложь Тогда

                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                        "Не удалось идентифицировать студента << %1, СНИЛС: %2, Номер приказа: %3 >>",
                        ДанныеСтудентаПриказа.Наименование, ДанныеСтудентаПриказа.СНИЛС, СтрокаПриказа.НомерПриказа));
                Продолжить;
            КонецЕсли;
            Если ЗначениеЗаполнено(ДанныеСтудентаПриказа.Контрагент) = Ложь // Проверка контрагента студента
                ИЛИ ОбщегоНазначения.СсылкаСуществует(ДанныеСтудентаПриказа.Контрагент) = Ложь Тогда

                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                        "Не удалось идентифицировать контрагента << %1, СНИЛС: %2, Номер приказа: %3 >>",
                        ДанныеСтудентаПриказа.Наименование, ДанныеСтудентаПриказа.СНИЛС, СтрокаПриказа.НомерПриказа));
                Продолжить;
            КонецЕсли;

            // Заполнение ранее созданного или найденного договора
            ДанныеДоговораСтудентаПриказа = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаДоговоров.НайтиСтроки(
                    Новый Структура("Студент, ИдентификаторПриказа, ИдентификаторФакультета",
                        ДанныеСтудентаПриказа.Студент,
                        СтрокаИдентификаторовСвязей.ИдентификаторПриказа,
                        СтрокаИдентификаторовСвязей.ИдентификаторФакультета));
            // Проверка соответствий договора
            Если ДанныеДоговораСтудентаПриказа.Количество() = 0 Тогда
                РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                        "Не удалось получить данные договора студента << %1, Номер приказа: %2 >>",
                        ДанныеСтудентаПриказа.Наименование, СтрокаПриказа.НомерПриказа));
                Продолжить;
            КонецЕсли;
            ДанныеДоговораСтудентаПриказа = ДанныеДоговораСтудентаПриказа[0];

            // Заполнение ранее созданного или найденного курса
            ДанныеКурсаОбучения = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаКурсовОбучения.НайтиСтроки(
                    Новый Структура(КлючПоляИдентификатор, СтрокаИдентификаторовСвязей.ИдентификаторКурсаОбучения));
            ДанныеКурсаОбучения = ДанныеКурсаОбучения[0];

            // Заполнение ранее созданной или найденной специальности
            ДанныеСпециальности = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаСпециальностей.НайтиСтроки(
                    Новый Структура(КлючПоляИдентификатор, СтрокаИдентификаторовСвязей.ИдентификаторСпециальности));
            ДанныеСпециальности = ДанныеСпециальности[0];

            // Заполнение ранее созданной или найденной формы обучения
            ДанныеФормыОбучения = ОбщаяТаблицаДанных.ТаблицыСвязанныхОбъектов.ТаблицаФормОбучения.НайтиСтроки(
                    Новый Структура(КлючПоляИдентификатор, СтрокаИдентификаторовСвязей.ИдентификаторФормыОбучения));
            ДанныеФормыОбучения = ДанныеФормыОбучения[0];

            // Заполнение дополнительных полей:

            // Курс обучения
            НоваяСтрокаСтудентаПриказа = НовыйПриказОбразованияОбъект.Студенты.Добавить();
            НоваяСтрокаСтудентаПриказа.Студент = ДанныеСтудентаПриказа.Студент;
            НоваяСтрокаСтудентаПриказа.Поле = ПоляДополнительныхСведенийСтрокиПриказаОбразования.Курс;
            НоваяСтрокаСтудентаПриказа.Значение = ДанныеКурсаОбучения.Курс;
            НоваяСтрокаСтудентаПриказа.Договор = ДанныеДоговораСтудентаПриказа.Договор;

            // Способы оплаты
            НоваяСтрокаСтудентаПриказа = НовыйПриказОбразованияОбъект.Студенты.Добавить();
            НоваяСтрокаСтудентаПриказа.Студент = ДанныеСтудентаПриказа.Студент;
            НоваяСтрокаСтудентаПриказа.Поле = ПоляДополнительныхСведенийСтрокиПриказаОбразования.СпособыОплатыЗаОбучение;
            НоваяСтрокаСтудентаПриказа.Значение = Перечисления.гпСпособыОплатыЗаОбучение.ПоСеместрам;
            НоваяСтрокаСтудентаПриказа.Договор = ДанныеДоговораСтудентаПриказа.Договор;

            // Способы оплаты
            НоваяСтрокаСтудентаПриказа = НовыйПриказОбразованияОбъект.Студенты.Добавить();
            НоваяСтрокаСтудентаПриказа.Студент = ДанныеСтудентаПриказа.Студент;
            НоваяСтрокаСтудентаПриказа.Поле = ПоляДополнительныхСведенийСтрокиПриказаОбразования.СтавкаОплаты;
            НоваяСтрокаСтудентаПриказа.Значение = КонстантыЗаполненияСтрокТЧ.СтавкиОплатыОбразованиеПоСеместрам; // По семестрам
            НоваяСтрокаСтудентаПриказа.Договор = ДанныеДоговораСтудентаПриказа.Договор;

            // Специальность
            НоваяСтрокаСтудентаПриказа = НовыйПриказОбразованияОбъект.Студенты.Добавить();
            НоваяСтрокаСтудентаПриказа.Студент = ДанныеСтудентаПриказа.Студент;
            НоваяСтрокаСтудентаПриказа.Поле = ПоляДополнительныхСведенийСтрокиПриказаОбразования.Специальность;
            НоваяСтрокаСтудентаПриказа.Значение = ДанныеСпециальности.Специальность;
            НоваяСтрокаСтудентаПриказа.Договор = ДанныеДоговораСтудентаПриказа.Договор;

            // Форма обучения
            НоваяСтрокаСтудентаПриказа = НовыйПриказОбразованияОбъект.Студенты.Добавить();
            НоваяСтрокаСтудентаПриказа.Студент = ДанныеСтудентаПриказа.Студент;
            НоваяСтрокаСтудентаПриказа.Поле = ПоляДополнительныхСведенийСтрокиПриказаОбразования.Специальность;
            Если ДанныеФормыОбучения.Наименование = "Очная" Тогда
                НоваяСтрокаСтудентаПриказа.Значение = Перечисления.гпФормыОбучения.Дневная;
            ИначеЕсли ДанныеФормыОбучения.Наименование = "Заочная" Тогда
                НоваяСтрокаСтудентаПриказа.Значение = Перечисления.гпФормыОбучения.Заочная;
            Иначе
                НоваяСтрокаСтудентаПриказа.Значение = Перечисления.гпФормыОбучения.ОчноЗаочная;
            КонецЕсли;
            НоваяСтрокаСтудентаПриказа.Договор = ДанныеДоговораСтудентаПриказа.Договор;
        КонецЦикла;

        // Заполнение поля Комментарий
        НовыйПриказОбразованияОбъект.Комментарий = СтрШаблон("%1/%2", СтрокаПриказа.НомерПриказа, СтрокаПриказа.Комментарий);

        // Запись приказа
        Если НовыйПриказОбразованияОбъект.Студенты.Количество() > 0 Тогда

            // УДАЛИТЬ! Только для теста
            НовыйПриказОбразованияОбъект.Номер = СтрШаблон("test_%1", НовыйПриказОбразованияОбъект.Номер); // !!!

            НовыйПриказОбразованияОбъект.Записать();
            СтрокаПриказа.Приказ = НовыйПриказОбразованияОбъект.Ссылка;
            РезультатФункции.СоответствиеСозданныхОбъектов.Вставить(НовыйПриказОбразованияОбъект.Ссылка, СтрокаПриказа);

            // Запись соответствий идентификаторов обмена в регистр
            ЗаписатьСоответствияИдентификаторовОбмена(
                Строка(НовыйПриказОбразованияОбъект.Ссылка.УникальныйИдентификатор()),
                СтрокаПриказа.Идентификатор,
                ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Договор,
                ДанныеТранзакции.Идентификатор,
                ДанныеТранзакции.Дата,
                ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет);
        Иначе
            СтрокаПриказа.Приказ = Документы.ПриказОбразование.ПустаяСсылка();
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ТаблицаСтудентов - ТаблицаЗначений - Изменяется в процессе выполнения функции (заполняется колонки Студент, Контрагент, ФизическоеЛицо)
//  ДополнительныеДанные - Структура
//  СоздаватьНовыеЕслиОтсутствует - Булево
//  ДанныеТранзакции - Структура, Неопределено
//      * Идентификатор - Строка
//      * Дата - Дата
//  Организация - СправочникСсылка.Организации, Неопределено
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * Студенты - СправочникСсылка.Студенты
//      * СообщенияОбОшибках - Массив из Строка
//      * ТекстСообщения - Строка, Неопределено
Функция СопоставитьСтудентовПолученныеИзУниверситет(
        ТаблицаСтудентов, Знач ДополнительныеДанные, Знач СоздаватьНовыеЕслиОтсутствует = Ложь,
        Знач ДанныеТранзакции = Неопределено, Организация = Неопределено) Экспорт

    РезультатФункции = Новый Структура("Успех, Студенты, СообщенияОбОшибках, ТекстСообщения",
            Истина, Новый Массив, Новый Массив);

    Если ДанныеТранзакции = Неопределено Тогда
        ДанныеТранзакции = Новый Структура("Идентификатор, Дата", Новый УникальныйИдентификатор, ТекущаяДатаСеанса());
    КонецЕсли;
    Организация = ?(Организация = Неопределено, ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию(), Организация);
    РодительСтудентов = ?(ДополнительныеДанные.Свойство("РодительСтудентов"),
            ДополнительныеДанные.РодительСтудентов, Неопределено);
    РодительКонтрагентов = ?(ДополнительныеДанные.Свойство("РодительКонтрагентов"),
            ДополнительныеДанные.РодительКонтрагентов, Неопределено);
    ПрефиксКодаСтудентов = ПолучитьПрефиксДляСозданияОбъектовИзУниверситет();
    ТипКонтрагентаФизЛицо = ПолучитьТипКонтрагентаФизЛицо();

    КлючиСтруктурыСтудента = "Студент, Контрагент, ФизическоеЛицо";
    Для Каждого СтрокаТаблицы Из ТаблицаСтудентов Цикл
        ЭтоНовыйСтудент = Ложь;
        СтудентОбъект = Неопределено;
        КонтрагентОбъект = Неопределено;
        ТребуетсяЗаписатьКонтрагента = Ложь;
        ТребуетсяЗаписатьСтудента = Ложь;

        СтруктураСтудента = Неопределено;
        Если ЗначениеЗаполнено(СтрокаТаблицы.Студент) = Ложь ИЛИ НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Студент) Тогда
            // Поиск студента в ИБ
            СтруктураСтудента = НайтиСтудентаПоДаннымУниверситет(СтрокаТаблицы, Неопределено, Ложь);
        Иначе
            // Связь студента уже установлена ранее
            СтруктураСтудента = Новый Структура(КлючиСтруктурыСтудента);
            СтруктураСтудента.Студент = СтрокаТаблицы.Студент;
            СтруктураСтудента.Контрагент = ?(НЕ СтрокаТаблицы.Контрагент.Пустая()
                    И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Контрагент),
                    СтрокаТаблицы.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
            СтруктураСтудента.ФизическоеЛицо = ?(НЕ СтрокаТаблицы.ФизическоеЛицо.Пустая()
                    И ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.ФизическоеЛицо),
                    СтрокаТаблицы.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
        КонецЕсли;

        // Попытка создать нового студента
        Если СтруктураСтудента = Неопределено Тогда
            Если СоздаватьНовыеЕслиОтсутствует = Истина Тогда
                СтруктураСтудента = Новый Структура(КлючиСтруктурыСтудента);
                ЭтоНовыйСтудент = Истина;

                СтудентОбъект = Справочники.Студенты.СоздатьЭлемент();
                НовыйУникальныйИдентификаторСтудента = Новый УникальныйИдентификатор;
                СтруктураСтудента.Студент = Справочники.Студенты.ПолучитьСсылку(НовыйУникальныйИдентификаторСтудента);
                СтудентОбъект.УстановитьСсылкуНового(СтруктураСтудента.Студент);
                СтудентОбъект.Наименование = СтрокаТаблицы.Наименование;
                СтудентОбъект.Организация = Организация;
                СтудентОбъект.Код = СтрШаблон("%1%2", ПрефиксКодаСтудентов, СтрокаТаблицы.Код);
                СтудентОбъект.Комментарий = СтрокаТаблицы.Код + "/" + СтрокаТаблицы.СНИЛС;
                Если РодительСтудентов <> Неопределено Тогда
                    СтудентОбъект.Родитель = РодительСтудентов;
                КонецЕсли;

                // Запись соответствий идентификаторов обмена в регистр
                ЗаписатьСоответствияИдентификаторовОбмена(
                    Строка(НовыйУникальныйИдентификаторСтудента),
                    СтрокаТаблицы.Идентификатор,
                    ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Студент,
                    ДанныеТранзакции.Идентификатор,
                    ДанныеТранзакции.Дата);

                ТребуетсяЗаписатьСтудента = Истина;
            КонецЕсли;
        КонецЕсли;

        Если СтруктураСтудента <> Неопределено Тогда
            // Студент наеден или создан
            ТребуетСозданияКонтрагента = Ложь;
            Если ЭтоНовыйСтудент = Истина // Для новых студентов всегда новый контрагент (принято из исходной логики обработки)
                ИЛИ (СоздаватьНовыеЕслиОтсутствует И СтруктураСтудента.Контрагент.Пустая()) Тогда

                ТребуетСозданияКонтрагента = Истина;
            КонецЕсли;

            // Обновление (создание) контрагента
            Если ТребуетСозданияКонтрагента = Истина Тогда
                КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
                НовыйУникальныйИдентификаторКонтрагента = Новый УникальныйИдентификатор;
                СтруктураСтудента.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(НовыйУникальныйИдентификаторКонтрагента);
                КонтрагентОбъект.УстановитьСсылкуНового(СтруктураСтудента.Контрагент);
                КонтрагентОбъект.Наименование = СтрокаТаблицы.Наименование;
                КонтрагентОбъект.ТипКонтрагента = ТипКонтрагентаФизЛицо;
                КонтрагентОбъект.ЮридическоеФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
                Если РодительКонтрагентов <> Неопределено Тогда
                    КонтрагентОбъект.Родитель = РодительКонтрагентов;
                КонецЕсли;

                СтудентОбъект.Контрагент = СтруктураСтудента.Контрагент;

                // Запись соответствий идентификаторов обмена в регистр
                ЗаписатьСоответствияИдентификаторовОбмена(
                    Строка(НовыйУникальныйИдентификаторКонтрагента),
                    СтрокаТаблицы.Идентификатор,
                    ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.КонтрагентСтудента,
                    ДанныеТранзакции.Идентификатор,
                    ДанныеТранзакции.Дата);

                ТребуетсяЗаписатьСтудента = Истина;
                ТребуетсяЗаписатьКонтрагента = Истина;

            ИначеЕсли НРег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
                        СтруктураСтудента.Контрагент, "Наименование")) <> НРег(СтрокаТаблицы.Наименование) Тогда

                КонтрагентОбъект = СтруктураСтудента.Контрагент.ПолучитьОбъект();
                КонтрагентОбъект.Наименование = СтрокаТаблицы.Наименование;

                ТребуетсяЗаписатьКонтрагента = Истина;
            КонецЕсли;

            Если ТребуетсяЗаписатьКонтрагента Тогда
                КонтрагентОбъект.Записать();
            КонецЕсли;
            Если ТребуетсяЗаписатьСтудента Тогда
                СтудентОбъект.Записать();
            КонецЕсли;

            СтрокаТаблицы.Студент = СтруктураСтудента.Студент;
            СтрокаТаблицы.Контрагент = СтруктураСтудента.Контрагент;
            СтрокаТаблицы.ФизическоеЛицо = СтруктураСтудента.ФизическоеЛицо;

            РезультатФункции.Студенты.Добавить(СтрокаТаблицы.Студент);

        Иначе
            // Связь не установлена
            РезультатФункции.СообщенияОбОшибках.Добавить(СтрШаблон(
                    "Не удалось найти студента: << Наименование: %1, Код: %2, СНИЛС: %3 >>",
                    СтрокаТаблицы.Наименование,
                    СтрокаТаблицы.Код,
                    СтрокаТаблицы.СНИЛС));
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СопоставлениеДанных

#Область ПоискОбъектов

// Параметры:
//  Наименование - Строка
// Возвращаемое значение:
//  - Массив из СправочникСсылка.Контрагент
Функция НайтиГруппыКонтрагентовПоНаименованию(Знач Наименование) Экспорт
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Контрагенты.Ссылка КАК Контрагент,
        |   Контрагенты.Наименование КАК Наименование,
        |   Контрагенты.ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.Контрагенты КАК Контрагенты
        |ГДЕ
        |   Контрагенты.ЭтоГруппа
        |   И НРег(СокрЛП(Контрагенты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Контрагенты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(Наименование)));
    РезультатЗапроса = Запрос.Выполнить();

    ТаблицаДанных = РезультатЗапроса.Выгрузить();
    Если ТаблицаДанных.Количество() > 1 Тогда
        НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина));
        Если НайденныеСтроки.Количество() < ТаблицаДанных.Количество() Тогда
            Для Каждого СтрокаУдаления Из НайденныеСтроки Цикл
                ТаблицаДанных.Удалить(СтрокаУдаления);
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

    Возврат ТаблицаДанных.ВыгрузитьКолонку("Контрагент");
КонецФункции

// Параметры:
//  ИдентификаторУниверситет - Строка
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  МенеджерОбъекта - Произвольный
//  ВидОбъектаОбменаДополнительный - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ, Неопределено
// Возвращаемое значение:
//  - Массив - Ссылка
Функция ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
        Знач ИдентификаторУниверситет, Знач ВидОбъектаОбмена,
        Знач МенеджерОбъекта, Знач ВидОбъектаОбменаДополнительный = Неопределено) Экспорт

    РезультатФункции = Новый Массив;

    ТаблицаИдентификаторов = ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(ВидОбъектаОбмена,
            ВидОбъектаОбменаДополнительный, Новый Структура("ИдентификаторВнешний", ИдентификаторУниверситет));

    Для Каждого СтрокаИдентификаторов Из ТаблицаИдентификаторов Цикл
        Если СтроковыеФункцииКлиентСервер.СвязьУстарела
            ИЛИ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        УникальныйИдентификаторПоиска = Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор);
        НайденнаяСсылка = Неопределено;
        Если ЗначениеЗаполнено(УникальныйИдентификаторПоиска) Тогда
            НайденнаяСсылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор));
        КонецЕсли;

        Если НайденнаяСсылка <> Неопределено И НайденнаяСсылка.Пустая() = Ложь Тогда
            РезультатФункции.Добавить(НайденнаяСсылка);
        КонецЕсли;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Факультет - СправочникСсылка.Подразделения
//      * Код - Строка
//      * Наименование - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиФакультетПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет;
    ТаблицаИдентификаторов = ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(ВидОбъектаОбмена,
            Неопределено, Новый Структура("ИдентификаторВнешний", СтруктураДанныхУниверситет.Идентификатор));

    ФильтрСсылокФакультетов = Новый Массив;
    Для Каждого СтрокаИдентификаторов Из ТаблицаИдентификаторов Цикл
        Если СтроковыеФункцииКлиентСервер.СвязьУстарела
            ИЛИ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор) = Ложь Тогда
            Продолжить;
        КонецЕсли;

        УникальныйИдентификаторПоиска = Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор);
        НайденнаяСсылка = Неопределено;
        Если ЗначениеЗаполнено(УникальныйИдентификаторПоиска) Тогда
            НайденнаяСсылка = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификаторов.Идентификатор));
        КонецЕсли;

        Если НайденнаяСсылка <> Неопределено И НайденнаяСсылка.Пустая() = Ложь Тогда
            ФильтрСсылокФакультетов.Добавить(НайденнаяСсылка);
        КонецЕсли;
    КонецЦикла;

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Факультеты.Ссылка КАК Факультет,
        |   Факультеты.Код КАК Код,
        |   Факультеты.Наименование КАК Наименование,
        |   УникальныйИдентификатор(Факультеты.Ссылка) КАК УникальныйИдентификатор
        |ИЗ
        |   Справочник.Подразделения КАК Факультеты
        |ГДЕ
        |   ИСТИНА
        |   И &УсловияФильтраСсылок
        |   И СокрЛП(НРег(Факультеты.Наименование)) = &Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   Факультеты.Ссылка УБЫВ
        |";

    Запрос.УстановитьПараметр("Наименование", СокрЛП(НРег(СтруктураДанныхУниверситет.Наименование)));

    УсловияФильтраСсылок = "ИСТИНА";
    Если ФильтрСсылокФакультетов.Количество() > 0 Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Факультеты.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылокФакультетов);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Факультет, Код, Наименование, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура
//      * Код - Строка - Без префикса обмена Университет-БГУ (RL)
//      * Наименование - Строка
//      * СНИЛС - Строка
//      * Идентификатор - Строка - Внешний идентификатор (Идентификатор базы Университет)
//  ГруппаСтудентов - СправочникСсылка.Студенты, Неопределено
//  СтрогийОтборПоСНИЛС - Булево - По умолчанию Ложь
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Студент - СправочникСсылка.Студенты
//      * Код - Строка
//      * Наименование - Строка
//      * СНИЛС - Строка.Контрагенты
//      * Контрагент - СправочникСсылка.Контрагенты
//      * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица, Неопределено
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиСтудентаПоДаннымУниверситет(
        Знач СтруктураДанныхУниверситет, Знач ГруппаСтудентов = Неопределено, СтрогийОтборПоСНИЛС = Ложь) Экспорт

    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.КонтрагентСтудента;
    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.Студенты);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Ссылка КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   ЕСТЬNULL(ФизическиеЛица.Ссылка, НЕОПРЕДЕЛЕНО) КАК ФизическоеЛицо,
        |   ЕСТЬNULL(ФизическиеЛица.СтраховойНомерПФР, НЕОПРЕДЕЛЕНО) КАК СНИЛС,
        |   ВЫРАЗИТЬ(Студенты.Комментарий КАК СТРОКА(100)) КАК Комментарий,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА НРег(СокрЛП(Студенты.Наименование)) = &Наименование ТОГДА 1
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию
        |ПОМЕСТИТЬ ВТ_Студенты_Подготовка
        |ИЗ
        |   Справочник.Студенты КАК Студенты
        |   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
        |       ПО Студенты.Контрагент = Контрагенты.Ссылка
        |   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
        |       ПО НЕ Контрагенты.Ссылка ЕСТЬ NULL
        |       И Контрагенты.ЮридическоеФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
        |       И Контрагенты.ЮридическоеФизическоеЛицо = ФизическиеЛица.Ссылка
        |ГДЕ
        |   ИСТИНА
        |   И Студенты.ЭтоГруппа = ЛОЖЬ
        |   И &ДополнительноеУсловиеГруппы
        |   И &УсловияФильтраСсылок
        |   И &ДополнительноеУсловиеПоСНИЛС
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Студент КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   Студенты.ФизическоеЛицо КАК ФизическоеЛицо,
        |   Студенты.СНИЛС КАК СНИЛС,
        |   Студенты.Комментарий КАК Комментарий,
        |   Студенты.ПриоритетПоНаименованию КАК ПриоритетПоНаименованию,
        |   Студенты.ПриоритетПоФильтруСсылок КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА &СНИЛС <> """" И Студенты.СНИЛС = &СНИЛС ТОГДА 10
        |       КОГДА &СНИЛС <> """" И Студенты.Комментарий ПОДОБНО (""%/"" + &СНИЛС) ТОГДА (&МинимальныйПриоритетОтбора + 2)
        |       КОГДА Студенты.СНИЛС = &СНИЛС ТОГДА 0
        |       ИНАЧЕ -1
        |   КОНЕЦ КАК ПриоритетПоСНИЛС,
        |   ВЫБОР
        |       КОГДА &КодВнешний <> """" И Студенты.Комментарий ПОДОБНО (&КодВнешний + ""/%"") ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       КОГДА СокрЛП(Студенты.Код) = &Код ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ -1
        |   КОНЕЦ КАК ПриоритетПоКоду
        |ПОМЕСТИТЬ ВТ_Результат_СПриоритетами
        |ИЗ
        |   ВТ_Студенты_Подготовка КАК Студенты
        |ГДЕ
        |   ИСТИНА
        |   // И СокрЛП(Студенты.Код) = &Код
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Студенты.Студент КАК Студент,
        |   Студенты.Код КАК Код,
        |   Студенты.Наименование КАК Наименование,
        |   Студенты.Контрагент КАК Контрагент,
        |   Студенты.ФизическоеЛицо КАК ФизическоеЛицо,
        |   Студенты.СНИЛС КАК СНИЛС,
        |   Студенты.Комментарий КАК Комментарий,
        |   УникальныйИдентификатор(Студенты.Студент) КАК УникальныйИдентификатор,
        |   Студенты.ПриоритетПоНаименованию КАК ПриоритетПоНаименованию,
        |   Студенты.ПриоритетПоФильтруСсылок КАК ПриоритетПоФильтруСсылок,
        |   Студенты.ПриоритетПоСНИЛС КАК ПриоритетПоСНИЛС,
        |   Студенты.ПриоритетПоКоду КАК ПриоритетПоКоду,
        |   Студенты.ПриоритетПоНаименованию
        |       + Студенты.ПриоритетПоФильтруСсылок
        |       + Студенты.ПриоритетПоСНИЛС
        |       + Студенты.ПриоритетПоКоду КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат
        |ИЗ
        |   ВТ_Результат_СПриоритетами КАК Студенты
        |;
        |
        |////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   ВТ_Результат КАК Студенты
        |ГДЕ
        |   Студенты.Приоритет > &МинимальныйПриоритетОтбора
        |
        |УПОРЯДОЧИТЬ ПО
        |   Студенты.Приоритет УБЫВ,
        |   Студенты.Студент УБЫВ
        |";

    Запрос.УстановитьПараметр("Код", СтрШаблон("%1%2",
            ПолучитьПрефиксДляСозданияОбъектовИзУниверситет(),
            СокрЛП(СтруктураДанныхУниверситет.Код)));
    Запрос.УстановитьПараметр("КодВнешний", СокрЛП(СтруктураДанныхУниверситет.Код));
    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(СтруктураДанныхУниверситет.Наименование)));
    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);

    ДополнительноеУсловиеПоСНИЛС = "ИСТИНА";
    Если СтрогийОтборПоСНИЛС = Истина Тогда
        ДополнительноеУсловиеПоСНИЛС = СтрШаблон(
                "%1 И
                |   ВЫБОР
                |       КОГДА ФизическиеЛица.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА
                |       КОГДА ФизическиеЛица.СтраховойНомерПФР <> """" ТОГДА  ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
                |   КОНЕЦ", ДополнительноеУсловиеПоСНИЛС);
    КонецЕсли;
    Запрос.УстановитьПараметр("СНИЛС", СтруктураДанныхУниверситет.СНИЛС);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеПоСНИЛС", ДополнительноеУсловиеПоСНИЛС);

    ДополнительноеУсловиеГруппы = "ИСТИНА";
    Если ГруппаСтудентов <> Неопределено Тогда
        ДополнительноеУсловиеГруппы = СтрШаблон(
                "%1 И Студенты.Родитель = &ГруппаСтудентов", ДополнительноеУсловиеГруппы);
        Запрос.УстановитьПараметр("ГруппаСтудентов", ГруппаСтудентов);
    КонецЕсли;
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеГруппы", ДополнительноеУсловиеГруппы);

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Студенты.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Студент, Код, Наименование, Контрагент, ФизическоеЛицо, СНИЛС, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхСтудента - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Контрагент - СправочникСсылка.Контрагенты
//  СтруктураДанныхДокументаУниверситет - Структура, СтрокаТаблицыЗначений
//      * Идентификатор - Строка - Внешний идентификатор договора
//      * ДатаДоговора - Дата, Массив из Дата
//      * Организация - СправочникСсылка.Организация - Если Неопределено будет установлено по умолчанию
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Договор - СправочникСсылка.Договоры
//      * Код - Строка
//      * Наименование - Строка
//      * Наименование - Строка
//      * УстановленаСвязьПоИдентификатору - Булево
Функция НайтиДоговорОказанияОбразовательныхУслугПоДаннымСтудентаУниверситет(
        Знач СтруктураДанныхСтудента, Знач СтруктураДанныхДокументаУниверситет) Экспорт

    РезультатФункции = Неопределено;

    Организация = Неопределено;
    Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураДанныхДокументаУниверситет, "Организация") Тогда
        Организация = СтруктураДанныхДокументаУниверситет.Организация;
    КонецЕсли;
    Если Организация = Неопределено Тогда
        Организация = ГП_ОбменУниверситетБГУ.ПолучитьОрганизациюПоУмолчанию();
    КонецЕсли;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Договор;
    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхДокументаУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.Договоры);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Договоры.Ссылка КАК Договор,
        |   Договоры.Код КАК Код,
        |   Договоры.Наименование КАК Наименование,
        |   Договоры.Контрагент КАК Контрагент,
        |   Договоры.ДатаДоговора КАК ДатаДоговора,
        |   Договоры.Организация КАК Организация,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА НРег(СокрЛП(Договоры.Наименование)) = &Наименование ТОГДА (&МинимальныйПриоритетОтбора + 2)
        |       КОГДА Договоры.Наименование <> """" И (НРег(СокрЛП(Договоры.Наименование)) ПОДОБНО &ШаблонНаименования) ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию
        |ПОМЕСТИТЬ ВТ_Договоры_Приоритеты
        |ИЗ
        |   Справочник.Договоры КАК Договоры
        |ГДЕ
        |   ИСТИНА
        |   И &УсловияФильтраСсылок
        |   И Договоры.Контрагент = &Контрагент // !!! Требуется уточнить условие при соответствии идентификаторов
        |   И Договоры.ДатаДоговора В (&ДатаДоговора)
        |   // И Договоры.ТипДоговораНДС = &ТипДоговораНДС
        |   И Договоры.ВидДоговора = &ВидДоговора
        |   И Договоры.НаправлениеДеятельности = &НаправлениеДеятельности
        |   // И Договоры.Организация = &Организация
        |   И ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА ИСТИНА
        |       ИНАЧЕ
        |           Договоры.Наименование <> """" И (НРег(СокрЛП(Договоры.Наименование)) ПОДОБНО &ШаблонНаименования)
        |   КОНЕЦ
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Договоры.*,
        |   Договоры.ПриоритетПоФильтруСсылок
        |       + Договоры.ПриоритетПоНаименованию КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат_Подготовка
        |ИЗ
        |   ВТ_Договоры_Приоритеты КАК Договоры
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Договоры.*,
        |   УникальныйИдентификатор(Договоры.Договор) КАК УникальныйИдентификатор
        |ИЗ
        |   ВТ_Результат_Подготовка КАК Договоры
        |ГДЕ
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ЛОЖЬ И Договоры.ПриоритетПоФильтруСсылок <= 0
        |           ТОГДА Договоры.ПриоритетПоНаименованию > 1
        |       ИНАЧЕ
        |           Договоры.Приоритет > &МинимальныйПриоритетОтбора
        |   КОНЕЦ
        |
        |УПОРЯДОЧИТЬ ПО
        |   Договоры.Приоритет УБЫВ,
        |   Договоры.Договор УБЫВ
        |";

    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);

    МассивДат = Новый Массив;
    Если ТипЗнч(СтруктураДанныхДокументаУниверситет.ДатаДоговора) = Тип("Дата") Тогда
        МассивДат.Добавить(НачалоДня(СтруктураДанныхДокументаУниверситет.ДатаДоговора));
    Иначе
        Для Каждого ТекущаяДата Из СтруктураДанныхДокументаУниверситет.ДатаДоговора Цикл
            МассивДат.Добавить(НачалоДня(ТекущаяДата));
        КонецЦикла;
    КонецЕсли;

    ПриведенноеНаименованиеДоговора = СформироватьНаименованиеДоговораОбразованияСоСтудентом(СтруктураДанныхСтудента);
    Запрос.УстановитьПараметр("Наименование", НРег(ПриведенноеНаименованиеДоговора));
    Запрос.УстановитьПараметр("ШаблонНаименования", Запрос.Параметры.Наименование + "%");
    Запрос.УстановитьПараметр("Контрагент", СтруктураДанныхСтудента.Контрагент);
    Запрос.УстановитьПараметр("ДатаДоговора", МассивДат);
    Запрос.УстановитьПараметр("ВидОбязательства", "Договор");
    // Запрос.УстановитьПараметр("ТипДоговораНДС", Перечисления.ТипыДоговоровДляНДС.Обычный);
    Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
    Запрос.УстановитьПараметр("НаправлениеДеятельности", ПолучитьНаправлениеДеятельностиПлатноеОбучение());
    // Запрос.УстановитьПараметр("Организация", Организация);

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И Договоры.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура(
                "Договор, Код, Наименование, Контрагент, УникальныйИдентификатор, УстановленаСвязьПоИдентификатору");
        РезультатФункции.Вставить("ДатаДоговора");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
        РезультатФункции.УстановленаСвязьПоИдентификатору = ИспользуетсяОтборПоФильтруСсылок;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Курс - СправочникСсылка.КурсыОбучения
//      * Код - Строка
//      * Наименование - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
//      * УстановленаСвязьПоИдентификатору - Булево
Функция НайтиКурсОбученияПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Курс;
    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.КурсыОбучения);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КурсыОбучения.Ссылка КАК Курс,
        |   КурсыОбучения.Код КАК Код,
        |   КурсыОбучения.Наименование КАК Наименование,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА НРег(СокрЛП(КурсыОбучения.Наименование)) = &Наименование ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию
        |ПОМЕСТИТЬ ВТ_КурсыОбучения_Приоритеты
        |ИЗ
        |   Справочник.КурсыОбучения КАК КурсыОбучения
        |ГДЕ
        |   ИСТИНА
        |   И &УсловияФильтраСсылок
        |   И ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА ИСТИНА
        |       ИНАЧЕ
        |           НРег(СокрЛП(КурсыОбучения.Наименование)) = &Наименование
        |   КОНЕЦ
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КурсыОбучения.*,
        |   КурсыОбучения.ПриоритетПоФильтруСсылок
        |       + КурсыОбучения.ПриоритетПоНаименованию КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат_Подготовка
        |ИЗ
        |   ВТ_КурсыОбучения_Приоритеты КАК КурсыОбучения
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КурсыОбучения.*,
        |   УникальныйИдентификатор(КурсыОбучения.Курс) КАК УникальныйИдентификатор
        |ИЗ
        |   ВТ_Результат_Подготовка КАК КурсыОбучения
        |ГДЕ
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ЛОЖЬ И КурсыОбучения.ПриоритетПоФильтруСсылок <= 0
        |           ТОГДА КурсыОбучения.ПриоритетПоНаименованию > 1
        |       ИНАЧЕ
        |           КурсыОбучения.Приоритет > &МинимальныйПриоритетОтбора
        |   КОНЕЦ
        |
        |УПОРЯДОЧИТЬ ПО
        |   КурсыОбучения.Приоритет УБЫВ,
        |   КурсыОбучения.Курс УБЫВ
        |";

    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);
    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(СтруктураДанныхУниверситет.Наименование)));

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И КурсыОбучения.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("Курс, Код, Наименование, УникальныйИдентификатор, УстановленаСвязьПоИдентификатору");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
        РезультатФункции.УстановленаСвязьПоИдентификатору = ИспользуетсяОтборПоФильтруСсылок;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
//      * КодСпециальности - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * Специальность - СправочникСсылка.СпециальностиОбразование
//      * Код - Строка
//      * Наименование - Строка
//      * КодСпециальности - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
//      * УстановленаСвязьПоИдентификатору - Булево
Функция НайтиСпециальностьОбразованияПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Специальность;
    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.СпециальностиОбразование);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СпециальностиОбразование.Ссылка КАК Специальность,
        |   СпециальностиОбразование.Код КАК Код,
        |   СпециальностиОбразование.Наименование КАК Наименование,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА СокрЛП(СпециальностиОбразование.Наименование) ПОДОБНО (""%"" + &КодСпециальности + ""%"") ТОГДА
        |           ВЫБОР
        |               КОГДА НРег(СокрЛП(СпециальностиОбразование.Наименование)) = &Наименование ТОГДА (&МинимальныйПриоритетОтбора + 2)
        |               ИНАЧЕ (&МинимальныйПриоритетОтбора + 1)
        |           КОНЕЦ
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию,
        |   ВЫБОР
        |       КОГДА (&КодСпециальности <> """") И (СокрЛП(СпециальностиОбразование.КодСпециальности) = &КодСпециальности) ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоКоду
        |ПОМЕСТИТЬ ВТ_СпециальностиОбразование_Приоритеты
        |ИЗ
        |   Справочник.СпециальностиОбразование КАК СпециальностиОбразование
        |ГДЕ
        |   ИСТИНА
        |   И СпециальностиОбразование.ЭтоГруппа = ЛОЖЬ
        |   И &УсловияФильтраСсылок
        |   И ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА ИСТИНА
        |       ИНАЧЕ
        |           (&КодСпециальности <> """") И (СокрЛП(СпециальностиОбразование.КодСпециальности) = &КодСпециальности)
        |           ИЛИ СокрЛП(СпециальностиОбразование.Наименование) ПОДОБНО (""%"" + &КодСпециальности + ""%"")
        |   КОНЕЦ
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СпециальностиОбразование.*,
        |   СпециальностиОбразование.ПриоритетПоФильтруСсылок
        |       + СпециальностиОбразование.ПриоритетПоНаименованию
        |       + СпециальностиОбразование.ПриоритетПоКоду КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат_Подготовка
        |ИЗ
        |   ВТ_СпециальностиОбразование_Приоритеты КАК СпециальностиОбразование
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СпециальностиОбразование.*,
        |   УникальныйИдентификатор(СпециальностиОбразование.Специальность) КАК УникальныйИдентификатор
        |ИЗ
        |   ВТ_Результат_Подготовка КАК СпециальностиОбразование
        |ГДЕ
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ЛОЖЬ И СпециальностиОбразование.ПриоритетПоФильтруСсылок <= 0
        |           ТОГДА СпециальностиОбразование.ПриоритетПоНаименованию > 1
        |       ИНАЧЕ
        |           СпециальностиОбразование.Приоритет > &МинимальныйПриоритетОтбора
        |   КОНЕЦ
        |
        |УПОРЯДОЧИТЬ ПО
        |   СпециальностиОбразование.Приоритет УБЫВ,
        |   СпециальностиОбразование.Специальность УБЫВ
        |";

    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);
    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(СтруктураДанныхУниверситет.Наименование)));
    Запрос.УстановитьПараметр("КодСпециальности", СокрЛП(СтруктураДанныхУниверситет.КодСпециальности));

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И СпециальностиОбразование.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура(
                "Специальность, Код, Наименование, КодСпециальности, УникальныйИдентификатор, УстановленаСвязьПоИдентификатору");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
        РезультатФункции.УстановленаСвязьПоИдентификатору = ИспользуетсяОтборПоФильтруСсылок;
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураДанныхУниверситет - Структура, СтрокаТаблицыЗначений
//      * Наименование - Строка
//      * Идентификатор - Строка
// Возвращаемое значение:
//  - Структура, Неопределено
//      * ВидПриказа - СправочникСсылка.ВидыПриказовОбразование
//      * Код - Строка
//      * Наименование - Строка
//      * УникальныйИдентификатор - УникальныйИдентификатор
Функция НайтиВидПриказаПоДаннымУниверситет(Знач СтруктураДанныхУниверситет) Экспорт
    РезультатФункции = Неопределено;

    ВидОбъектаОбмена = ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ВидПриказа;
    ФильтрСсылок = ПолучитьФильтрСсылокОбъектаИБПоИдентификаторуУниверситет(
            СтруктураДанныхУниверситет.Идентификатор, ВидОбъектаОбмена, Справочники.ВидыПриказовОбразование);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВидыПриказовОбразование.Ссылка КАК ВидПриказа,
        |   """" КАК Код,
        |   ВидыПриказовОбразование.Наименование КАК Наименование,
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА &МинимальныйПриоритетОтбора
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоФильтруСсылок,
        |   ВЫБОР
        |       КОГДА НРег(СокрЛП(ВидыПриказовОбразование.Наименование)) = &Наименование ТОГДА (&МинимальныйПриоритетОтбора + 1)
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК ПриоритетПоНаименованию
        |ПОМЕСТИТЬ ВТ_ВидыПриказовОбразование_Приоритеты
        |ИЗ
        |   Справочник.ВидыПриказовОбразование КАК ВидыПриказовОбразование
        |ГДЕ
        |   ИСТИНА
        |   И ВидыПриказовОбразование.ЭтоГруппа = ЛОЖЬ
        |   И &УсловияФильтраСсылок
        |   И ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ИСТИНА ТОГДА ИСТИНА
        |       ИНАЧЕ
        |           НРег(СокрЛП(ВидыПриказовОбразование.Наименование)) = &Наименование
        |   КОНЕЦ
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВидыПриказовОбразование.*,
        |   ВидыПриказовОбразование.ПриоритетПоФильтруСсылок
        |       + ВидыПриказовОбразование.ПриоритетПоНаименованию КАК Приоритет
        |ПОМЕСТИТЬ ВТ_Результат_Подготовка
        |ИЗ
        |   ВТ_ВидыПриказовОбразование_Приоритеты КАК ВидыПриказовОбразование
        |;
        |
        |///////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВидыПриказовОбразование.*,
        |   УникальныйИдентификатор(ВидыПриказовОбразование.ВидПриказа) КАК УникальныйИдентификатор
        |ИЗ
        |   ВТ_Результат_Подготовка КАК ВидыПриказовОбразование
        |ГДЕ
        |   ВЫБОР
        |       КОГДА &ИспользуетсяОтборПоФильтруСсылок = ЛОЖЬ И ВидыПриказовОбразование.ПриоритетПоФильтруСсылок <= 0
        |           ТОГДА ВидыПриказовОбразование.ПриоритетПоНаименованию > 1
        |       ИНАЧЕ
        |           ВидыПриказовОбразование.Приоритет > &МинимальныйПриоритетОтбора
        |   КОНЕЦ
        |
        |УПОРЯДОЧИТЬ ПО
        |   ВидыПриказовОбразование.Приоритет УБЫВ,
        |   ВидыПриказовОбразование.ВидПриказа УБЫВ
        |";

    Запрос.УстановитьПараметр("МинимальныйПриоритетОтбора", 5);
    Запрос.УстановитьПараметр("Наименование", НРег(СокрЛП(СтруктураДанныхУниверситет.Наименование)));

    УсловияФильтраСсылок = "ИСТИНА";
    ИспользуетсяОтборПоФильтруСсылок = (ФильтрСсылок.Количество() > 0);
    Если ИспользуетсяОтборПоФильтруСсылок = Истина Тогда
        УсловияФильтраСсылок = СтрШаблон("%1 И ВидыПриказовОбразование.Ссылка В (%2)", УсловияФильтраСсылок, ФильтрСсылок);
    КонецЕсли;
    Запрос.УстановитьПараметр("ИспользуетсяОтборПоФильтруСсылок", ИспользуетсяОтборПоФильтруСсылок);
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияФильтраСсылок", УсловияФильтраСсылок);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаДанных = РезультатЗапроса.Выгрузить();

    Если ТаблицаДанных.Количество() > 0 Тогда
        РезультатФункции = Новый Структура("ВидПриказа, Код, Наименование, УникальныйИдентификатор");
        ЗаполнитьЗначенияСвойств(РезультатФункции, ТаблицаДанных[0]);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПоискОбъектов

#Область СоответствияОбъектов

Функция ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет() Экспорт
    РезультатФункции = Новый Соответствие;

    РезультатФункции.Вставить("Студенты", "ФизическиеЛицаСтуденты");

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийФакультетовБГУ() Экспорт
    ТаблицаСоответствийПоУмолчанию = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийФакультетовПоУмолчанию();

    РезультатФункции = ПолучитьКэшСоответствийНаименованийОбъектовБГУ(
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Факультет,
            Неопределено,
            ТаблицаСоответствийПоУмолчанию);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийВидовПриказовБГУ() Экспорт
    ТаблицаСоответствийПоУмолчанию = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийВидовПриказовПоУмолчанию();

    РезультатФункции = ПолучитьКэшСоответствийНаименованийОбъектовБГУ(
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ВидПриказа,
            Неопределено,
            ТаблицаСоответствийПоУмолчанию);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийКурсовБГУ() Экспорт
    ТаблицаСоответствийПоУмолчанию = ГП_ОбменУниверситетБГУПовтИсп.ПолучитьТаблицуСоответствийНаименованийКурсовПоУмолчанию();

    РезультатФункции = ПолучитьКэшСоответствийНаименованийОбъектовБГУ(
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.Курс,
            Неопределено,
            ТаблицаСоответствийПоУмолчанию);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  ВидОбъектаОбменаДополнительный - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ, Неопределено
//  ТаблицаСоответствийПоУмолчанию - ТаблицаЗначений, Неопределено
//      * НаименованиеУниверситет - Строка
//      * НаименованиеБГУ - Строка
// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - НаименованиеУниверситет
//      * Значение - Строка - НаименованиеБГУ
Функция ПолучитьКэшСоответствийНаименованийОбъектовБГУ(
        Знач ВидОбъектаОбмена, ВидОбъектаОбменаДополнительный = Неопределено, Знач ТаблицаСоответствийПоУмолчанию = Неопределено) Экспорт

    ТаблицаСоответствийПоУмолчанию = ?(ТаблицаСоответствийПоУмолчанию = Неопределено,
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка(), ТаблицаСоответствийПоУмолчанию);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СоответствиеНаименований.Наименование КАК НаименованиеБГУ,
        |   СоответствиеНаименований.НаименованиеВнешнее КАК НаименованиеУниверситет
        |ИЗ
        |   РегистрСведений.ГП_СоответствиеНаименованийОбъектовОбменаУниверситетБГУ КАК СоответствиеНаименований
        |ГДЕ
        |   ИСТИНА
        |   И СоответствиеНаименований.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И СоответствиеНаименований.ВидОбъектаОбменаДополнительный = &ВидОбъектаОбменаДополнительный
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ВидОбъектаОбмена);
    Запрос.УстановитьПараметр("ВидОбъектаОбменаДополнительный", ВидОбъектаОбменаДополнительный);

    РезультатЗапроса = Запрос.Выполнить();
    ТаблицаСоответствийРегистра = РезультатЗапроса.Выгрузить();

    РезультатФункции = Новый Соответствие;
    Если ТаблицаСоответствийПоУмолчанию <> Неопределено Тогда
        Для Каждого ТекущаяСтрока Из ТаблицаСоответствийПоУмолчанию Цикл
            РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
        КонецЦикла;
    КонецЕсли;

    Для Каждого ТекущаяСтрока Из ТаблицаСоответствийРегистра Цикл
        РезультатФункции.Вставить(ТекущаяСтрока.НаименованиеУниверситет, ТекущаяСтрока.НаименованиеБГУ);
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  ВидОбъектаОбменаДополнительный - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ, Неопределено
//  ПараметрыОтбора - Структура
// Возвращаемое значение:
//  - ТаблицаЗначений
//      * Идентификатор - Строка
//      * ИдентификаторВнешний - Строка
Функция ПолучитьАктуальныеДанныеИдентификаторовДляВидаОбъектаОбмена(
        Знач ВидОбъектаОбмена, Знач ВидОбъектаОбменаДополнительный = Неопределено, Знач ПараметрыОтбора = Неопределено) Экспорт

    ПараметрыОтбора = ?(ПараметрыОтбора = Неопределено, Новый Структура, ПараметрыОтбора);
    ВидОбъектаОбменаДополнительный = ?(ВидОбъектаОбменаДополнительный = Неопределено,
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка(), ВидОбъектаОбменаДополнительный);

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   *
        |ИЗ
        |   РегистрСведений.ГП_ИдентификаторыОбменаУниверситетБГУ КАК ИдентификаторыОбменаУниверситетБГУ
        |ГДЕ
        |   ИдентификаторыОбменаУниверситетБГУ.ВидОбъектаОбмена = &ВидОбъектаОбмена
        |   И ИдентификаторыОбменаУниверситетБГУ.ВидОбъектаОбменаДополнительный = &ВидОбъектаОбменаДополнительный
        |   И ИдентификаторыОбменаУниверситетБГУ.СвязьУстарела = ЛОЖЬ
        |   И ИдентификаторыОбменаУниверситетБГУ.ИдентификаторВнешний <> &ПустойУникальныйИдентификатор
        |   И ИдентификаторыОбменаУниверситетБГУ.Идентификатор <> &ПустойУникальныйИдентификатор
        |   И &ДополнительныеПараметрыОтбора
        |";

    Запрос.УстановитьПараметр("ВидОбъектаОбмена", ВидОбъектаОбмена);
    Запрос.УстановитьПараметр("ВидОбъектаОбменаДополнительный", ВидОбъектаОбменаДополнительный);
    Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Строка(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор()));

    ДополнительныеПараметрыОтбора = "ИСТИНА";
    НаименованиеТалицы = "ИдентификаторыОбменаУниверситетБГУ";
    Если ПараметрыОтбора.Свойство("ИдентификаторВнешний") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ИдентификаторВнешний = &ИдентификаторВнешний",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("ИдентификаторВнешний", ПараметрыОтбора.ИдентификаторВнешний);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.Идентификатор = &Идентификатор",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("Идентификатор", ПараметрыОтбора.Идентификатор);
    КонецЕсли;
    Если ПараметрыОтбора.Свойство("МинДатаСоздания") Тогда
        ДополнительныеПараметрыОтбора = СтрШаблон("%1 И %2.ДатаСоздания => &МинДатаСоздания",
                ДополнительныеПараметрыОтбора,
                НаименованиеТалицы);
        Запрос.УстановитьПараметр("МинДатаСоздания", ПараметрыОтбора.МинДатаСоздания);
    КонецЕсли;

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПараметрыОтбора", ДополнительныеПараметрыОтбора);

    РезультатЗапроса = Запрос.Выполнить();
    РезультатФункции = РезультатЗапроса.Выгрузить();
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Идентификатор - Строка
//  ИдентификаторВнешний - Строка
//  ВидОбъектаОбмена - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ
//  ИдентификаторТранзакцииСоздания - Строка
//  ДатаСоздания - Дата, Неопределено
//  ВидОбъектаОбменаДополнительный - ПланВидовХарактеристикСсылка.ГП_ТипыОбъектовОбменаУниверситетБГУ, Неопределено
// Возвращаемое значение:
//  - Булево
Функция ЗаписатьСоответствияИдентификаторовОбмена(
        Знач Идентификатор, Знач ИдентификаторВнешний, Знач ВидОбъектаОбмена,
        Знач ИдентификаторТранзакцииСоздания, Знач ДатаСоздания = Неопределено, Знач ВидОбъектаОбменаДополнительный = Неопределено) Экспорт

    ВидОбъектаОбменаДополнительный = ?(ВидОбъектаОбменаДополнительный = Неопределено,
            ПланыВидовХарактеристик.ГП_ТипыОбъектовОбменаУниверситетБГУ.ПустаяСсылка(), ВидОбъектаОбменаДополнительный);

    ДатаСоздания = ?(ДатаСоздания = Неопределено, ТекущаяДатаСеанса(), ДатаСоздания);

    НаборЗаписей = РегистрыСведений.ГП_ИдентификаторыОбменаУниверситетБГУ.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
    НаборЗаписей.Отбор.ИдентификаторВнешний.Установить(ИдентификаторВнешний);
    НаборЗаписей.Отбор.ВидОбъектаОбмена.Установить(ВидОбъектаОбмена);
    НаборЗаписей.Отбор.ВидОбъектаОбменаДополнительный.Установить(ВидОбъектаОбменаДополнительный);
    НаборЗаписей.Отбор.СвязьУстарела.Установить(Ложь);

    НоваяЗапись = НаборЗаписей.Добавить();
    НоваяЗапись.Идентификатор = Идентификатор;
    НоваяЗапись.ИдентификаторВнешний = ИдентификаторВнешний;
    НоваяЗапись.ВидОбъектаОбмена = ВидОбъектаОбмена;
    НоваяЗапись.ВидОбъектаОбменаДополнительный = ВидОбъектаОбменаДополнительный;
    НоваяЗапись.СвязьУстарела = Ложь;
    НоваяЗапись.ДатаСоздания = ДатаСоздания;
    НоваяЗапись.ИдентификаторТранзакцииСоздания = ИдентификаторТранзакцииСоздания;

    НаборЗаписей.Записать(Истина);

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Соответствие из КлючИЗначение
//      * Ключ - Строка - Внешний идентификатор студента (ИБ Университет)
//      * Значение - Массив из СтрокаТаблицыЗначений - Ссылки на строки таблицы Приказов
Функция ПолучитьСтрокиТаблицыПриказовДляСтудентовУниверситет(
        Знач ТаблицаСтудентов, Знач ТаблицаПриказов, Знач ТаблицаИдентификаторовОбщихДанныхПриказа) Экспорт

    РезультатФункции = Новый Соответствие;

    Для Каждого СтрокаСтудента Из ТаблицаСтудентов Цикл
        НайденныеСтрокиСвязей = ТаблицаИдентификаторовОбщихДанныхПриказа.НайтиСтроки(
                Новый Структура("ИдентификаторСтудента", СтрокаСтудента.Идентификатор));

        Для Каждого СтрокаСвязей Из НайденныеСтрокиСвязей Цикл
            НайденныеСтрокиПриказов = ТаблицаПриказов.НайтиСтроки(Новый Структура("Идентификатор, ИдентификаторФакультета",
                        СтрокаСвязей.ИдентификаторПриказа, СтрокаСвязей.ИдентификаторФакультета));

            ДанныеПриказовСтудента = РезультатФункции.Получить(СтрокаСтудента.Идентификатор);
            Если ДанныеПриказовСтудента = Неопределено Тогда
                ДанныеПриказовСтудента = Новый Массив();
                РезультатФункции.Вставить(СтрокаСтудента.Идентификатор, ДанныеПриказовСтудента);
            КонецЕсли;

            ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПриказовСтудента, НайденныеСтрокиПриказов);
        КонецЦикла;
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СоответствияОбъектов

#Область КонструкторыОбъектов

Функция НовыйТаблицаСправочникаУниверситет(Знач ТипКолонкиСсылка) Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипКолонкиСсылка);
    РезультатФункции.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

Функция НовыйТаблицаДокументаУниверситет(Знач ТипКолонкиСсылка) Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    РезультатФункции.Колонки.Добавить("Ссылка", ТипКолонкиСсылка);
    РезультатФункции.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
    РезультатФункции.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
    РезультатФункции.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(500));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаТипыПриказов() Экспорт
    РезультатФункции = НовыйТаблицаСправочникаУниверситет(Новый ОписаниеТипов("СправочникСсылка.ВидыПриказовОбразование"));
    РезультатФункции.Колонки.Найти("Ссылка").Имя = "ВидПриказа";

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаКурсыОбучения() Экспорт
    РезультатФункции = НовыйТаблицаСправочникаУниверситет(Новый ОписаниеТипов("СправочникСсылка.КурсыОбучения"));
    РезультатФункции.Колонки.Найти("Ссылка").Имя = "Курс";

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
Функция НовыйТаблицаСпециальностейОбучения() Экспорт
    РезультатФункции = НовыйТаблицаСправочникаУниверситет(Новый ОписаниеТипов("СправочникСсылка.СпециальностиОбразование"));
    РезультатФункции.Колонки.Найти("Ссылка").Имя = "Специальность";
    РезультатФункции.Колонки.Добавить("КодСпециальности", ОбщегоНазначения.ОписаниеТипаСтрока(10));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ИдентификаторИсточникаСвязи - Строка
//      * ИдентификаторОбъектаСвязи - Строка
Функция НовыйТаблицаИдентификаторовСвязей() Экспорт
    РезультатФункции = Новый Соответствие;
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
Функция НовыйКоллекцияТаблицИдентификаторовСвязей() Экспорт
    РезультатФункции = Новый Структура;

    МассивНаименованийТаблиц = Новый Массив;
    МассивНаименованийТаблиц.Добавить("Факультеты");
    МассивНаименованийТаблиц.Добавить("Студенты");
    МассивНаименованийТаблиц.Добавить("ТипыПриказов");
    МассивНаименованийТаблиц.Добавить("КурсыОбучения");
    МассивНаименованийТаблиц.Добавить("Специальности");
    МассивНаименованийТаблиц.Добавить("ОснованияПоступления");
    МассивНаименованийТаблиц.Добавить("ФормыОбучения");

    Для Каждого ИмяТаблицыКолонки Из МассивНаименованийТаблиц Цикл
        РезультатФункции.Вставить(ИмяТаблицыКолонки, НовыйТаблицаИдентификаторовСвязей());
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - ТаблицаЗначений
//      * ИдентификаторПриказа - Строка
//      * ИдентификаторФакультета - Строка
//      * ИдентификаторОснованияПоступления - Строка
//      * ИдентификаторТипаПриказа - Строка
//      * ИдентификаторСпециальности - Строка
//      * ИдентификаторСтудента - Строка
Функция НовыйТаблицаИдентификаторовОбщихДанныхПриказа() Экспорт
    РезультатФункции = Новый ТаблицаЗначений;

    ТипКолонкиИдентификатора = ОбщегоНазначения.ОписаниеТипаСтрока(100);
    РезультатФункции.Колонки.Добавить("ИдентификаторПриказа", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторФакультета", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторОснованияПоступления", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторТипаПриказа", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторКурсаОбучения", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторСпециальности", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторСтудента", ТипКолонкиИдентификатора);
    РезультатФункции.Колонки.Добавить("ИдентификаторФормыОбучения", ТипКолонкиИдентификатора);

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // КонструкторыОбъектов

#Область ЗаполнениеТаблицИзСырыхДанныхУниверситет

Функция ЗаполнитьТаблицыИдентификаторовСвязейПриказа(КоллекцияТаблицИдентификаторовСвязей, Знач СтруктураПриказа) Экспорт
    Для Каждого ЭлементКЗ Из КоллекцияТаблицИдентификаторовСвязей Цикл
        КэшПсевдонимовНаименованийТаблиц = ПолучитьКэшПсевдонимовНаименованийТаблицУниверситет();
        НаименованияТаблицыУниверситет = КэшПсевдонимовНаименованийТаблиц.Получить(ЭлементКЗ.Ключ);
        НаименованияТаблицыУниверситет = ?(НаименованияТаблицыУниверситет = Неопределено,
                ЭлементКЗ.Ключ, НаименованияТаблицыУниверситет);

        Если НЕ СтруктураПриказа.Свойство(НаименованияТаблицыУниверситет) Тогда
            Продолжить;
        КонецЕсли;

        МассивИдентификаторовПриказа = СтруктураПриказа[НаименованияТаблицыУниверситет];
        ТаблицаИдентификации = КоллекцияТаблицИдентификаторовСвязей[ЭлементКЗ.Ключ];
        ЗаполняемыйМассивСвязей = ТаблицаИдентификации.Получить(СтруктураПриказа.УникальныйИдентификатор);
        Если ЗаполняемыйМассивСвязей = Неопределено Тогда
            ЗаполняемыйМассивСвязей = Новый Массив;
            ТаблицаИдентификации.Вставить(СтруктураПриказа.УникальныйИдентификатор, ЗаполняемыйМассивСвязей);
        КонецЕсли;
        Для Каждого ТекущийИдентификатор Из МассивИдентификаторовПриказа Цикл
            ЗаполняемыйМассивСвязей.Добавить(ТекущийИдентификатор);
        КонецЦикла;
    КонецЦикла;

    Возврат Истина;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ЗаполнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, Знач ИдентификаторПриказа, Знач ДанныеИдентификаторов, Знач Очищать = Истина) Экспорт

    Если Очищать = Истина Тогда
        ТаблицаИдентификаторов.Очистить();
    КонецЕсли;

    КоличествоДобавленных = 0;
    Для Каждого СтрокаДанных Из ДанныеИдентификаторов Цикл
        НоваяСтрока = ТаблицаИдентификаторов.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
        НоваяСтрока.ИдентификаторПриказа = ИдентификаторПриказа;
        НоваяСтрока.ИдентификаторСтудента = СтрокаДанных.УникальныйИдентификатор;
        КоличествоДобавленных = КоличествоДобавленных + 1;
    КонецЦикла;

    Возврат КоличествоДобавленных;
КонецФункции

// Возвращаемое значение:
//  - Число
Функция ДополнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, Знач ИдентификаторПриказа, Знач ДанныеИдентификаторов) Экспорт

    Возврат ЗаполнитьТаблицуИдентификаторовОбщихДанныхПриказа(
        ТаблицаИдентификаторов, ИдентификаторПриказа, ДанныеИдентификаторов, Ложь);
КонецФункции

#КонецОбласти // ЗаполнениеТаблицИзСырыхДанныхУниверситет

#Область Константы

// Возвращаемое значение:
//  - Строка
Функция ПолучитьПрефиксДляСозданияОбъектовИзУниверситет() Экспорт
    Возврат "RL";
КонецФункции

// Устарела. Требует рефакторинг
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыКонтрагентов
Функция ПолучитьТипКонтрагентаФизЛицо() Экспорт
    Возврат Справочники.ТипыКонтрагентов.НайтиПоКоду("7");
КонецФункции

// Устарела. Требует рефакторинг
//
// Возвращаемое значение:
//  СправочникСсылка.НаправленияДеятельности
Функция ПолучитьНаправлениеДеятельностиПлатноеОбучение()
    РезультатФункции = Справочники.НаправленияДеятельности.НайтиПоКоду("000003");
    Возврат РезультатФункции;
КонецФункции

Функция ПолучитьИнформациюОПредопределенныхТаблицСвязанныхОбъектов() Экспорт
    РезультатФункции = Новый Структура;

    КлючиСтруктурыИнформации = "Наименование, ТипСсылки, Обязательный";

    РезультатФункции.Вставить("ТипыПриказов", Новый Структура(КлючиСтруктурыИнформации,
            "ТипыПриказов", Новый ОписаниеТипов("СправочникСсылка.ВидыПриказовОбразование"), Истина));

    РезультатФункции.Вставить("КурсыОбучения", Новый Структура(КлючиСтруктурыИнформации,
            "КурсыОбучения", Новый ОписаниеТипов("СправочникСсылка.КурсыОбучения"), Истина));

    РезультатФункции.Вставить("Специальности", Новый Структура(КлючиСтруктурыИнформации,
            "Специальности", Новый ОписаниеТипов("СправочникСсылка.СпециальностиОбразование"), Истина));

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  СправочникСсылка.СтавкиОплатыОбразование
Функция ПолучитьСтавкиОплатыОбразованиеПоСеместрам()
    Возврат Справочники.СтавкиОплатыОбразование.НайтиПоКоду("000000017");
КонецФункции

Функция ПолучитьПоляДополнительныхСведенийСтрокиПриказаОбразования() Экспорт
    РезультатФункции = Новый Структура;

    РезультатФункции.Вставить("Курс",
        ПланыВидовХарактеристик.ПоляПриказовОбразование.Курс);
    РезультатФункции.Вставить("СпособыОплатыЗаОбучение",
        ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Способы оплаты за обучение"));
    РезультатФункции.Вставить("СтавкаОплаты",
        ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Ставка оплаты"));
    РезультатФункции.Вставить("Специальность",
        ПланыВидовХарактеристик.ПоляПриказовОбразование.Специальность);
    РезультатФункции.Вставить("ФормаОбучения",
        ПланыВидовХарактеристик.ПоляПриказовОбразование.НайтиПоНаименованию("Форма обучения"));

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // Константы

// Параметры:
//  ДанныеСтудента - Структура
//      * Наименование - Строка
//  Суффикс - Строка - По умолчанию Пустая строка
// Возвращаемое значение:
//  - Строка
Функция СформироватьНаименованиеДоговораОбразованияСоСтудентом(Знач ДанныеСтудента, Знач Суффикс = "") Экспорт
    РезультатФункции = СокрЛП(СтрШаблон("Договор со студентом %1%2", ДанныеСтудента.Наименование, Суффикс));
    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [F00227785] Обмен Университет-БГУ -- }
