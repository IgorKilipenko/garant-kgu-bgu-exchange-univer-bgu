// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

Функция ПолучитьСервисОбмена() Экспорт
    ЭтоБазаБГУ = ЭтоБазаБГУ();
    ЭтоБазаУниверситет = (НЕ ЭтоБазаБГУ) И ЭтоБазаУниверситет();

    Если ЭтоБазаБГУ Тогда
        Возврат СервисыИнтеграции.ГП_СервисИнтеграцииБГУУниверситет;
    ИначеЕсли ЭтоБазаУниверситет Тогда
        Возврат СервисыИнтеграции.ГП_СервисИнтеграцииУниверситетБГУ;
    Иначе
        ВызватьИсключение(СтрШаблон("База << %1 >> не поддерживается сервисом обмена << (Гарант+) Университет-БГУ >>",
                ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы()));
    КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  - Булево
Функция ЭтоБазаБГУ() Экспорт
    Возврат ГП_ОбменУниверситетБГУПовтИсп.ЭтоБазаБГУ();
КонецФункции

// Возвращаемое значение:
//  - Булево
Функция ЭтоБазаУниверситет() Экспорт
    Возврат ГП_ОбменУниверситетБГУПовтИсп.ЭтоБазаУниверситет();
КонецФункции

// Возвращаемое значение:
//  - Строка
Функция ПолучитьНаименованиеСервисаОбменаУниверситет() Экспорт
    Возврат СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(ПолучитьСервисОбмена()));
КонецФункции

#Область БГУ

// Параметры:
//  ТестовыйРежим - Булево
//  Сервис - СервисИнтеграции
Функция ПолучитьКаналОбменаВУниверситет(Знач ТестовыйРежим, Знач Сервис = Неопределено) Экспорт
    Если ЭтоБазаБГУ() = Ложь Тогда
        ВызватьИсключение("Канал ""ВУниверситет"" поддерживается только базой БГУ");
    КонецЕсли;

    СервисИнтеграции = ?(Сервис = Неопределено, ПолучитьСервисОбмена(), Сервис);
    Возврат СервисИнтеграции[ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяКаналаОбменаВУниверситет(ТестовыйРежим)];
КонецФункции

// Параметры:
//  ТестовыйРежим - Булево
//  Сервис - СервисИнтеграции
Функция ПолучитьКаналОбменаИзУниверситета(Знач ТестовыйРежим, Знач Сервис = Неопределено) Экспорт
    Если ЭтоБазаБГУ() = Ложь Тогда
        ВызватьИсключение("Канал ""ИзУниверситета"" поддерживается только базой БГУ");
    КонецЕсли;

    СервисИнтеграции = ?(Сервис = Неопределено, ПолучитьСервисОбмена(), Сервис);
    Возврат СервисИнтеграции[ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяКаналаОбменаИзУниверситета(ТестовыйРежим)];
КонецФункции

// Параметры:
//  СтруктураСообщения - Структура
//      * Параметры - Структура - Опционально
//      * СтруктураТела - Структура - Опционально
//  СервисОбмена - СервисИнтеграции
// Возвращаемое значение:
//  - СообщениеСервисаИнтеграции
Функция НовыйСообщениеВУниверситет(Знач СтруктураСообщения, Знач СервисОбмена) Экспорт
    Сообщение = ГП_СервисыИнтеграции.НовыйСообщениеСервисаИнтеграции(СтруктураСообщения, СервисОбмена);
    Сообщение.КодПолучателя = ПолучитьКодБазыУниверситет();
    Сообщение.КодОтправителя = ПолучитьКодБазыБГУ();

    Возврат Сообщение;
КонецФункции

#КонецОбласти // БГУ

#Область Университет

// Параметры:
//  ТестовыйРежим - Булево
//  Сервис - СервисИнтеграции
Функция ПолучитьКаналОбменаВБухгалтерию(Знач ТестовыйРежим, Знач Сервис = Неопределено) Экспорт
    Если ЭтоБазаУниверситет() = Ложь Тогда
        ВызватьИсключение("Канал ""ВБухгалтерию"" поддерживается только базой БГУ");
    КонецЕсли;

    СервисИнтеграции = ?(Сервис = Неопределено, ПолучитьСервисОбмена(), Сервис);
    Возврат СервисИнтеграции[ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяКаналаОбменаВБухгалтерию(ТестовыйРежим)];
КонецФункции

// Параметры:
//  ТестовыйРежим - Булево
//  Сервис - СервисИнтеграции
Функция ПолучитьКаналОбменаИзБухгалтерии(Знач ТестовыйРежим, Знач Сервис = Неопределено) Экспорт
    Если ЭтоБазаУниверситет() = Ложь Тогда
        ВызватьИсключение("Канал ""ИзБухгалтерии"" поддерживается только базой БГУ");
    КонецЕсли;

    СервисИнтеграции = ?(Сервис = Неопределено, ПолучитьСервисОбмена(), Сервис);
    Возврат СервисИнтеграции[ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьИмяКаналаОбменаИзБухгалтерии(ТестовыйРежим)];
КонецФункции

// Параметры:
//  СтруктураСообщения - Структура
//      * Параметры - Структура - Опционально
//      * СтруктураТела - Структура - Опционально
//  СервисОбмена - СервисИнтеграции
// Возвращаемое значение:
//  - СообщениеСервисаИнтеграции
Функция НовыйСообщениеВБухгалтерию(Знач СтруктураСообщения, Знач СервисОбмена) Экспорт
    Сообщение = ГП_СервисыИнтеграции.НовыйСообщениеСервисаИнтеграции(СтруктураСообщения, СервисОбмена);
    Сообщение.КодПолучателя = ПолучитьКодБазыБГУ();
    Сообщение.КодОтправителя = ПолучитьКодБазыУниверситет();

    Возврат Сообщение;
КонецФункции

#КонецОбласти // Университет

// Параметры:
//  КаналОбмена
//  ПараметрыОтбора - Структура
//      * КодПолучателя - Строка
//      * КодОтправителя - Строка
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * ДатаОтправкиЗапроса - Дата
//  ЗадержкаМсек - Число, Неопределено - По умолчанию 1000 мс
// Возвращаемое значение:
//  - Массив из Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПолучитьСообщенияСервиса(КаналОбмена, Знач ПараметрыОтбора, Знач ЗадержкаМсек = Неопределено) Экспорт
    Возврат ГП_СервисыИнтеграции.ПолучитьСообщенияСервиса(КаналОбмена, ПараметрыОтбора, ЗадержкаМсек);
КонецФункции

// Параметры:
//  ТелоСообщенияJSON - Строка
//  ПараметрыПреобразования - Структура, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПолучитьЗначениеТелаСообщенияУниверситетНаСервере(Знач ТелоСообщенияJSON) Экспорт
    РезультатФункции = ПрочитатьЗначениеJSON(ТелоСообщенияJSON);

    ПараметрыПреобразования = ?(ПараметрыПреобразования = Неопределено,
            Новый Структура("ПреобразоватьДатуВМестную", Ложь), ПараметрыПреобразования);

    РезультатФункции = ПреобразоватьЗначенияПрочитанноеИзJSONРекурсивно(
            РезультатФункции, ПараметрыПреобразования);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - СправочникСсылка.Организации
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
    Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Значение - Произвольный
//  ПараметрыПреобразования - Структура, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция ПреобразоватьЗначенияПрочитанноеИзJSONРекурсивно(Знач Значение, Знач ПараметрыПреобразования = Неопределено) Экспорт
    РезультатФункции = Значение;

    ПараметрыПреобразования = ?(ПараметрыПреобразования = Неопределено,
            Новый Структура("ПреобразоватьДатуВМестную", Ложь), ПараметрыПреобразования);

    Если ТипЗнч(РезультатФункции) = Тип("Структура") ИЛИ ТипЗнч(РезультатФункции) = Тип("Соответствие") Тогда
        Для Каждого ЭлементКЗ Из РезультатФункции Цикл
            РезультатФункции[ЭлементКЗ.Ключ] = ПреобразоватьЗначенияПрочитанноеИзJSONРекурсивно(
                    ЭлементКЗ.Значение, ПараметрыПреобразования);
        КонецЦикла;
    ИначеЕсли ТипЗнч(РезультатФункции) = Тип("Массив") Тогда
        Для ИндексЭлемента = 0 По РезультатФункции.Количество() - 1 Цикл
            РезультатФункции[ИндексЭлемента] = ПреобразоватьЗначенияПрочитанноеИзJSONРекурсивно(
                    РезультатФункции[ИндексЭлемента], ПараметрыПреобразования);
        КонецЦикла;
    Иначе
        РезультатФункции = ПреобразоватьЗначениеПрочитанноеИзJSON(РезультатФункции, ПараметрыПреобразования);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Значение - Произвольный
//  ПараметрыПреобразования - Структура
//      * ПреобразоватьДатуВМестную - Булево
// Возвращаемое значение:
//  - Произвольный
Функция ПреобразоватьЗначениеПрочитанноеИзJSON(Знач Значение, Знач ПараметрыПреобразования)
    РезультатФункции = Значение;

    ЭтоДата = Ложь;

    Если ТипЗнч(Значение) = Тип("Строка") Тогда
        ЭтоДата = Истина;
        Если СтрНачинаетсяС(Значение, "new Date(") И СтрЗаканчиваетсяНа(Значение, ")") Тогда // Это дата в формате JS
            РезультатФункции = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.JavaScript);
        ИначеЕсли СтрНачинаетсяС(Значение, "/Date(") И СтрЗаканчиваетсяНа(Значение, ")") Тогда
            РезультатФункции = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.Microsoft);
        Иначе
            ЭтоДата = Ложь;
        КонецЕсли;
    КонецЕсли;

    // Преобразование даты
    Если ЭтоДата = Истина И ПараметрыПреобразования.ПреобразоватьДатуВМестную Тогда
        РезультатФункции = ГП_СервисыИнтеграции.ПреобразоватьВМестнуюДатуСеанса(РезультатФункции);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
