// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

Процедура ВыполнениеОбработкиСервисовИнтеграции() Экспорт
    ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГП_СервисыИнтеграции);

    ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

Процедура ВыполнитьОбработкуСервисовИнтеграции(Знач ПривилегированныйРежим = Ложь) Экспорт
    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ВыполнитьОбработку();
КонецПроцедуры

Процедура ОстановитьОбработкуСервисовИнтеграции(Знач ПривилегированныйРежим = Ложь) Экспорт
    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ОстановитьОбработку();
КонецПроцедуры

// Параметры:
//  Сервис - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
Функция ПроверитьДоступностьСервиса(Знач Сервис) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    СервисИнтеграции = Неопределено;
    Если Сервис = Тип("Строка") Тогда
        СервисИнтеграции = СервисыИнтеграции[Сервис];
    Иначе
        СервисИнтеграции = Сервис;
        Сервис = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(СервисИнтеграции));
    КонецЕсли;

    ВключенПривилегированныйРежим = Ложь;
    Если НЕ ПривилегированныйРежим() Тогда
        ВключенПривилегированныйРежим = Истина;
        УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
    КонецЕсли;

    АктивностьСервиса = СервисИнтеграции.ПолучитьАктивность();

    Если НЕ АктивностьСервиса Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстОшибки = НСтр(
                "ru = 'Сервис интеграции %1 неактивен';
                |en = 'Integration service %1 is inactive'");
        РезультатФункции.ТекстОшибки = СтрШаблон(РезультатФункции.ТекстОшибки, Сервис);
    КонецЕсли;

    Если ВключенПривилегированныйРежим Тогда
        ВключенПривилегированныйРежим = Ложь;
        УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КаналОбмена
//  ПараметрыОтбора - Структура
//      * КодПолучателя - Строка
//      * КодОтправителя - Строка
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * ДатаОтправкиЗапроса - Дата
//  ЗадержкаМсек - Число, Неопределено - По умолчанию 1000 мс
// Возвращаемое значение:
//  - Массив из Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПолучитьСообщенияСервиса(КаналОбмена, Знач ПараметрыОтбора, Знач ЗадержкаМсек = Неопределено) Экспорт
    РезультатФункции = Новый Массив;

    МаксВремяОжиданияСек = 30;
    ИнтервалПерезапускаОбработкиСервисовСек = 60 * 2;
    // ИмяПоляДатаОтправкиОкончание = "ДатаОтправкиОкончание";

    // Структура отбора сообщений
    ОтборСообщений = Новый Структура;
    ОтборСообщений.Вставить("КодПолучателя", ПараметрыОтбора.КодПолучателя);
    ОтборСообщений.Вставить("КодОтправителя", ПараметрыОтбора.КодОтправителя);
    ОтборСообщений.Вставить("ИдентификаторСообщенияЗапроса", ПараметрыОтбора.ИдентификаторСообщенияЗапроса);
    // ОтборСообщений.Вставить("ДатаОтправкиНачало", ПараметрыОтбора.ДатаОтправкиЗапроса);
    // Если ПараметрыОтбора.Свойство(ИмяПоляДатаОтправкиОкончание) Тогда
    //     ОтборСообщений.Вставить(ИмяПоляДатаОтправкиОкончание, ПараметрыОтбора.ДатаОтправкиОкончание);
    // КонецЕсли;

    // Попытка получить сообщения из канала
    ЗадержкаМсек = ?(ЗадержкаМсек = Неопределено, 1000, ЗадержкаМсек);
    КоличествоПопыток = 10;
    СообщенияСервиса = Новый Массив;
    ДатаНачалаПопыток = ТекущаяДатаСеанса();
    ДатаЗапускаОбработкиСервисовИнтеграции = ДатаНачалаПопыток;
    Для НомерПопытки = 1 По КоличествоПопыток Цикл
        // Ожидание заполнения канала
        ПодождатьСинхронно(ЗадержкаМсек);

        // Чтение сообщений, формирование результата
        СообщенияСервиса = КаналОбмена.ВыбратьСообщения(ОтборСообщений);

        ТекущаяДатаСеанса = ТекущаяДатаСеанса();
        Если СообщенияСервиса.Количество() > 0 ИЛИ ((ТекущаяДатаСеанса - ДатаНачалаПопыток) > МаксВремяОжиданияСек) Тогда
            Прервать;
        ИначеЕсли (ТекущаяДатаСеанса - ДатаЗапускаОбработкиСервисовИнтеграции) > ИнтервалПерезапускаОбработкиСервисовСек Тогда
            ДатаЗапускаОбработкиСервисовИнтеграции = ТекущаяДатаСеанса;
            // ОстановитьОбработкуСервисовИнтеграции(Истина);
            ВыполнитьОбработкуСервисовИнтеграции(Истина);
        КонецЕсли;
    КонецЦикла;

    // Чтение сообщений, формирование результата
    Для Каждого ТекущееСообщение Из СообщенияСервиса Цикл
        ПредставлениеСообщения = ПрочитатьСообщениеСервиса(ТекущееСообщение);
        РезультатФункции.Добавить(ПредставлениеСообщения);
    КонецЦикла;

    // Очистка канала
    КаналОбмена.УдалитьСообщения(ОтборСообщений);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Сообщение - СообщениеСервисаИнтеграции
// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПрочитатьСообщениеСервиса(Знач Сообщение) Экспорт
    РезультатФункции = НовыйСтруктураПредставленияСообщенияСервиса();

    РазмерБуфера = Сообщение.РазмерТела;

    Тело = Новый БуферДвоичныхДанных(0);
    Буфер = Новый БуферДвоичныхДанных(РазмерБуфера);

    Поток = Сообщение.ПолучитьТелоКакПоток();

    Пока Истина Цикл
        Прочитано = Поток.Прочитать(Буфер, 0, РазмерБуфера);

        Если Прочитано > 0 Тогда
            Тело = Тело.Соединить(Буфер);
        КонецЕсли;

        Если Прочитано < РазмерБуфера Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    ЗаполнитьЗначенияСвойств(РезультатФункции, Сообщение);
    РезультатФункции.ПредставлениеТелаСообщения = ПолучитьСтрокуИзБуфераДвоичныхДанных(Тело);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор, Неопределено
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор, Неопределено
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция НовыйСтруктураПредставленияСообщенияСервиса() Экспорт
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("ДатаОтправки", Дата(1, 1, 1));
    РезультатФункции.Вставить("ДатаУстаревания", Дата(1, 1, 1));
    РезультатФункции.Вставить("Идентификатор");
    РезультатФункции.Вставить("ИдентификаторСообщенияЗапроса");
    РезультатФункции.Вставить("КодОтправителя", "");
    РезультатФункции.Вставить("КодПолучателя", "");
    РезультатФункции.Вставить("Параметры", Новый Соответствие);
    РезультатФункции.Вставить("ПредставлениеТелаСообщения", "");

    Возврат РезультатФункции;
КонецФункции

Функция ПреобразоватьВУниверсальнуюДатуСеанса(Знач ДатаСеанса) Экспорт
    Возврат УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
КонецФункции

Функция ПреобразоватьВМестнуюДатуСеанса(Знач ДатаСеанса) Экспорт
    Возврат МестноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

Функция ПодождатьСинхронно(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут

    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;

    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат ВремяПрошло;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }
