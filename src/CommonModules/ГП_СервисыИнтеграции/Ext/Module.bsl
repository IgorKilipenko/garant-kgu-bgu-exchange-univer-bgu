// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

// Для выполнения из регламентного задания
Процедура ВыполнениеОбработкиСервисовИнтеграции() Экспорт
    ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГП_СервисыИнтеграции);

    ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

// Выполняет обработку (прием / передача) сообщений сервисов интеграции
// Параметры:
//  ПривилегированныйРежим - Булево
Процедура ВыполнитьОбработкуСервисовИнтеграции(Знач ПривилегированныйРежим = Ложь) Экспорт
    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ВыполнитьОбработку();
КонецПроцедуры

// Устарела. Не используется
//
// Параметры:
//  ПривилегированныйРежим - Булево
Процедура ОстановитьОбработкуСервисовИнтеграции(Знач ПривилегированныйРежим = Ложь) Экспорт
    Если ПривилегированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ОстановитьОбработку();
КонецПроцедуры

// Параметры:
//  Сервис - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообщения - Строка, Неопределено
Функция ПроверитьДоступностьСервиса(Знач Сервис) Экспорт
    РезультатФункции = Новый Структура("Успех, ТекстСообщения", Истина);

    СервисИнтеграции = Неопределено;
    Если Сервис = Тип("Строка") Тогда
        СервисИнтеграции = СервисыИнтеграции[Сервис];
    Иначе
        СервисИнтеграции = Сервис;
        Сервис = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(СервисИнтеграции));
    КонецЕсли;

    ВключенПривилегированныйРежим = Ложь;
    Если НЕ ПривилегированныйРежим() Тогда
        ВключенПривилегированныйРежим = Истина;
        УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
    КонецЕсли;

    АктивностьСервиса = СервисИнтеграции.ПолучитьАктивность();

    Если НЕ АктивностьСервиса Тогда
        РезультатФункции.Успех = Ложь;
        РезультатФункции.ТекстОшибки = НСтр(
                "ru = 'Сервис интеграции %1 неактивен';
                |en = 'Integration service %1 is inactive'");
        РезультатФункции.ТекстОшибки = СтрШаблон(РезультатФункции.ТекстОшибки, Сервис);
    КонецЕсли;

    Если ВключенПривилегированныйРежим Тогда
        ВключенПривилегированныйРежим = Ложь;
        УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
    КонецЕсли;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КаналОбмена - КаналСервисаИнтеграции
//  ПараметрыОтбора - Структура
//      * КодПолучателя - Строка
//      * КодОтправителя - Строка
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * ДатаОтправкиЗапроса - Дата
//  ЗадержкаМсек - Число, Неопределено - По умолчанию 1000 мс
// Возвращаемое значение:
//  - Массив из Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПолучитьСообщенияСервиса(КаналОбмена, Знач ПараметрыОтбора, Знач ЗадержкаМсек = Неопределено) Экспорт
    РезультатФункции = Новый Массив;

    МаксВремяОжиданияСек = 30;
    ИнтервалПерезапускаОбработкиСервисовСек = 60 * 2;

    // Структура отбора сообщений
    ОтборСообщений = Новый Структура;
    ОтборСообщений.Вставить("КодПолучателя", ПараметрыОтбора.КодПолучателя);
    ОтборСообщений.Вставить("КодОтправителя", ПараметрыОтбора.КодОтправителя);
    ОтборСообщений.Вставить("ИдентификаторСообщенияЗапроса", ПараметрыОтбора.ИдентификаторСообщенияЗапроса);

    // Попытка получить сообщения из канала
    ЗадержкаМсек = ?(ЗадержкаМсек = Неопределено, 1000, ЗадержкаМсек);
    КоличествоПопыток = 10;
    СообщенияСервиса = Новый Массив;
    ДатаНачалаПопыток = ТекущаяДатаСеанса();
    ДатаЗапускаОбработкиСервисовИнтеграции = ДатаНачалаПопыток;
    Для НомерПопытки = 1 По КоличествоПопыток Цикл
        // Ожидание заполнения канала
        ПодождатьСинхронно(ЗадержкаМсек);

        // Чтение сообщений, формирование результата
        СообщенияСервиса = КаналОбмена.ВыбратьСообщения(ОтборСообщений);

        ТекущаяДатаСеанса = ТекущаяДатаСеанса();
        Если СообщенияСервиса.Количество() > 0 ИЛИ ((ТекущаяДатаСеанса - ДатаНачалаПопыток) > МаксВремяОжиданияСек) Тогда
            Прервать;
        ИначеЕсли (ТекущаяДатаСеанса - ДатаЗапускаОбработкиСервисовИнтеграции) > ИнтервалПерезапускаОбработкиСервисовСек Тогда
            ДатаЗапускаОбработкиСервисовИнтеграции = ТекущаяДатаСеанса;
            // ОстановитьОбработкуСервисовИнтеграции(Истина);
            ВыполнитьОбработкуСервисовИнтеграции(Истина);
        КонецЕсли;
    КонецЦикла;

    // Чтение сообщений, формирование результата
    Для Каждого ТекущееСообщение Из СообщенияСервиса Цикл
        ПредставлениеСообщения = ПрочитатьСообщениеСервиса(ТекущееСообщение);
        РезультатФункции.Добавить(ПредставлениеСообщения);
    КонецЦикла;

    // Очистка канала
    КаналОбмена.УдалитьСообщения(ОтборСообщений);

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Сообщение - СообщениеСервисаИнтеграции
// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПрочитатьСообщениеСервиса(Знач Сообщение) Экспорт
    РезультатФункции = НовыйСтруктураПредставленияСообщенияСервиса();

    РазмерБуфера = Сообщение.РазмерТела;

    Тело = Новый БуферДвоичныхДанных(0);
    Буфер = Новый БуферДвоичныхДанных(РазмерБуфера);

    Поток = Сообщение.ПолучитьТелоКакПоток();

    Пока Истина Цикл
        Прочитано = Поток.Прочитать(Буфер, 0, РазмерБуфера);

        Если Прочитано > 0 Тогда
            Тело = Тело.Соединить(Буфер);
        КонецЕсли;

        Если Прочитано < РазмерБуфера Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    ЗаполнитьЗначенияСвойств(РезультатФункции, Сообщение);
    РезультатФункции.ПредставлениеТелаСообщения = ПолучитьСтрокуИзБуфераДвоичныхДанных(Тело);

    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Строка - Идентификатор информационной базы в сервисе обмена
Функция ПолучитьИдентификаторИнформационнойБазы() Экспорт
    Возврат СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор, Неопределено
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор, Неопределено
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция НовыйСтруктураПредставленияСообщенияСервиса() Экспорт
    РезультатФункции = Новый Структура;
    РезультатФункции.Вставить("ДатаОтправки", Дата(1, 1, 1));
    РезультатФункции.Вставить("ДатаУстаревания", Дата(1, 1, 1));
    РезультатФункции.Вставить("Идентификатор");
    РезультатФункции.Вставить("ИдентификаторСообщенияЗапроса");
    РезультатФункции.Вставить("КодОтправителя", "");
    РезультатФункции.Вставить("КодПолучателя", "");
    РезультатФункции.Вставить("Параметры", Новый Соответствие);
    РезультатФункции.Вставить("ПредставлениеТелаСообщения", "");

    Возврат РезультатФункции;
КонецФункции

// Устарела. Не используется
//
Функция ПреобразоватьВУниверсальнуюДатуСеанса(Знач ДатаСеанса) Экспорт
    Возврат УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
КонецФункции

// Устарела. Не используется
//
Функция ПреобразоватьВМестнуюДатуСеанса(Знач ДатаСеанса) Экспорт
    Возврат МестноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
КонецФункции

// Параметры:
//  СтруктураСообщения - Структура
//      * КодПолучателя - Строка - Опционально
//      * КодОтправителя - Строка - Опционально
//      * Параметры - Структура - Опционально
//      * СтруктураТела - Структура - Опционально
//  СервисОбмена - СервисИнтеграции
//  ДатаТранзакции - Дата, Неопределено
// Возвращаемое значение:
//  - СообщениеСервисаИнтеграции
Функция НовыйСообщениеСервисаИнтеграции(Знач СтруктураСообщения, Знач СервисОбмена, Знач ДатаТранзакции = Неопределено) Экспорт
    ДатаТранзакции = ?(ДатаТранзакции = Неопределено, ТекущаяДатаСеанса(), ДатаТранзакции);

    Сообщение = СервисОбмена.СоздатьСообщение(ГП_ОбменУниверситетБГУКлиентСервер.РассчитатьДатуУстареванияСообщения(ДатаТранзакции));
    Сообщение.КодПолучателя = ?(СтруктураСообщения.Свойство("КодПолучателя"), СтруктураСообщения.КодПолучателя, "");
    Сообщение.КодОтправителя = ?(СтруктураСообщения.Свойство("КодОтправителя"), СтруктураСообщения.КодОтправителя, "");

    // Подготовка структуры параметров сообщения
    ПараметрыСообщения = ?(СтруктураСообщения.Свойство("Параметры"),
            ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураСообщения.Параметры),
            НовыйСтруктураПараметровСообщенияСервисаИнтеграции());
    ДополнитьСтруктуруПараметровЗначениямиПоУмолчанию(ПараметрыСообщения);

    // Заполнение параметров сообщения
    Для Каждого ПараметрКЗ Из ПараметрыСообщения Цикл
        Сообщение.Параметры.Вставить(ПараметрКЗ.Ключ, ПараметрКЗ.Значение);
    КонецЦикла;

    // Заполнение тела сообщения
    Если СтруктураСообщения.Свойство("СтруктураТела") Тогда
        ТелоJSON = ЗначениеJSON(СтруктураСообщения.СтруктураТела);
        ПотокТела = Сообщение.ПолучитьТелоКакПоток();
        БуферДвоичныхДанных = ПолучитьБуферДвоичныхДанныхИзСтроки(ТелоJSON, "UTF-8", Ложь);
        ПотокТела.Записать(БуферДвоичныхДанных, 0, БуферДвоичныхДанных.Размер);
        ПотокТела.Закрыть();
    КонецЕсли;

    Возврат Сообщение;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * ИдентификаторИнформационнойБазы - Строка
//      * ИдентификаторИнформационнойБазыЗапроса - Строка
//      * Пользователь - Строка
Функция НовыйСтруктураПараметровСообщенияСервисаИнтеграции() Экспорт
    РезультатФункции = Новый Структура;

    КлючиОбязательныхПолейПараметровСообщения = Новый Массив;
    КлючиОбязательныхПолейПараметровСообщения.Добавить("ТипСообщения");
    КлючиОбязательныхПолейПараметровСообщения.Добавить("Пользователь");
    КлючиОбязательныхПолейПараметровСообщения.Добавить("ИдентификаторИнформационнойБазы");
    КлючиОбязательныхПолейПараметровСообщения.Добавить("ИдентификаторИнформационнойБазыЗапроса");

    Для Каждого КлючСтруктуры Из КлючиОбязательныхПолейПараметровСообщения Цикл
        РезультатФункции.Вставить(КлючСтруктуры, "");
    КонецЦикла;

    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  СтруктураПараметров - Структура
Процедура ДополнитьСтруктуруПараметровЗначениямиПоУмолчанию(СтруктураПараметров) Экспорт
    ПараметрыСтруктурыСообщенияПоУмолчанию = НовыйСтруктураПараметровСообщенияСервисаИнтеграции();
    Для Каждого ЭлементПараметраПоУмолчаниюКЗ Из ПараметрыСтруктурыСообщенияПоУмолчанию Цикл
        Если Не СтруктураПараметров.Свойство(ЭлементПараметраПоУмолчаниюКЗ.Ключ) Тогда
            СтруктураПараметров.Вставить(ЭлементПараметраПоУмолчаниюКЗ.Ключ, ЭлементПараметраПоУмолчаниюКЗ.Значение);
        КонецЕсли;
    КонецЦикла;

    Если ПустаяСтрока(СтруктураПараметров.ИдентификаторИнформационнойБазы) Тогда
        СтруктураПараметров.ИдентификаторИнформационнойБазы = ПолучитьИдентификаторИнформационнойБазы();
    КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
//  - Массив из Строка
Функция ПолучитьКлючиОбязательныхПолейПараметровСообщенияСервисаИнтеграции() Экспорт
    РезультатФункции = Новый Массив;
    СтруктураПараметровСообщения = НовыйСтруктураПараметровСообщенияСервисаИнтеграции();
    Для Каждого ЭлементКЗ Из СтруктураПараметровСообщения Цикл
        РезультатФункции.Добавить(ЭлементКЗ.Ключ);
    КонецЦикла;
    Возврат РезультатФункции;
КонецФункции

#Область РаботаJSON

// Параметры:
//  Значение - Произвольный
// Возвращаемое значение:
//  - Строка
Функция ЗначениеJSON(Знач Значение) Экспорт
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();

    НастройкиСериализацииJSON = НовыйНастройкиСериализацииJSONСообщенияИнтеграции();
    ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразовательЗначенийJSONТелаСообщений", ГП_СервисыИнтеграции);

    Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Параметры:
//  Строка - Строка
//  МассивКлючейДат - Массив из Строка, Неопределено
// Возвращаемое значение:
//  - Произвольный
Функция JSONЗначение(Знач Строка, Знач МассивКлючейДат = Неопределено) Экспорт
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Строка);
    Возврат ПрочитатьJSON(ЧтениеJSON, Ложь, МассивКлючейДат);
КонецФункции

// Используется как обработчик (преобразователь) значений при записи в JSON
Функция ПреобразовательЗначенийJSONТелаСообщений(Знач Свойство, Знач Значение, Знач ДополнительныеПараметры, Отказ) Экспорт
    Если ТипЗнч(Значение) = Тип("Дата") Тогда
        Возврат ГП_ОбменУниверситетБГУКлиентСервер.ПолучитьСтрокуДатыJSON(Значение);
    ИначеЕсли Значение = Неопределено ИЛИ Значение = Null Тогда
        Возврат "";
    ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
        Возврат Строка(Значение);
    КонецЕсли;
КонецФункции

// Возвращаемое значение:
//  - НастройкиСериализацииJSON
Функция НовыйНастройкиСериализацииJSONСообщенияИнтеграции() Экспорт
    НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
    НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
    НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.JavaScript;

    Возврат НастройкиСериализацииJSON;
КонецФункции

// Параметры:
//  ИдентификаторСообщенияЗапроса - УникальныйИдентификатор, Неопределено
// Возвращаемое значение:
//  - Структура
//      * КодПолучателя - Строка
//      * КодОтправителя - Строка
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
Функция НовыйПараметрыОтбораСообщенийОтвета(Знач ИдентификаторСообщенияЗапроса = Неопределено) Экспорт
    ИдентификаторСообщенияЗапроса = ?(ИдентификаторСообщенияЗапроса = Неопределено,
            Новый УникальныйИдентификатор, ИдентификаторСообщенияЗапроса);

    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("КодПолучателя", "");
    ПараметрыОтбора.Вставить("КодОтправителя", "");
    ПараметрыОтбора.Вставить("ИдентификаторСообщенияЗапроса", ИдентификаторСообщенияЗапроса);

    Возврат ПараметрыОтбора;
КонецФункции

#КонецОбласти // РаботаJSON

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

Функция ПодождатьСинхронно(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут

    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;

    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат ВремяПрошло;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }
