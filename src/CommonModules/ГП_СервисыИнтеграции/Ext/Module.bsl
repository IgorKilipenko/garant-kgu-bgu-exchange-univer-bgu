// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

Процедура ВыполнениеОбработкиСервисовИнтеграции() Экспорт
    ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГП_СервисыИнтеграции);

    ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

Процедура ВыполнитьОбработкуСервисовИнтеграции(Знач ПривелигированныйРежим = Ложь) Экспорт
    Если ПривелигированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ВыполнитьОбработку();
КонецПроцедуры

// Параметры:
//  Сервис - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообшения - Строка, Неопределено
Функция ПроверитьДоступностьСервиса(Знач Сервис) Экспорт
	РезультатФункции = Новый Структура("Успех, ТекстСообшения", Истина);
    
    СервисИнтекрации = Неопределено;
    Если Сервис = Тип("Строка") Тогда
        СервисИнтекрации = СервисыИнтеграции[Сервис];
    Иначе
        СервисИнтекрации = Сервис;
        Сервис = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(СервисИнтекрации));
    КонецЕсли;

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	АктивностьСервиса =СервисИнтекрации.ПолучитьАктивность();

	Если Не АктивностьСервиса Тогда 
		РезультатФункции.Успех = Ложь;  
		РезультатФункции.ТекстОшибки = НСтр(
            "ru = 'Сервис интеграции %1 неактивен';
			|en = 'Integration service %1 is inactive'");
		РезультатФункции.ТекстОшибки = СтрШаблон(РезультатФункции.ТекстОшибки, Сервис);
	КонецЕсли;	

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
    КонецЕсли;

	Возврат РезультатФункции;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }