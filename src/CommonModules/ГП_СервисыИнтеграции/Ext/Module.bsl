// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область ПрограммныйИнтерфейс

Процедура ВыполнениеОбработкиСервисовИнтеграции() Экспорт
    ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГП_СервисыИнтеграции);

    ВыполнитьОбработкуСервисовИнтеграции(Истина);
КонецПроцедуры

Процедура ВыполнитьОбработкуСервисовИнтеграции(Знач ПривелигированныйРежим = Ложь) Экспорт
    Если ПривелигированныйРежим Тогда
        УстановитьПривилегированныйРежим(Истина);
    КонецЕсли;

    СервисыИнтеграции.ВыполнитьОбработку();
КонецПроцедуры

// Параметры:
//  Сервис - Строка
// Возвращаемое значение:
//  - Структура
//      * Успех - Булево
//      * ТекстСообшения - Строка, Неопределено
Функция ПроверитьДоступностьСервиса(Знач Сервис) Экспорт
	РезультатФункции = Новый Структура("Успех, ТекстСообшения", Истина);
    
    СервисИнтекрации = Неопределено;
    Если Сервис = Тип("Строка") Тогда
        СервисИнтекрации = СервисыИнтеграции[Сервис];
    Иначе
        СервисИнтекрации = Сервис;
        Сервис = СтандартныеПодсистемыВызовСервера.ИмяОбъектаМетаданных(ТипЗнч(СервисИнтекрации));
    КонецЕсли;

	ВключенПривилегированныйРежим = Ложь;
	Если Не ПривилегированныйРежим() Тогда  
		ВключенПривилегированныйРежим = Истина;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);
	КонецЕсли;

	АктивностьСервиса =СервисИнтекрации.ПолучитьАктивность();

	Если Не АктивностьСервиса Тогда 
		РезультатФункции.Успех = Ложь;  
		РезультатФункции.ТекстОшибки = НСтр(
            "ru = 'Сервис интеграции %1 неактивен';
			|en = 'Integration service %1 is inactive'");
		РезультатФункции.ТекстОшибки = СтрШаблон(РезультатФункции.ТекстОшибки, Сервис);
	КонецЕсли;	

	Если ВключенПривилегированныйРежим Тогда 
		ВключенПривилегированныйРежим = Ложь;
		УстановитьПривилегированныйРежим(ВключенПривилегированныйРежим);	
    КонецЕсли;

	Возврат РезультатФункции;
КонецФункции

// Параметры:
//  КаналОбмена
//  ПараметрыОтбора - Структура
//      * КодПолучателя - Строка
//      * КодОтправителя - Строка
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * ДатаОтправкиЗапроса - Дата
//  ЗадержкаМсек - Число, Неопределено - По умолчанию 1000 мс
// Возвращаемое значение:
//  - Массив из Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПолучитьСообщенияСервиса(КаналОбмена, Знач ПараметрыОтбора, Знач ЗадержкаМсек = Неопределено) Экспорт
    РезультатФункции = Новый Массив;
    
    ИмяПоляДатаОтправкиОкончание = "ДатаОтправкиОкончание";
    
    // Структкра отбора сообщений
    ОтборСообщений = Новый Структура;
    ОтборСообщений.Вставить("КодПолучателя", ПараметрыОтбора.КодПолучателя);
    ОтборСообщений.Вставить("КодОтправителя", ПараметрыОтбора.КодОтправителя);
    ОтборСообщений.Вставить("ИдентификаторСообщенияЗапроса", ПараметрыОтбора.ИдентификаторСообщенияЗапроса);
    ОтборСообщений.Вставить("ДатаОтправкиНачало", ПараметрыОтбора.ДатаОтправкиЗапроса);
    ДатаОтправкиОкончание = ПараметрыОтбора.ДатаОтправкиЗапроса;
    Если ПараметрыОтбора.Свойство(ИмяПоляДатаОтправкиОкончание) Тогда
        ОтборСообщений.Вставить(ИмяПоляДатаОтправкиОкончание, ПараметрыОтбора.ДатаОтправкиОкончание);
    КонецЕсли;
    
    // Попытка получить сообщения из канала
    ЗадержкаМсек = ?(ЗадержкаМсек = Неопределено, 1000, ЗадержкаМсек);
    КоличествоПопыток = 100;
    СообщенияСервиса = Новый Массив;
    Для НомерПопытки = 1 По КоличествоПопыток Цикл
        // Ожидание заполнения канала
        ПодождатьСинхронно(ЗадержкаМсек);
        
        // Чтение сообщений, формирование результата
        СообщенияСервиса = КаналОбмена.ВыбратьСообщения(ОтборСообщений);
        
        Если СообщенияСервиса.Количество() > 0 Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    // Чтение сообщений, формирование результата
    Для каждого ТекущееСообщение Из СообщенияСервиса Цикл
        ПредставлениеСообщения = ПрочитатьСообщениеСервиса(ТекущееСообщение);
    	РезультатФункции.Добавить(ПредставлениеСообщения);
    КонецЦикла;
    
    // Очистка канала
    ОтборСообщений.Удалить("ДатаОтправкиНачало");
    Если ОтборСообщений.Свойство(ИмяПоляДатаОтправкиОкончание) Тогда
        ОтборСообщений.Удалить(ИмяПоляДатаОтправкиОкончание);
    КонецЕсли;
    СообщенияСервисаДляУдаления = КаналОбмена.ВыбратьСообщения(ОтборСообщений);
    ИдентификаторыСообщенийСервисаДляУдаления = Новый Массив;
    Для каждого СообщениеДляУдаления Из СообщенияСервисаДляУдаления Цикл
        ИдентификаторыСообщенийСервисаДляУдаления.Добавить(СообщениеДляУдаления.Идентификатор);
    КонецЦикла;
    КаналОбмена.УдалитьСообщения(ИдентификаторыСообщенийСервисаДляУдаления);
    
    Возврат РезультатФункции;
КонецФункции

// Параметры:
//  Сообщение - СообщениеСервисаИнтеграции
// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция ПрочитатьСообщениеСервиса(Знач Сообщение) Экспорт
    РезультатФункции = НовыйСтруктураПредставленияСообщенияСервиса();
    
    РазмерБуфера = Сообщение.РазмерТела;
    //Если РазмерСообщения <> Неопределено Тогда
    //    РазмерБуфера = Число(РазмерСообщения); 
    //Иначе
    //    РазмерБуфера = 1024;
    //КонецЕсли;

    Тело = Новый БуферДвоичныхДанных(0);
    Буфер = Новый БуферДвоичныхДанных(РазмерБуфера);

    Поток = Сообщение.ПолучитьТелоКакПоток();

    Пока Истина Цикл
        Прочитано = Поток.Прочитать(Буфер, 0, РазмерБуфера);

        Если Прочитано > 0 Тогда
            Тело = Тело.Соединить(Буфер);
        КонецЕсли;

        Если Прочитано < РазмерБуфера Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;

    ЗаполнитьЗначенияСвойств(РезультатФункции, Сообщение);
    РезультатФункции.ПредставлениеТелаСообщения = ПолучитьСтрокуИзБуфераДвоичныхДанных(Тело);
    
    Возврат РезультатФункции;
КонецФункции

// Возвращаемое значение:
//  - Структура
//      * ДатаОтправки - Дата
//      * ДатаУстаревания - Дата
//      * Идентификатор - УникальныйИдентификатор, Неопределено
//      * ИдентификаторСообщенияЗапроса - УникальныйИдентификатор, Неопределено
//      * КодОтправителя - Строка
//      * КодПолучателя - Строка
//      * Параметры - Соответствие
//      * ПредставлениеТелаСообщения - Строка
Функция НовыйСтруктураПредставленияСообщенияСервиса() Экспорт
    РезультатФункуции = Новый Структура;
    РезультатФункуции.Вставить("ДатаОтправки", Дата(1, 1, 1));
    РезультатФункуции.Вставить("ДатаУстаревания", Дата(1, 1, 1));
    РезультатФункуции.Вставить("Идентификатор");
    РезультатФункуции.Вставить("ИдентификаторСообщенияЗапроса");
    РезультатФункуции.Вставить("КодОтправителя", "");
    РезультатФункуции.Вставить("КодПолучателя", "");
    РезультатФункуции.Вставить("Параметры", Новый Соответствие);
    РезультатФункуции.Вставить("ПредставлениеТелаСообщения", "");

    Возврат РезультатФункуции;
КонецФункции

//// Параметры:
////  ДатаОтправки - Дата
//Функция РассчитатьДатуУстареванияСообщения(Знач ДатаОтправки) Экспорт
//    Возврат ДатаОтправки + ПолучитьИнтервалУстареванияСообщения();
//КонецФункции

//// Возвращаемое значение:
////  - Число - Интервал в секундах
//Функция ПолучитьИнтервалУстареванияСообщения() Экспорт
//    Возврат (60 * 5); // 5 минут
//КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }

// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ ++ {
#Область СлужебныеПроцедурыИФункции

Функция ПодождатьСинхронно(Знач ИнтервалМсек)
    МаксОжидание = 60 * 5; // 5 минут
    
    ДатаНачала = ТекущаяДатаСеанса();
    ИнтервалВСекундах = ИнтервалМсек / 1000;
    // ДатаОкончания = ДатаНачала + ИнтервалВСекундах;
    ВремяПрошло = 0;
    Пока Истина Цикл
        // Ожидание
        ВремяПрошло = ТекущаяДатаСеанса() - ДатаНачала;
        Если ВремяПрошло > ИнтервалВСекундах ИЛИ ВремяПрошло > МаксОжидание Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Возврат ВремяПрошло;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
// Гарант+ Килипенко 24.04.2025 [] Обмен Университет-БГУ -- }
